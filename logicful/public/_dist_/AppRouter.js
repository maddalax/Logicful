/* src/AppRouter.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { Router, Link, Route } from "../web_modules/svelte-routing.js";
import Authenticate from "./components/Authenticate.js";
import AccountSettingsPage from "./pages/account/AccountSettingsPage.js";
import BillingPage from "./pages/account/BillingPage.js";
import LoginPage from "./pages/account/LoginPage.js";
import LogoutPage from "./pages/account/LogoutPage.js";
import ManageTeamPage from "./pages/account/ManageTeamPage.js";
import RegisterPage from "./pages/account/RegisterPage.js";
import DashboardPage from "./pages/DashboardPage.js";
import FolderPage from "./pages/folder/FolderPage.js";
import CreateFormPage from "./pages/form/CreateFormPage.js";
import FormBuilderPage from "./pages/form/FormBuilderPage.js";
import FormSubmissionsPage from "./pages/form/FormSubmissionsPage.js";
import PreviewFormPage from "./pages/form/PreviewFormPage.js";
import Navbar from "./components/layout/Navbar.js";
import Preloader from "./components/layout/Preloader.js";
import { afterUpdate, onMount } from "../web_modules/svelte.js";

function create_if_block(ctx) {
	let navbar;
	let current;
	navbar = new Navbar({});

	return {
		c() {
			create_component(navbar.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navbar, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navbar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navbar, detaching);
		}
	};
}

// (38:6) <Authenticate>
function create_default_slot_20(ctx) {
	let dashboardpage;
	let current;
	dashboardpage = new DashboardPage({});

	return {
		c() {
			create_component(dashboardpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dashboardpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(dashboardpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dashboardpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dashboardpage, detaching);
		}
	};
}

// (37:4) <Route path="/">
function create_default_slot_19(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (43:6) <Authenticate>
function create_default_slot_18(ctx) {
	let formbuilderpage;
	let current;
	formbuilderpage = new FormBuilderPage({});

	return {
		c() {
			create_component(formbuilderpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(formbuilderpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(formbuilderpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formbuilderpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formbuilderpage, detaching);
		}
	};
}

// (42:4) <Route path="/form/builder">
function create_default_slot_17(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (48:6) <Authenticate>
function create_default_slot_16(ctx) {
	let createformpage;
	let current;
	createformpage = new CreateFormPage({});

	return {
		c() {
			create_component(createformpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(createformpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(createformpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(createformpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(createformpage, detaching);
		}
	};
}

// (47:4) <Route path="/form/create">
function create_default_slot_15(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (52:4) <Route path="/form/preview">
function create_default_slot_14(ctx) {
	let previewformpage;
	let current;
	previewformpage = new PreviewFormPage({});

	return {
		c() {
			create_component(previewformpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(previewformpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(previewformpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(previewformpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(previewformpage, detaching);
		}
	};
}

// (56:6) <Authenticate>
function create_default_slot_13(ctx) {
	let formsubmissionspage;
	let current;
	formsubmissionspage = new FormSubmissionsPage({});

	return {
		c() {
			create_component(formsubmissionspage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(formsubmissionspage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(formsubmissionspage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formsubmissionspage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formsubmissionspage, detaching);
		}
	};
}

// (55:4) <Route path="/form/submissions">
function create_default_slot_12(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (61:6) <Authenticate>
function create_default_slot_11(ctx) {
	let folderpage;
	let current;
	folderpage = new FolderPage({});

	return {
		c() {
			create_component(folderpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(folderpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(folderpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(folderpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(folderpage, detaching);
		}
	};
}

// (60:4) <Route path="/folder">
function create_default_slot_10(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (65:4) <Route path="/account/register">
function create_default_slot_9(ctx) {
	let registerpage;
	let current;
	registerpage = new RegisterPage({});

	return {
		c() {
			create_component(registerpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(registerpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(registerpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(registerpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(registerpage, detaching);
		}
	};
}

// (68:4) <Route path="/account/login">
function create_default_slot_8(ctx) {
	let loginpage;
	let current;
	loginpage = new LoginPage({});

	return {
		c() {
			create_component(loginpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loginpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(loginpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loginpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loginpage, detaching);
		}
	};
}

// (71:4) <Route path="/account/logout">
function create_default_slot_7(ctx) {
	let logoutpage;
	let current;
	logoutpage = new LogoutPage({});

	return {
		c() {
			create_component(logoutpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(logoutpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(logoutpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(logoutpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(logoutpage, detaching);
		}
	};
}

// (75:6) <Authenticate>
function create_default_slot_6(ctx) {
	let accountsettingspage;
	let current;
	accountsettingspage = new AccountSettingsPage({});

	return {
		c() {
			create_component(accountsettingspage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(accountsettingspage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(accountsettingspage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(accountsettingspage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(accountsettingspage, detaching);
		}
	};
}

// (74:4) <Route path="/account/settings">
function create_default_slot_5(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (80:6) <Authenticate>
function create_default_slot_4(ctx) {
	let manageteampage;
	let current;
	manageteampage = new ManageTeamPage({});

	return {
		c() {
			create_component(manageteampage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(manageteampage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(manageteampage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(manageteampage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(manageteampage, detaching);
		}
	};
}

// (79:4) <Route path="/account/settings/team">
function create_default_slot_3(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (85:6) <Authenticate>
function create_default_slot_2(ctx) {
	let billingpage;
	let current;
	billingpage = new BillingPage({});

	return {
		c() {
			create_component(billingpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(billingpage, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(billingpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(billingpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(billingpage, detaching);
		}
	};
}

// (84:4) <Route path="/account/settings/billing">
function create_default_slot_1(ctx) {
	let authenticate;
	let current;

	authenticate = new Authenticate({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(authenticate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(authenticate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const authenticate_changes = {};

			if (dirty & /*$$scope*/ 4) {
				authenticate_changes.$$scope = { dirty, ctx };
			}

			authenticate.$set(authenticate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(authenticate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(authenticate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(authenticate, detaching);
		}
	};
}

// (35:0) <Router>
function create_default_slot(ctx) {
	let div;
	let route0;
	let t0;
	let route1;
	let t1;
	let route2;
	let t2;
	let route3;
	let t3;
	let route4;
	let t4;
	let route5;
	let t5;
	let route6;
	let t6;
	let route7;
	let t7;
	let route8;
	let t8;
	let route9;
	let t9;
	let route10;
	let t10;
	let route11;
	let current;

	route0 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/form/builder",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/form/create",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			}
		});

	route3 = new Route({
			props: {
				path: "/form/preview",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			}
		});

	route4 = new Route({
			props: {
				path: "/form/submissions",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			}
		});

	route5 = new Route({
			props: {
				path: "/folder",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			}
		});

	route6 = new Route({
			props: {
				path: "/account/register",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	route7 = new Route({
			props: {
				path: "/account/login",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	route8 = new Route({
			props: {
				path: "/account/logout",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	route9 = new Route({
			props: {
				path: "/account/settings",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	route10 = new Route({
			props: {
				path: "/account/settings/team",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	route11 = new Route({
			props: {
				path: "/account/settings/billing",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(route0.$$.fragment);
			t0 = space();
			create_component(route1.$$.fragment);
			t1 = space();
			create_component(route2.$$.fragment);
			t2 = space();
			create_component(route3.$$.fragment);
			t3 = space();
			create_component(route4.$$.fragment);
			t4 = space();
			create_component(route5.$$.fragment);
			t5 = space();
			create_component(route6.$$.fragment);
			t6 = space();
			create_component(route7.$$.fragment);
			t7 = space();
			create_component(route8.$$.fragment);
			t8 = space();
			create_component(route9.$$.fragment);
			t9 = space();
			create_component(route10.$$.fragment);
			t10 = space();
			create_component(route11.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(route0, div, null);
			append(div, t0);
			mount_component(route1, div, null);
			append(div, t1);
			mount_component(route2, div, null);
			append(div, t2);
			mount_component(route3, div, null);
			append(div, t3);
			mount_component(route4, div, null);
			append(div, t4);
			mount_component(route5, div, null);
			append(div, t5);
			mount_component(route6, div, null);
			append(div, t6);
			mount_component(route7, div, null);
			append(div, t7);
			mount_component(route8, div, null);
			append(div, t8);
			mount_component(route9, div, null);
			append(div, t9);
			mount_component(route10, div, null);
			append(div, t10);
			mount_component(route11, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
			const route3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route3_changes.$$scope = { dirty, ctx };
			}

			route3.$set(route3_changes);
			const route4_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route4_changes.$$scope = { dirty, ctx };
			}

			route4.$set(route4_changes);
			const route5_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route5_changes.$$scope = { dirty, ctx };
			}

			route5.$set(route5_changes);
			const route6_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route6_changes.$$scope = { dirty, ctx };
			}

			route6.$set(route6_changes);
			const route7_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route7_changes.$$scope = { dirty, ctx };
			}

			route7.$set(route7_changes);
			const route8_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route8_changes.$$scope = { dirty, ctx };
			}

			route8.$set(route8_changes);
			const route9_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route9_changes.$$scope = { dirty, ctx };
			}

			route9.$set(route9_changes);
			const route10_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route10_changes.$$scope = { dirty, ctx };
			}

			route10.$set(route10_changes);
			const route11_changes = {};

			if (dirty & /*$$scope*/ 4) {
				route11_changes.$$scope = { dirty, ctx };
			}

			route11.$set(route11_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			transition_in(route3.$$.fragment, local);
			transition_in(route4.$$.fragment, local);
			transition_in(route5.$$.fragment, local);
			transition_in(route6.$$.fragment, local);
			transition_in(route7.$$.fragment, local);
			transition_in(route8.$$.fragment, local);
			transition_in(route9.$$.fragment, local);
			transition_in(route10.$$.fragment, local);
			transition_in(route11.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			transition_out(route3.$$.fragment, local);
			transition_out(route4.$$.fragment, local);
			transition_out(route5.$$.fragment, local);
			transition_out(route6.$$.fragment, local);
			transition_out(route7.$$.fragment, local);
			transition_out(route8.$$.fragment, local);
			transition_out(route9.$$.fragment, local);
			transition_out(route10.$$.fragment, local);
			transition_out(route11.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(route0);
			destroy_component(route1);
			destroy_component(route2);
			destroy_component(route3);
			destroy_component(route4);
			destroy_component(route5);
			destroy_component(route6);
			destroy_component(route7);
			destroy_component(route8);
			destroy_component(route9);
			destroy_component(route10);
			destroy_component(route11);
		}
	};
}

function create_fragment(ctx) {
	let preloader;
	let t0;
	let show_if = !/*noNav*/ ctx[1].includes(/*path*/ ctx[0]);
	let t1;
	let router;
	let current;
	preloader = new Preloader({});
	let if_block = show_if && create_if_block(ctx);

	router = new Router({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(preloader.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(preloader, target, anchor);
			insert(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, t1, anchor);
			mount_component(router, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*path*/ 1) show_if = !/*noNav*/ ctx[1].includes(/*path*/ ctx[0]);

			if (show_if) {
				if (if_block) {
					if (dirty & /*path*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const router_changes = {};

			if (dirty & /*$$scope*/ 4) {
				router_changes.$$scope = { dirty, ctx };
			}

			router.$set(router_changes);
		},
		i(local) {
			if (current) return;
			transition_in(preloader.$$.fragment, local);
			transition_in(if_block);
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(preloader.$$.fragment, local);
			transition_out(if_block);
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader, detaching);
			if (detaching) detach(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t1);
			destroy_component(router, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let path = "";
	const noNav = ["/account/login", "/account/register", "/account/logout", "/form/preview"];

	$: {
		$$invalidate(0, path = window.location.pathname);
	}

	return [path, noNav];
}

class AppRouter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default AppRouter;