/* src/inputs/FileUpload.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	stop_propagation,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { subscribeFieldChange } from "../event/FieldEvent.js";
import Label from "./Label.js";
import { afterUpdate, onMount } from "../../web_modules/svelte.js";
import formStore from "../store/FormStore.js";
import { firstNotEmpty } from "../util/Format.js";
import has from "../../web_modules/lodash.has.js";
import { randomString } from "../util/Generate.js";

function create_else_block(ctx) {
	let div;
	let input;
	let input_id_value;
	let t0;
	let label;
	let span0;
	let t1;
	let t2;
	let span1;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			t1 = text(/*placeholder*/ ctx[2]);
			t2 = space();
			span1 = element("span");
			span1.textContent = "Browse";
			attr(input, "type", "file");
			attr(input, "class", "form-file-input");
			attr(input, "id", input_id_value = `${/*field*/ ctx[0].id}-file-input`);
			attr(span0, "class", "form-file-text");
			attr(span1, "class", "form-file-button");
			attr(label, "class", "form-file-label");
			attr(label, "for", "customFile");
			attr(div, "class", "form-file");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, span0);
			append(span0, t1);
			append(label, t2);
			append(label, span1);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[8]),
					listen(input, "click", stop_propagation(/*click_handler_2*/ ctx[7])),
					listen(div, "click", stop_propagation(/*click_handler_1*/ ctx[6]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1 && input_id_value !== (input_id_value = `${/*field*/ ctx[0].id}-file-input`)) {
				attr(input, "id", input_id_value);
			}

			if (dirty & /*placeholder*/ 4) set_data(t1, /*placeholder*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (59:0) {#if hasFile}
function create_if_block(ctx) {
	let div;
	let input;
	let input_aria_label_value;
	let t0;
	let span;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			span = element("span");
			span.textContent = "Clear File";
			attr(input, "type", "text");
			attr(input, "class", "form-control");
			attr(input, "placeholder", /*placeholder*/ ctx[2]);
			input.value = /*placeholder*/ ctx[2];
			input.readOnly = true;
			attr(input, "aria-label", input_aria_label_value = "Uploaded file");
			attr(input, "aria-describedby", "basic-addon2");
			attr(span, "class", "input-group-text form-file-button");
			attr(div, "class", "input-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, span);

			if (!mounted) {
				dispose = [
					listen(span, "click", stop_propagation(/*clear*/ ctx[4])),
					listen(div, "click", stop_propagation(/*click_handler*/ ctx[5]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*placeholder*/ 4) {
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (dirty & /*placeholder*/ 4 && input.value !== /*placeholder*/ ctx[2]) {
				input.value = /*placeholder*/ ctx[2];
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let label;
	let t;
	let if_block_anchor;
	let current;
	label = new Label({ props: { field: /*field*/ ctx[0] } });

	function select_block_type(ctx, dirty) {
		if (/*hasFile*/ ctx[3]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			create_component(label.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(label, target, anchor);
			insert(target, t, anchor);
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const label_changes = {};
			if (dirty & /*field*/ 1) label_changes.field = /*field*/ ctx[0];
			label.$set(label_changes);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach(t);
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;
	let files;
	let placeholder = "Choose a file...";
	let hasFile = false;
	let fileId = "";

	onMount(() => {
		$$invalidate(2, placeholder = firstNotEmpty(field.placeholder ?? field.value?.name, "Choose a file..."));
	});

	subscribeFieldChange(onMount, newField => {
		if (newField.id === field.id) {
			$$invalidate(2, placeholder = firstNotEmpty(field.placeholder ?? field.value?.name, "Choose a file..."));
		}
	});

	function clear() {
		if (files) {
			$$invalidate(3, hasFile = false);
			$$invalidate(2, placeholder = firstNotEmpty(field.placeholder, "Choose a file..."));
			$$invalidate(1, files = undefined);
			formStore.clearFile(fileId);
			$$invalidate(0, field.value = undefined, field);

			formStore.set(field, {
				field: "value",
				value: undefined,
				fromUser: true
			});
		}
	}

	afterUpdate(() => {
		if (files && files[0] && !hasFile) {
			const file = files[0];
			$$invalidate(3, hasFile = true);
			$$invalidate(2, placeholder = file.name);
			fileId = field.id;
			formStore.setFile(fileId, file);

			$$invalidate(
				0,
				field.value = {
					name: placeholder,
					id: fileId,
					size: file.size,
					type: file.type
				},
				field
			);

			formStore.set(field, {
				field: "value",
				value: field.value,
				fromUser: true
			});
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function input_change_handler() {
		files = this.files;
		$$invalidate(1, files);
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
	};

	return [
		field,
		files,
		placeholder,
		hasFile,
		clear,
		click_handler,
		click_handler_1,
		click_handler_2,
		input_change_handler
	];
}

class FileUpload extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0 });
	}
}

export default FileUpload;