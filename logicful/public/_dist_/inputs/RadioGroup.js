/* src/inputs/RadioGroup.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	stop_propagation,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { subscribeFieldChange } from "../event/FieldEvent.js";
import Label from "./Label.js";
import { onMount } from "../../web_modules/svelte.js";
import formStore from "../store/FormStore.js";
import { isEmptyOrNull } from "../util/Compare.js";
import { afterUpdate, object_without_properties } from "../../web_modules/svelte/internal.js";
import { debounce } from "../util/Debounce.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (71:0) {#if !field.hideLabel}
function create_if_block_2(ctx) {
	let label;
	let current;
	label = new Label({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(label.$$.fragment);
		},
		m(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const label_changes = {};
			if (dirty & /*field*/ 1) label_changes.field = /*field*/ ctx[0];
			label.$set(label_changes);
		},
		i(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(label, detaching);
		}
	};
}

// (74:0) {#if field.options}
function create_if_block(ctx) {
	let t;
	let if_block_anchor;
	let each_value = /*field*/ ctx[0].options;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*field*/ ctx[0].includeOther && create_if_block_1(ctx);

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*field, isChecked, onChange*/ 97) {
				each_value = /*field*/ ctx[0].options;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t.parentNode, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*field*/ ctx[0].includeOther) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (75:2) {#each field.options as option}
function create_each_block(ctx) {
	let div;
	let input;
	let input_checked_value;
	let input_id_value;
	let t0;
	let label;
	let t1_value = /*option*/ ctx[14] + "";
	let t1;
	let label_for_value;
	let mounted;
	let dispose;

	function change_handler(...args) {
		return /*change_handler*/ ctx[11](/*option*/ ctx[14], ...args);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			attr(input, "class", "form-check-input");
			attr(input, "type", "radio");
			input.value = "";
			input.checked = input_checked_value = /*isChecked*/ ctx[6](/*option*/ ctx[14]);
			attr(input, "id", input_id_value = `${/*field*/ ctx[0].id}-${/*option*/ ctx[14]}`);
			attr(label, "class", "form-check-label");
			attr(label, "for", label_for_value = `${/*field*/ ctx[0].id}-${/*option*/ ctx[14]}`);
			attr(div, "class", "form-check");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, t1);

			if (!mounted) {
				dispose = [
					listen(input, "click", stop_propagation(/*click_handler*/ ctx[10])),
					listen(input, "change", change_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*field*/ 1 && input_checked_value !== (input_checked_value = /*isChecked*/ ctx[6](/*option*/ ctx[14]))) {
				input.checked = input_checked_value;
			}

			if (dirty & /*field*/ 1 && input_id_value !== (input_id_value = `${/*field*/ ctx[0].id}-${/*option*/ ctx[14]}`)) {
				attr(input, "id", input_id_value);
			}

			if (dirty & /*field*/ 1 && t1_value !== (t1_value = /*option*/ ctx[14] + "")) set_data(t1, t1_value);

			if (dirty & /*field*/ 1 && label_for_value !== (label_for_value = `${/*field*/ ctx[0].id}-${/*option*/ ctx[14]}`)) {
				attr(label, "for", label_for_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (90:2) {#if field.includeOther}
function create_if_block_1(ctx) {
	let input0;
	let input0_id_value;
	let t0;
	let label;
	let t1;
	let label_for_value;
	let t2;
	let input1;
	let input1_id_value;
	let mounted;
	let dispose;

	return {
		c() {
			input0 = element("input");
			t0 = space();
			label = element("label");
			t1 = text("Other:");
			t2 = space();
			input1 = element("input");
			attr(input0, "class", "form-check-input");
			attr(input0, "type", "radio");
			input0.value = "";
			input0.checked = /*otherSelected*/ ctx[2];
			attr(input0, "id", input0_id_value = `${/*field*/ ctx[0].id}-other`);
			attr(label, "class", "form-check-label");
			attr(label, "for", label_for_value = `${/*field*/ ctx[0].id}-other`);
			attr(input1, "class", "form-control");
			attr(input1, "type", "text");
			input1.value = /*otherText*/ ctx[1];
			attr(input1, "id", input1_id_value = `${/*field*/ ctx[0].id}-other`);
		},
		m(target, anchor) {
			insert(target, input0, anchor);
			insert(target, t0, anchor);
			insert(target, label, anchor);
			append(label, t1);
			insert(target, t2, anchor);
			insert(target, input1, anchor);

			if (!mounted) {
				dispose = [
					listen(input0, "click", stop_propagation(/*click_handler_1*/ ctx[9])),
					listen(input0, "click", /*onOtherRadioChange*/ ctx[4]),
					listen(input1, "click", stop_propagation(/*click_handler_2*/ ctx[8])),
					listen(input1, "input", /*input_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*otherSelected*/ 4) {
				input0.checked = /*otherSelected*/ ctx[2];
			}

			if (dirty & /*field*/ 1 && input0_id_value !== (input0_id_value = `${/*field*/ ctx[0].id}-other`)) {
				attr(input0, "id", input0_id_value);
			}

			if (dirty & /*field*/ 1 && label_for_value !== (label_for_value = `${/*field*/ ctx[0].id}-other`)) {
				attr(label, "for", label_for_value);
			}

			if (dirty & /*otherText*/ 2 && input1.value !== /*otherText*/ ctx[1]) {
				input1.value = /*otherText*/ ctx[1];
			}

			if (dirty & /*field*/ 1 && input1_id_value !== (input1_id_value = `${/*field*/ ctx[0].id}-other`)) {
				attr(input1, "id", input1_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(input0);
			if (detaching) detach(t0);
			if (detaching) detach(label);
			if (detaching) detach(t2);
			if (detaching) detach(input1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = !/*field*/ ctx[0].hideLabel && create_if_block_2(ctx);
	let if_block1 = /*field*/ ctx[0].options && create_if_block(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*field*/ ctx[0].hideLabel) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*field*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*field*/ ctx[0].options) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;
	let { value = {} } = $$props;
	let otherText = "";
	let debouncedOnChange;
	let otherSelected = false;

	subscribeFieldChange(onMount, newField => {
		if (newField.id === field.id) {
			$$invalidate(7, value = newField.value ?? {});

			if (otherText && !value.other) {
				return;
			}

			$$invalidate(1, otherText = value.other ?? "");
		}
	});

	onMount(() => {
		debouncedOnChange = debounce(
			field => {
				formStore.set(field, {
					fromUser: true,
					field: "value",
					value: field.value
				});
			},
			500
		);

		$$invalidate(7, value = formStore.getValue(field.configTarget ?? field.id) ?? {});
		$$invalidate(1, otherText = value.other ?? "");
		$$invalidate(2, otherSelected = otherText != null && otherText != "");
	});

	function onOtherChange(e) {
		$$invalidate(1, otherText = e.target.value);
		$$invalidate(7, value = {});

		if (otherText != "" && otherText != null) {
			$$invalidate(7, value.other = otherText, value);
		}

		$$invalidate(0, field.value = value, field);
		debouncedOnChange(field);
	}

	function onOtherRadioChange() {
		$$invalidate(2, otherSelected = true);
		$$invalidate(7, value = { other: otherText });
		$$invalidate(0, field.value = value, field);

		formStore.set(field, {
			fromUser: true,
			field: "value",
			value: field.value
		});
	}

	function onChange(e, option) {
		e.stopPropagation();
		$$invalidate(7, value = {});
		$$invalidate(7, value[option] = option, value);
		$$invalidate(2, otherSelected = false);
		$$invalidate(0, field.value = value, field);

		formStore.set(field, {
			fromUser: true,
			field: "value",
			value: field.value
		});
	}

	function isChecked(option) {
		return value[option] != null && value[option] != "";
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	const change_handler = (option, e) => onChange(e, option);
	const input_handler = e => onOtherChange(e);

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("value" in $$props) $$invalidate(7, value = $$props.value);
	};

	return [
		field,
		otherText,
		otherSelected,
		onOtherChange,
		onOtherRadioChange,
		onChange,
		isChecked,
		value,
		click_handler_2,
		click_handler_1,
		click_handler,
		change_handler,
		input_handler
	];
}

class RadioGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0, value: 7 });
	}
}

export default RadioGroup;