/* src/inputs/Address.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { subscribeFieldChange } from "../event/FieldEvent.js";
import LiveField from "../features/form/live/LiveField.js";
import StateSelector from "./StateSelector.js";
import TextInput from "./TextInput.js";
import formStore from "../store/FormStore.js";
import { afterUpdate, onMount } from "../../web_modules/svelte.js";
import { randomString } from "../util/Generate.js";
import ComboBox from "./ComboBox.js";
import Label from "./Label.js";

function create_fragment(ctx) {
	let label;
	let t0;
	let div8;
	let div1;
	let div0;
	let livefield0;
	let t1;
	let div3;
	let div2;
	let livefield1;
	let t2;
	let div7;
	let div4;
	let livefield2;
	let t3;
	let div5;
	let livefield3;
	let t4;
	let div6;
	let livefield4;
	let current;
	label = new Label({ props: { field: /*field*/ ctx[1] } });

	livefield0 = new LiveField({
			props: {
				padding: false,
				field: {
					required: true,
					name: `${/*field*/ ctx[1].name}.address1`,
					id: `${/*field*/ ctx[1].id}.value.address1`,
					helperText: "Address Line 1",
					hideLabel: true,
					value: /*value*/ ctx[0]?.address1?.value ?? "",
					type: "string"
				}
			}
		});

	livefield1 = new LiveField({
			props: {
				padding: false,
				field: {
					required: true,
					name: `${/*field*/ ctx[1].name}.address2`,
					id: `${/*field*/ ctx[1].id}.value.address2`,
					helperText: "Address Line 2",
					hideLabel: true,
					value: /*value*/ ctx[0]?.address2?.value ?? "",
					type: "string"
				}
			}
		});

	livefield2 = new LiveField({
			props: {
				padding: false,
				field: {
					required: true,
					name: `${/*field*/ ctx[1].name}.city`,
					id: `${/*field*/ ctx[1].id}.value.city`,
					helperText: "City",
					hideLabel: true,
					value: /*value*/ ctx[0]?.city?.value ?? "",
					type: "string"
				}
			}
		});

	livefield3 = new LiveField({
			props: {
				padding: false,
				field: {
					name: `${/*field*/ ctx[1].name}.state`,
					id: `${/*field*/ ctx[1].id}.value.state`,
					helperText: "State",
					label: "State",
					value: /*value*/ ctx[0]?.state?.value,
					hideLabel: true,
					required: true,
					type: "combobox",
					options: {
						type: "remote",
						value: "https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json"
					}
				}
			}
		});

	livefield4 = new LiveField({
			props: {
				padding: false,
				field: {
					required: true,
					name: `${/*field*/ ctx[1].name}.zip`,
					id: `${/*field*/ ctx[1].id}.value.zip`,
					helperText: "Zip Code",
					hideLabel: true,
					value: /*value*/ ctx[0]?.zip?.value ?? "",
					type: "string",
					properties: { pattern: "[d]{5}(-[d]{4})?" }
				}
			}
		});

	return {
		c() {
			create_component(label.$$.fragment);
			t0 = space();
			div8 = element("div");
			div1 = element("div");
			div0 = element("div");
			create_component(livefield0.$$.fragment);
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			create_component(livefield1.$$.fragment);
			t2 = space();
			div7 = element("div");
			div4 = element("div");
			create_component(livefield2.$$.fragment);
			t3 = space();
			div5 = element("div");
			create_component(livefield3.$$.fragment);
			t4 = space();
			div6 = element("div");
			create_component(livefield4.$$.fragment);
			attr(div0, "class", "bd-highlight flex-grow-1 pr-2");
			attr(div1, "class", "d-flex flex-row bd-highlight");
			set_style(div1, "padding-bottom", "0.75em");
			attr(div2, "class", "bd-highlight flex-grow-1 pr-2");
			attr(div3, "class", "d-flex flex-row bd-highlight");
			set_style(div3, "padding-bottom", "0.75em");
			attr(div4, "class", "bd-highlight flex-grow-1 pr-2");
			attr(div5, "class", "bd-highlight flex-grow-1 pr-2");
			set_style(div5, "width", "20%");
			attr(div6, "class", "bd-highlight flex-grow-1 pr-2");
			attr(div7, "class", "d-flex flex-row bd-highlight");
		},
		m(target, anchor) {
			mount_component(label, target, anchor);
			insert(target, t0, anchor);
			insert(target, div8, anchor);
			append(div8, div1);
			append(div1, div0);
			mount_component(livefield0, div0, null);
			append(div8, t1);
			append(div8, div3);
			append(div3, div2);
			mount_component(livefield1, div2, null);
			append(div8, t2);
			append(div8, div7);
			append(div7, div4);
			mount_component(livefield2, div4, null);
			append(div7, t3);
			append(div7, div5);
			mount_component(livefield3, div5, null);
			append(div7, t4);
			append(div7, div6);
			mount_component(livefield4, div6, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const label_changes = {};
			if (dirty & /*field*/ 2) label_changes.field = /*field*/ ctx[1];
			label.$set(label_changes);
			const livefield0_changes = {};

			if (dirty & /*field, value*/ 3) livefield0_changes.field = {
				required: true,
				name: `${/*field*/ ctx[1].name}.address1`,
				id: `${/*field*/ ctx[1].id}.value.address1`,
				helperText: "Address Line 1",
				hideLabel: true,
				value: /*value*/ ctx[0]?.address1?.value ?? "",
				type: "string"
			};

			livefield0.$set(livefield0_changes);
			const livefield1_changes = {};

			if (dirty & /*field, value*/ 3) livefield1_changes.field = {
				required: true,
				name: `${/*field*/ ctx[1].name}.address2`,
				id: `${/*field*/ ctx[1].id}.value.address2`,
				helperText: "Address Line 2",
				hideLabel: true,
				value: /*value*/ ctx[0]?.address2?.value ?? "",
				type: "string"
			};

			livefield1.$set(livefield1_changes);
			const livefield2_changes = {};

			if (dirty & /*field, value*/ 3) livefield2_changes.field = {
				required: true,
				name: `${/*field*/ ctx[1].name}.city`,
				id: `${/*field*/ ctx[1].id}.value.city`,
				helperText: "City",
				hideLabel: true,
				value: /*value*/ ctx[0]?.city?.value ?? "",
				type: "string"
			};

			livefield2.$set(livefield2_changes);
			const livefield3_changes = {};

			if (dirty & /*field, value*/ 3) livefield3_changes.field = {
				name: `${/*field*/ ctx[1].name}.state`,
				id: `${/*field*/ ctx[1].id}.value.state`,
				helperText: "State",
				label: "State",
				value: /*value*/ ctx[0]?.state?.value,
				hideLabel: true,
				required: true,
				type: "combobox",
				options: {
					type: "remote",
					value: "https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json"
				}
			};

			livefield3.$set(livefield3_changes);
			const livefield4_changes = {};

			if (dirty & /*field, value*/ 3) livefield4_changes.field = {
				required: true,
				name: `${/*field*/ ctx[1].name}.zip`,
				id: `${/*field*/ ctx[1].id}.value.zip`,
				helperText: "Zip Code",
				hideLabel: true,
				value: /*value*/ ctx[0]?.zip?.value ?? "",
				type: "string",
				properties: { pattern: "[d]{5}(-[d]{4})?" }
			};

			livefield4.$set(livefield4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			transition_in(livefield0.$$.fragment, local);
			transition_in(livefield1.$$.fragment, local);
			transition_in(livefield2.$$.fragment, local);
			transition_in(livefield3.$$.fragment, local);
			transition_in(livefield4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(label.$$.fragment, local);
			transition_out(livefield0.$$.fragment, local);
			transition_out(livefield1.$$.fragment, local);
			transition_out(livefield2.$$.fragment, local);
			transition_out(livefield3.$$.fragment, local);
			transition_out(livefield4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div8);
			destroy_component(livefield0);
			destroy_component(livefield1);
			destroy_component(livefield2);
			destroy_component(livefield3);
			destroy_component(livefield4);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;
	let { value } = $$props;
	let address1;
	let address2;
	let city;
	let state;
	let zip;

	subscribeFieldChange(onMount, newField => {
		if (newField.id === field.id) {
			$$invalidate(0, value = newField.value);
		}
	});

	onMount(() => {
		$$invalidate(0, value = formStore.getValue(field.id) ?? {});
	});

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(1, field = $$props.field);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, field];
}

class Address extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 1, value: 0 });
	}
}

export default Address;