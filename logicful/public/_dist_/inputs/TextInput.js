/* src/inputs/TextInput.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	stop_propagation,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { subscribeFieldChange } from "../event/FieldEvent.js";
import Label from "./Label.js";
import { afterUpdate, onMount } from "../../web_modules/svelte.js";
import formStore from "../store/FormStore.js";
import { debounce } from "../util/Debounce.js";

function create_if_block_2(ctx) {
	let label;
	let current;
	label = new Label({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(label.$$.fragment);
		},
		m(target, anchor) {
			mount_component(label, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const label_changes = {};
			if (dirty & /*field*/ 1) label_changes.field = /*field*/ ctx[0];
			label.$set(label_changes);
		},
		i(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(label, detaching);
		}
	};
}

// (46:2) {:else}
function create_else_block(ctx) {
	let input;
	let input_class_value;
	let input_id_value;
	let input_placeholder_value;
	let input_name_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "class", input_class_value = /*field*/ ctx[0].properties?.className ?? "form-control");
			attr(input, "id", input_id_value = /*field*/ ctx[0].id);
			input.value = /*value*/ ctx[1];
			attr(input, "placeholder", input_placeholder_value = /*field*/ ctx[0].placeholder ?? "");
			attr(input, "name", input_name_value = /*field*/ ctx[0].name);
			attr(input, "type", /*type*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = [
					listen(input, "click", stop_propagation(/*click_handler_1*/ ctx[5])),
					listen(input, "input", function () {
						if (is_function(/*debouncedOnChange*/ ctx[3])) /*debouncedOnChange*/ ctx[3].apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*field*/ 1 && input_class_value !== (input_class_value = /*field*/ ctx[0].properties?.className ?? "form-control")) {
				attr(input, "class", input_class_value);
			}

			if (dirty & /*field*/ 1 && input_id_value !== (input_id_value = /*field*/ ctx[0].id)) {
				attr(input, "id", input_id_value);
			}

			if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
				input.value = /*value*/ ctx[1];
			}

			if (dirty & /*field*/ 1 && input_placeholder_value !== (input_placeholder_value = /*field*/ ctx[0].placeholder ?? "")) {
				attr(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*field*/ 1 && input_name_value !== (input_name_value = /*field*/ ctx[0].name)) {
				attr(input, "name", input_name_value);
			}

			if (dirty & /*type*/ 4) {
				attr(input, "type", /*type*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (35:2) {#if field.rows && field.rows > 1}
function create_if_block_1(ctx) {
	let textarea;
	let textarea_rows_value;
	let textarea_class_value;
	let textarea_id_value;
	let textarea_placeholder_value;
	let textarea_name_value;
	let mounted;
	let dispose;

	return {
		c() {
			textarea = element("textarea");
			attr(textarea, "rows", textarea_rows_value = /*field*/ ctx[0].rows);
			attr(textarea, "class", textarea_class_value = /*field*/ ctx[0].properties?.className ?? "form-control");
			attr(textarea, "id", textarea_id_value = /*field*/ ctx[0].id);
			textarea.value = /*value*/ ctx[1];
			attr(textarea, "placeholder", textarea_placeholder_value = /*field*/ ctx[0].placeholder ?? "");
			attr(textarea, "name", textarea_name_value = /*field*/ ctx[0].name);
			attr(textarea, "type", /*type*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, textarea, anchor);

			if (!mounted) {
				dispose = [
					listen(textarea, "click", stop_propagation(/*click_handler*/ ctx[4])),
					listen(textarea, "input", function () {
						if (is_function(/*debouncedOnChange*/ ctx[3])) /*debouncedOnChange*/ ctx[3].apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*field*/ 1 && textarea_rows_value !== (textarea_rows_value = /*field*/ ctx[0].rows)) {
				attr(textarea, "rows", textarea_rows_value);
			}

			if (dirty & /*field*/ 1 && textarea_class_value !== (textarea_class_value = /*field*/ ctx[0].properties?.className ?? "form-control")) {
				attr(textarea, "class", textarea_class_value);
			}

			if (dirty & /*field*/ 1 && textarea_id_value !== (textarea_id_value = /*field*/ ctx[0].id)) {
				attr(textarea, "id", textarea_id_value);
			}

			if (dirty & /*value*/ 2) {
				textarea.value = /*value*/ ctx[1];
			}

			if (dirty & /*field*/ 1 && textarea_placeholder_value !== (textarea_placeholder_value = /*field*/ ctx[0].placeholder ?? "")) {
				attr(textarea, "placeholder", textarea_placeholder_value);
			}

			if (dirty & /*field*/ 1 && textarea_name_value !== (textarea_name_value = /*field*/ ctx[0].name)) {
				attr(textarea, "name", textarea_name_value);
			}

			if (dirty & /*type*/ 4) {
				attr(textarea, "type", /*type*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(textarea);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (57:2) {#if field.helperText}
function create_if_block(ctx) {
	let small;
	let raw_value = (/*field*/ ctx[0].helperText ?? "") + "";

	return {
		c() {
			small = element("small");
			attr(small, "class", "form-text text-muted");
		},
		m(target, anchor) {
			insert(target, small, anchor);
			small.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1 && raw_value !== (raw_value = (/*field*/ ctx[0].helperText ?? "") + "")) small.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(small);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let current;
	let if_block0 = !/*field*/ ctx[0].hideLabel && create_if_block_2(ctx);

	function select_block_type(ctx, dirty) {
		if (/*field*/ ctx[0].rows && /*field*/ ctx[0].rows > 1) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);
	let if_block2 = /*field*/ ctx[0].helperText && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			attr(div, "class", "form-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*field*/ ctx[0].hideLabel) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*field*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div, t1);
				}
			}

			if (/*field*/ ctx[0].helperText) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;
	let { value = "" } = $$props;
	let { type = "text" } = $$props;
	let debouncedOnChange;

	subscribeFieldChange(onMount, newField => {
		if (newField.id === field.id) {
			$$invalidate(1, value = newField.value ?? value ?? "");
		}
	});

	onMount(() => {
		$$invalidate(3, debouncedOnChange = debounce(
			e => {
				$$invalidate(0, field.value = e.target.value ?? "", field);

				formStore.set(field, {
					fromUser: true,
					field: "value",
					value: field.value
				});

				field.onChange?.(field.value);
			},
			500
		));

		$$invalidate(1, value = field.value ?? formStore.getValue(field.configTarget ?? field.id) ?? "");
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("value" in $$props) $$invalidate(1, value = $$props.value);
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
	};

	return [field, value, type, debouncedOnChange, click_handler, click_handler_1];
}

class TextInput extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0, value: 1, type: 2 });
	}
}

export default TextInput;