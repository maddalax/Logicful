import './RichTextDisplay.css.proxy.js';
/* src/inputs/RichTextDisplay.svelte generated by Svelte v3.25.1 */
import {
	HtmlTag,
	SvelteComponent,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_style,
	space
} from "../../web_modules/svelte/internal.js";

import { subscribeFieldChange } from "../event/FieldEvent.js";
import { onMount } from "../../web_modules/svelte.js";
import formStore from "../store/FormStore.js";
import { isString } from "../guards/Guard.js";
import { LoadState } from "../models/LoadState.js";

function create_else_block(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-dark" role="status"><span class="sr-only">Loading...</span></div>`;
			attr(div1, "class", "d-flex justify-content-center");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (62:39) 
function create_if_block_2(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Failed to load content.";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (60:41) 
function create_if_block_1(ctx) {
	let html_tag;
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(/*value*/ ctx[1], target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) html_tag.p(/*value*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (55:2) {#if isPreview && (value === '' || value == null)}
function create_if_block(ctx) {
	let h5;
	let t1;
	let p;

	return {
		c() {
			h5 = element("h5");
			h5.textContent = "Content Placeholder";
			t1 = space();
			p = element("p");
			p.textContent = "From the field configuration settings, select a content block to display.";
			set_style(p, "margin-block-end", "0");
		},
		m(target, anchor) {
			insert(target, h5, anchor);
			insert(target, t1, anchor);
			insert(target, p, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(h5);
			if (detaching) detach(t1);
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*isPreview*/ ctx[0] && (/*value*/ ctx[1] === "" || /*value*/ ctx[1] == null)) return create_if_block;
		if (/*state*/ ctx[2] === LoadState.Finished) return create_if_block_1;
		if (/*state*/ ctx[2] === LoadState.Failed) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;
	let { isPreview = false } = $$props;
	let value = "";
	let lastUrl = "";
	let state = LoadState.NotStarted;
	let url;

	subscribeFieldChange(onMount, newField => {
		if (newField.id === field.id && lastUrl !== newField.value) {
			url = newField.value;
			load(url);
		}
	});

	onMount(async () => {
		url = formStore.getValue(field.configTarget ?? field.id);
		console.log("URL", url);
		load(url);
	});

	async function load(url) {
		$$invalidate(2, state = LoadState.Loading);

		try {
			if (!url) {
				return;
			}

			if (!isString(url)) {
				return;
			}

			if (url.startsWith("http")) {
				lastUrl = url;
				const response = await fetch(url);
				const html = await response.text();
				$$invalidate(1, value = html ?? "");
			} else {
				$$invalidate(1, value = url);
			}
		} catch(ex) {
			$$invalidate(2, state = LoadState.Failed);
		} finally {
			if (state !== LoadState.Failed) {
				$$invalidate(2, state = LoadState.Finished);
			}
		}
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(3, field = $$props.field);
		if ("isPreview" in $$props) $$invalidate(0, isPreview = $$props.isPreview);
	};

	return [isPreview, value, state, field];
}

class RichTextDisplay extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 3, isPreview: 0 });
	}
}

export default RichTextDisplay;