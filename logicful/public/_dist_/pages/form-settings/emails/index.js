import{SvelteComponent as i,create_component as f,destroy_component as a,detach as l,element as c,init as u,insert as p,mount_component as d,safe_not_equal as g,transition_in as v,transition_out as _}from"../../../../web_modules/svelte/internal.js";import"../../../util/Http.js";import"../../../event/EventBus.js";import{onMount as $}from"../../../../web_modules/svelte.js";import h from"../../../store/FormStore.js";import j from"../../../components/form_settings/FormSettings.js";import{getApi as S}from"../../../services/ApiService.js";function b(o){let n,e,r;return e=new j({props:{form:o[0],selected:w}}),{c(){n=c("div"),f(e.$$.fragment)},m(t,s){p(t,n,s),d(e,n,null),r=!0},p(t,[s]){const m={};s&1&&(m.form=t[0]),e.$set(m)},i(t){if(r)return;v(e.$$.fragment,t),r=!0},o(t){_(e.$$.fragment,t),r=!1},d(t){t&&l(n),a(e)}}}async function F(o,n){const e=o.query.formId;if(!e||e=="undefined"||e=="null")return this.error(400,"Invalid Form Id");const r=await S(`form/${e}`,this.fetch);return r.id=e,h.setForm(r),{form:r}}let w="emails";function x(o,n,e){let{form:r}=n;return $(()=>{}),o.$$set=t=>{"form"in t&&e(0,r=t.form)},[r]}class y extends i{constructor(o){super();u(this,o,x,b,g,{form:0})}}export default y;export{F as preload};
