/* src/pages/form-settings/emails/index.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import { getUrlParameter } from "../../../util/Http.js";
import { dispatch, subscribeComponent } from "../../../event/EventBus.js";
import { afterUpdate, onMount } from "../../../../web_modules/svelte.js";
import FormSettingsSidebar from "../../../components/form_settings/FormSettingsSidebar.js";
import formStore from "../../../store/FormStore.js";
import FormEditSettings from "../../../features/form/edit/FormEditSettings.js";
import FormSettingsDetails from "../../../components/form_settings/FormSettingsDetails.js";
import { saveForm } from "../../../features/form/edit/services/SaveForm.js";
import FormSettings from "../../../components/form_settings/FormSettings.js";
import { getApi } from "../../../services/ApiService.js";

function create_fragment(ctx) {
	let div;
	let formsettings;
	let current;

	formsettings = new FormSettings({
			props: { form: /*form*/ ctx[0], selected }
		});

	return {
		c() {
			div = element("div");
			create_component(formsettings.$$.fragment);
			set_style(div, "background-color", "#f5f9fe");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(formsettings, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const formsettings_changes = {};
			if (dirty & /*form*/ 1) formsettings_changes.form = /*form*/ ctx[0];
			formsettings.$set(formsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(formsettings);
		}
	};
}

async function preload(page, session) {
	const formId = page.query.formId;

	if (!formId || formId == "undefined" || formId == "null") {
		return this.error(400, "Invalid Form Id");
	}

	//@ts-ignore
	const form = await getApi(`form/${formId}`, this.fetch);

	form.id = formId;
	formStore.setForm(form);
	return { form };
}

let selected = "emails";

function instance($$self, $$props, $$invalidate) {
	
	
	let { form } = $$props;

	onMount(() => {
		
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
	};

	return [form];
}

class Emails extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { form: 0 });
	}
}

export default Emails;
export { preload };