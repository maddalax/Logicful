/* src/pages/form/CreateFormPage.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_style,
	space
} from "../../../web_modules/svelte/internal.js";

import { LoadState } from "../../models/LoadState.js";
import { postApi } from "../../services/ApiService.js";
import { me } from "../../services/AuthService.js";
import { getUrlParameter } from "../../util/Http.js";
import { navigate } from "../../../web_modules/svelte-routing.js";

function create_if_block_2(ctx) {
	let div;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button = element("button");
			button.textContent = "Failed to create, click to try again.";
			attr(button, "href", "#");
			attr(button, "class", "btn btn-primary btn-large");
			set_style(div, "margin-top", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*createNewForm*/ ctx[1]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (42:46) 
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<button href="#" class="btn btn-primary btn-large" disabled="">Creating...</button>`;
			set_style(div, "margin-top", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (40:8) {#if state === LoadState.NotStarted}
function create_if_block(ctx) {
	let div;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button = element("button");
			button.textContent = "Create Now";
			attr(button, "href", "#");
			attr(button, "class", "btn btn-primary btn-large");
			set_style(div, "margin-top", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*createNewForm*/ ctx[1]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div8;
	let div0;
	let t1;
	let div1;
	let t3;
	let div7;
	let div3;
	let div2;
	let h50;
	let t5;
	let p1;
	let t7;
	let t8;
	let div6;

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[0] === LoadState.NotStarted) return create_if_block;
		if (/*state*/ ctx[0] === LoadState.Loading) return create_if_block_1;
		if (/*state*/ ctx[0] === LoadState.Failed) return create_if_block_2;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			div8 = element("div");
			div0 = element("div");
			div0.innerHTML = `<h1 class="display-3 font-weight-extreme mb-4">Create A Form</h1>`;
			t1 = space();
			div1 = element("div");
			div1.innerHTML = `<p class="lead mb-4 mb-lg-5 pr-lg-5">Create and share your custom form to collect data quickly and efficiently.</p>`;
			t3 = space();
			div7 = element("div");
			div3 = element("div");
			div2 = element("div");
			h50 = element("h5");
			h50.textContent = "Create From Scratch";
			t5 = space();
			p1 = element("p");
			p1.textContent = "Create a new form with no prior template.";
			t7 = space();
			if (if_block) if_block.c();
			t8 = space();
			div6 = element("div");

			div6.innerHTML = `<div class="card-body"><h5 class="card-title">Create From Template</h5> 
        <p class="card-text">Create a new form using a premade template.</p> 
        <div style="margin-top: 1em"><button href="#" class="btn btn-primary btn-large" disabled="">Coming Soon</button></div></div>`;

			attr(div0, "class", "d-flex justify-content-center");
			attr(div1, "class", "d-flex justify-content-center");
			attr(h50, "class", "card-title");
			attr(p1, "class", "card-text");
			attr(div2, "class", "card-body");
			attr(div3, "class", "card");
			set_style(div3, "max-width", "16em");
			set_style(div3, "margin-right", "1em");
			attr(div6, "class", "card");
			set_style(div6, "max-width", "16em");
			attr(div7, "class", "d-flex justify-content-center");
			attr(div8, "class", "container");
			set_style(div8, "padding-top", "6em");
		},
		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div0);
			append(div8, t1);
			append(div8, div1);
			append(div8, t3);
			append(div8, div7);
			append(div7, div3);
			append(div3, div2);
			append(div2, h50);
			append(div2, t5);
			append(div2, p1);
			append(div2, t7);
			if (if_block) if_block.m(div2, null);
			append(div7, t8);
			append(div7, div6);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div2, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div8);

			if (if_block) {
				if_block.d();
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let state = LoadState.NotStarted;

	async function createNewForm() {
		$$invalidate(0, state = LoadState.Loading);
		const folder = getUrlParameter("folder");

		try {
			const user = me();

			const response = await postApi("form", {
				title: "My New Form",
				fields: [],
				teamId: user.teamId,
				folder
			});

			navigate(`/form/builder?formId=${response.id}`);
			$$invalidate(0, state = LoadState.Finished);
		} catch(ex) {
			$$invalidate(0, state = LoadState.Failed);
		}
	}

	return [state, createNewForm];
}

class CreateFormPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default CreateFormPage;