import './FormBuilderPage.css.proxy.js';
/* src/pages/form/FormBuilderPage.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import "../../../web_modules/dragula/dist/dragula.min.css.proxy.js";
import FormBuilder from "../../features/form/edit/FormBuilder.js";
import FormSidebar from "../../features/form/edit/FormSidebar.js";
import FieldEditSidebar from "../../features/form/edit/FieldEditSidebar.js";
import { onMount } from "../../../web_modules/svelte.js";
import { subscribe, subscribeComponent } from "../../event/EventBus.js";
import Sidebar from "../../components/Sidebar.js";
import { getUrlParameter } from "../../util/Http.js";

function create_default_slot_1(ctx) {
	let formsidebar;
	let current;
	formsidebar = new FormSidebar({});

	return {
		c() {
			create_component(formsidebar.$$.fragment);
		},
		m(target, anchor) {
			mount_component(formsidebar, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(formsidebar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formsidebar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formsidebar, detaching);
		}
	};
}

// (31:4) <Sidebar>
function create_default_slot(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*rightSidebarProps*/ ctx[1]];
	var switch_value = /*rightSidebar*/ ctx[0];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*rightSidebarProps*/ 2)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*rightSidebarProps*/ ctx[1])])
			: {};

			if (switch_value !== (switch_value = /*rightSidebar*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let sidebar0;
	let t0;
	let div1;
	let formbuilder;
	let t1;
	let div2;
	let sidebar1;
	let current;

	sidebar0 = new Sidebar({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	formbuilder = new FormBuilder({});

	sidebar1 = new Sidebar({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			create_component(sidebar0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(formbuilder.$$.fragment);
			t1 = space();
			div2 = element("div");
			create_component(sidebar1.$$.fragment);
			attr(div0, "class", "left-sidebar svelte-sg77i1");
			attr(div1, "class", "main svelte-sg77i1");
			attr(div2, "class", "right-sidebar svelte-sg77i1");
			attr(div3, "class", "container-fluid clearfix svelte-sg77i1");
			attr(div3, "id", "main-container");
			set_style(div3, "margin-top", "3.9em");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			mount_component(sidebar0, div0, null);
			append(div3, t0);
			append(div3, div1);
			mount_component(formbuilder, div1, null);
			append(div3, t1);
			append(div3, div2);
			mount_component(sidebar1, div2, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const sidebar0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				sidebar0_changes.$$scope = { dirty, ctx };
			}

			sidebar0.$set(sidebar0_changes);
			const sidebar1_changes = {};

			if (dirty & /*$$scope, rightSidebar, rightSidebarProps*/ 7) {
				sidebar1_changes.$$scope = { dirty, ctx };
			}

			sidebar1.$set(sidebar1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sidebar0.$$.fragment, local);
			transition_in(formbuilder.$$.fragment, local);
			transition_in(sidebar1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sidebar0.$$.fragment, local);
			transition_out(formbuilder.$$.fragment, local);
			transition_out(sidebar1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(sidebar0);
			destroy_component(formbuilder);
			destroy_component(sidebar1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let rightSidebar;
	let rightSidebarProps = {};

	subscribeComponent("show_right_sidebar", ({ component, ...other }) => {
		$$invalidate(0, rightSidebar = component);
		$$invalidate(1, rightSidebarProps = other ?? {});
	});

	onMount(() => {
		$$invalidate(0, rightSidebar = FieldEditSidebar);
	});

	return [rightSidebar, rightSidebarProps];
}

class FormBuilderPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FormBuilderPage;