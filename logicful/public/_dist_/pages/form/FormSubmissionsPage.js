/* src/pages/form/FormSubmissionsPage.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { onMount, tick } from "../../../web_modules/svelte.js";
import { LoadState } from "../../models/LoadState.js";
import RemoteTable from "../../components/RemoteTable.js";
import { isObject } from "../../guards/Guard.js";
import { deleteApi, getApi, putApi } from "../../services/ApiService.js";
import { getUrlParameter } from "../../util/Http.js";
import Dialog from "../../components/layout/Dialog.js";
import FormPreview from "../../features/form/live/FormPreview.js";
import { fastClone } from "../../util/Compare.js";

function create_if_block(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				isOpen: true,
				width: "960px",
				title: `Viewing Submission Details`,
				onClose: /*func*/ ctx[9],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};
			if (dirty & /*preview*/ 2) dialog_changes.onClose = /*func*/ ctx[9];

			if (dirty & /*$$scope, preview, form*/ 16387) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (180:2) <Dialog     isOpen={true}     width={'960px'}     title={`Viewing Submission Details`}     onClose={async () => {       console.log('closed')       preview = undefined       await tick();     }}   >
function create_default_slot(ctx) {
	let div;
	let formpreview;
	let current;

	formpreview = new FormPreview({
			props: {
				submission: /*preview*/ ctx[1],
				form: /*form*/ ctx[0],
				mode: "submission_preview"
			}
		});

	return {
		c() {
			div = element("div");
			create_component(formpreview.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(formpreview, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const formpreview_changes = {};
			if (dirty & /*preview*/ 2) formpreview_changes.submission = /*preview*/ ctx[1];
			if (dirty & /*form*/ 1) formpreview_changes.form = /*form*/ ctx[0];
			formpreview.$set(formpreview_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formpreview.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formpreview.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(formpreview);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let h1;
	let t1;
	let hr;
	let t2;
	let div0;
	let remotetable;
	let t3;
	let if_block_anchor;
	let current;

	remotetable = new RemoteTable({
			props: {
				defaultSortColumn: "Submission Date",
				searchPlaceHolder: "Search Anything...",
				columnMeta: { "Submission Date": { type: "date" } },
				getRows: /*getRows*/ ctx[3],
				sortColumns: /*sortColumns*/ ctx[4],
				onDelete: /*onDelete*/ ctx[6],
				onRowClick: /*onRowClick*/ ctx[5],
				onRead: /*onMarkRead*/ ctx[7],
				onFormat: formatSubmissionItem,
				hidden: /*hidden*/ ctx[2]
			}
		});

	let if_block = /*preview*/ ctx[1] && /*form*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			h1 = element("h1");
			h1.textContent = "Submissions";
			t1 = space();
			hr = element("hr");
			t2 = space();
			div0 = element("div");
			create_component(remotetable.$$.fragment);
			t3 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div1, "class", "main");
			attr(div2, "class", "container-fluid clearfix");
			attr(div2, "id", "main-container");
			set_style(div2, "margin-top", "5em");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, h1);
			append(div1, t1);
			append(div1, hr);
			append(div1, t2);
			append(div1, div0);
			mount_component(remotetable, div0, null);
			insert(target, t3, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*preview*/ ctx[1] && /*form*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*preview, form*/ 3) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(remotetable.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(remotetable.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(remotetable);
			if (detaching) detach(t3);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

let types = {};

function formatSubmissionItem(column, value) {
	const type = types[column];

	if (type === "address" && isObject(value)) {
		const results = [
			value?.address1?.value,
			value?.address2?.value,
			value?.state?.value,
			value?.city?.value,
			value?.zip?.value
		];

		return results.filter(r => r).join(" ");
	}

	if (type === "checkbox-group" && isObject(value)) {
		return Object.values(value).filter(v => v != null).join(", ");
	}

	if (type === "radio-group" && isObject(value)) {
		return Object.values(value).find(v => v != null);
	}

	if (type === "full-name" && isObject(value)) {
		const results = [
			value?.prefix?.value,
			value?.first?.value,
			value?.middle?.value,
			value?.last?.value
		];

		return results.filter(r => r).join(" ");
	}

	if (type === "file" && isObject(value)) {
		if (!value) {
			return "No file submitted";
		}

		return `${value.name ?? value.id}, ${value.type}`;
	}

	return undefined;
}

function instance($$self, $$props, $$invalidate) {
	
	
	
	let { formId = "" } = $$props;
	let { form = undefined } = $$props;
	let state = LoadState.NotStarted;
	let hidden = new Set(["submission_id", "full_submission_data", "meta_unread"]);
	let preview = undefined;

	async function getRows() {
		$$invalidate(8, formId = getUrlParameter("formId") ?? "");

		if (!formId) {
			return [];
		}

		$$invalidate(0, form = await getApi(`form/${formId}`));

		if (!form) {
			return [];
		}

		const url = await getApi(`form/${formId}/submission`);
		const response = await fetch(url.message);
		let submissions = [];

		if (response.ok) {
			submissions = await response.json();
		} else {
			submissions = [];
		}

		const read = await getRead(form);
		const labels = {};

		if (!form.fields || form.fields?.length === 0) {
			return [];
		}

		form.fields.forEach(f => {
			if (f.name) {
				labels[f.name] = f.label ?? f.name;
			}
		});

		const deleted = JSON.parse(sessionStorage.getItem("deleted_submissions") || JSON.stringify({}));

		setTimeout(
			() => {
				clearUnreadSubmissions();
			},
			2000
		);

		return submissions.filter(d => !deleted[d.id]).map(d => {
			d.isUnread = read[d.id] === true ? false : true;

			Object.keys(d.details).forEach(key => {
				if (labels[key]) {
					const label = labels[key];
					d.details[label] = d.details[key];
					types[label] = form.fields.find(w => w.label === label)?.type ?? "";
					delete d.details[key];
				} else {
					const fieldByName = form.fields.find(w => w.name === key)?.type;

					if (fieldByName) {
						types[key] = fieldByName;
					}
				}
			});

			d.details["Submission Date"] = new Date(d.creationDate).toLocaleString();
			d.details["submission_id"] = d.id;
			d.details["full_submission_data"] = JSON.stringify(d);
			d.details["meta_unread"] = d.isUnread;
			return d.details;
		});
	}

	function sortColumns(columns) {
		return columns.sort((a, b) => {
			return form.fields.findIndex(f => f.label === a) - form.fields.findIndex(f => f.label === b);
		});
	}

	function onRowClick(row) {
		const submission = JSON.parse(row["full_submission_data"]);
		$$invalidate(1, preview = fastClone(submission));
		markRead(submission.formId, [submission]);
	}

	async function onDelete(rows) {
		const ids = rows.map(r => r["submission_id"]).filter(r => r != null);
		await deleteApi(`form/${formId}/submission`, ids);
		const deleted = JSON.parse(sessionStorage.getItem("deleted_submissions") || JSON.stringify({}));

		ids.forEach(i => {
			deleted[i] = true;
		});

		sessionStorage.setItem("deleted_submissions", JSON.stringify(deleted));
	}

	async function onMarkRead(rows, value) {
		const result = {};

		rows.forEach(r => {
			console.log(r);
			const id = r["submission_id"];

			if (!id) {
				return;
			}

			const unread = Boolean(r["meta_unread"]);

			if (unread === !value) {
				return;
			}

			result[id] = value;
		});

		if (Object.keys(result).length === 0) {
			return;
		}

		await putApi(`form/${formId}/submission/mark/read`, result);
	}

	async function clearUnreadSubmissions() {
		if (form.unreadSubmissions === 0) {
			return;
		}

		$$invalidate(0, form.unreadSubmissions = 0, form);
		putApi(`form/${form.id}`, form);
	}

	async function markRead(formId, submissions) {
		submissions = submissions.filter(f => f.isUnread);

		if (submissions.length === 0) {
			return;
		}

		const result = {};
		submissions.forEach(s => result[s.id] = true);
		await putApi(`form/${formId}/submission/mark/read`, result);
	}

	async function getRead(form) {
		return await getApi(`form/${form.id}/submission/read`);
	}

	const func = async () => {
		console.log("closed");
		$$invalidate(1, preview = undefined);
		await tick();
	};

	$$self.$$set = $$props => {
		if ("formId" in $$props) $$invalidate(8, formId = $$props.formId);
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
	};

	return [
		form,
		preview,
		hidden,
		getRows,
		sortColumns,
		onRowClick,
		onDelete,
		onMarkRead,
		formId,
		func
	];
}

class FormSubmissionsPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { formId: 8, form: 0 });
	}
}

export default FormSubmissionsPage;
export { formatSubmissionItem };