/* src/pages/account/RegisterPage.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	stop_propagation,
	text
} from "../../../web_modules/svelte/internal.js";

import { postApi } from "../../services/ApiService.js";
import { setToken } from "../../services/AuthService.js";
import { afterUpdate } from "../../../web_modules/svelte.js";
import { navigate } from "../../../web_modules/svelte-routing.js";

function create_if_block_3(ctx) {
	let div;
	let t0;
	let t1;
	let button;

	return {
		c() {
			div = element("div");
			t0 = text(/*error*/ ctx[8]);
			t1 = space();
			button = element("button");
			button.innerHTML = `<span aria-hidden="true">Ã—</span>`;
			attr(button, "type", "button");
			attr(button, "class", "close");
			attr(button, "data-dismiss", "alert");
			attr(button, "aria-label", "Close");
			attr(div, "class", "alert alert-danger alert-dismissible fade show");
			set_style(div, "border-radius", "0");
			attr(div, "role", "alert");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, button);
		},
		p(ctx, dirty) {
			if (dirty & /*error*/ 256) set_data(t0, /*error*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (115:18) {:else}
function create_else_block_2(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "type", "password");
			attr(input, "minlength", "6");
			attr(input, "class", "form-control");
			attr(input, "id", "password");
			attr(input, "autocomplete", "current-password");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			set_input_value(input, /*password*/ ctx[1]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_1*/ ctx[16]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*password*/ 2 && input.value !== /*password*/ ctx[1]) {
				set_input_value(input, /*password*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (113:18) {#if showPassword}
function create_if_block_2(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "type", "text");
			attr(input, "minlength", "6");
			attr(input, "class", "form-control");
			attr(input, "id", "password");
			attr(input, "autocomplete", "current-password");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			set_input_value(input, /*password*/ ctx[1]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[15]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*password*/ 2 && input.value !== /*password*/ ctx[1]) {
				set_input_value(input, /*password*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (118:18) {:else}
function create_else_block_1(ctx) {
	let span1;
	let mounted;
	let dispose;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-eye-slash" style="position:absolute;top:0px;right:10px;margin-top:0.8em;"></span>`;
		},
		m(target, anchor) {
			insert(target, span1, anchor);

			if (!mounted) {
				dispose = listen(span1, "click", /*togglePassword*/ ctx[11]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span1);
			mounted = false;
			dispose();
		}
	};
}

// (116:18) {#if !showPassword}
function create_if_block_1(ctx) {
	let span1;
	let mounted;
	let dispose;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-eye" style="position:absolute;top:0px;right:10px;margin-top:0.8em;"></span>`;
		},
		m(target, anchor) {
			insert(target, span1, anchor);

			if (!mounted) {
				dispose = listen(span1, "click", /*togglePassword*/ ctx[11]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span1);
			mounted = false;
			dispose();
		}
	};
}

// (130:12) {:else}
function create_else_block(ctx) {
	let button;
	let button_disabled_value;

	return {
		c() {
			button = element("button");
			button.textContent = "Creating Account...";
			attr(button, "type", "submit");
			attr(button, "class", "btn btn-block btn-primary");
			button.disabled = button_disabled_value = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (128:12) {#if !creating}
function create_if_block(ctx) {
	let button;
	let t;
	let button_disabled_value;

	return {
		c() {
			button = element("button");
			t = text("Create Account");
			attr(button, "type", "submit");
			attr(button, "class", "btn btn-block btn-primary");
			button.disabled = button_disabled_value = !/*valid*/ ctx[5];
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		p(ctx, dirty) {
			if (dirty & /*valid*/ 32 && button_disabled_value !== (button_disabled_value = !/*valid*/ ctx[5])) {
				button.disabled = button_disabled_value;
			}
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div16;
	let div15;
	let div14;
	let div13;
	let t0;
	let div0;
	let t2;
	let form;
	let div2;
	let label0;
	let t4;
	let div1;
	let span0;
	let t5;
	let input0;
	let t6;
	let div4;
	let label1;
	let t8;
	let div3;
	let span1;
	let t9;
	let input1;
	let t10;
	let div6;
	let label2;
	let t12;
	let div5;
	let span3;
	let t13;
	let input2;
	let t14;
	let div11;
	let div9;
	let label3;
	let t16;
	let div7;
	let span5;
	let t17;
	let t18;
	let t19;
	let div8;
	let t21;
	let div10;
	let input3;
	let t22;
	let label4;
	let t25;
	let t26;
	let div12;
	let mounted;
	let dispose;
	let if_block0 = /*error*/ ctx[8] && create_if_block_3(ctx);

	function select_block_type(ctx, dirty) {
		if (/*showPassword*/ ctx[6]) return create_if_block_2;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (!/*showPassword*/ ctx[6]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type_1 = select_block_type_1(ctx, -1);
	let if_block2 = current_block_type_1(ctx);

	function select_block_type_2(ctx, dirty) {
		if (!/*creating*/ ctx[7]) return create_if_block;
		return create_else_block;
	}

	let current_block_type_2 = select_block_type_2(ctx, -1);
	let if_block3 = current_block_type_2(ctx);

	return {
		c() {
			section = element("section");
			div16 = element("div");
			div15 = element("div");
			div14 = element("div");
			div13 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			div0.innerHTML = `<h1 class="mb-0 h3">Create an Account</h1>`;
			t2 = space();
			form = element("form");
			div2 = element("div");
			label0 = element("label");
			label0.textContent = "Full Name";
			t4 = space();
			div1 = element("div");
			span0 = element("span");
			span0.innerHTML = `<i class="fas fa-user"></i>`;
			t5 = space();
			input0 = element("input");
			t6 = space();
			div4 = element("div");
			label1 = element("label");
			label1.textContent = "What should we call you?";
			t8 = space();
			div3 = element("div");
			span1 = element("span");
			span1.innerHTML = `<i class="far fa-address-book"></i>`;
			t9 = space();
			input1 = element("input");
			t10 = space();
			div6 = element("div");
			label2 = element("label");
			label2.textContent = "Your Email";
			t12 = space();
			div5 = element("div");
			span3 = element("span");
			span3.innerHTML = `<span class="fas fa-envelope"></span>`;
			t13 = space();
			input2 = element("input");
			t14 = space();
			div11 = element("div");
			div9 = element("div");
			label3 = element("label");
			label3.textContent = "Your Password";
			t16 = space();
			div7 = element("div");
			span5 = element("span");
			span5.innerHTML = `<span class="fas fa-unlock-alt"></span>`;
			t17 = space();
			if_block1.c();
			t18 = space();
			if_block2.c();
			t19 = space();
			div8 = element("div");
			div8.textContent = "Minimum 6 characters";
			t21 = space();
			div10 = element("div");
			input3 = element("input");
			t22 = space();
			label4 = element("label");
			label4.innerHTML = `I agree to the <a href="#">terms and conditions</a>`;
			t25 = space();
			if_block3.c();
			t26 = space();
			div12 = element("div");
			div12.innerHTML = `<span class="font-weight-normal">Already have an account? <a href="./account/login" class="font-weight-bold">Login here</a></span>`;
			attr(div0, "class", "text-center text-md-center mb-4 mt-md-0");
			attr(label0, "for", "fullName");
			attr(span0, "class", "input-group-text");
			attr(span0, "id", "basic-addon3");
			attr(input0, "type", "text");
			attr(input0, "class", "form-control");
			attr(input0, "id", "fullName");
			attr(div1, "class", "input-group");
			attr(div2, "class", "form-group mb-4");
			attr(label1, "for", "displayName");
			attr(span1, "class", "input-group-text");
			attr(span1, "id", "basic-addon3");
			attr(input1, "type", "text");
			attr(input1, "class", "form-control");
			attr(input1, "id", "displayName");
			attr(input1, "autocomplete", "off");
			attr(div3, "class", "input-group");
			attr(div4, "class", "form-group mb-4");
			attr(label2, "for", "email");
			attr(span3, "class", "input-group-text");
			attr(span3, "id", "basic-addon3");
			attr(input2, "type", "email");
			attr(input2, "class", "form-control");
			attr(input2, "id", "email");
			attr(div5, "class", "input-group");
			attr(div6, "class", "form-group mb-4");
			attr(label3, "for", "password");
			attr(span5, "class", "input-group-text");
			attr(span5, "id", "basic-addon4");
			attr(div7, "class", "input-group");
			attr(div8, "class", "form-text");
			attr(div9, "class", "form-group mb-4");
			attr(input3, "class", "form-check-input");
			attr(input3, "type", "checkbox");
			attr(input3, "id", "defaultCheck6");
			attr(label4, "class", "form-check-label");
			attr(label4, "for", "defaultCheck6");
			attr(div10, "class", "form-check mb-4");
			attr(div11, "class", "form-group");
			attr(div12, "class", "d-flex justify-content-center align-items-center mt-4");
			attr(div13, "class", "signin-inner mt-3 mt-lg-0 bg-white shadow-soft border rounded border-light p-4 p-lg-5 w-100 fmxw-500");
			attr(div14, "class", "col-12 d-flex align-items-center justify-content-center");
			attr(div15, "class", "row justify-content-center");
			attr(div16, "class", "container");
			attr(section, "class", "min-vh-100 d-flex align-items-center section-image overlay-soft-dark");
			attr(section, "data-background", "../../assets/img/pages/form-image.jpg");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div16);
			append(div16, div15);
			append(div15, div14);
			append(div14, div13);
			if (if_block0) if_block0.m(div13, null);
			append(div13, t0);
			append(div13, div0);
			append(div13, t2);
			append(div13, form);
			append(form, div2);
			append(div2, label0);
			append(div2, t4);
			append(div2, div1);
			append(div1, span0);
			append(div1, t5);
			append(div1, input0);
			set_input_value(input0, /*name*/ ctx[2]);
			append(form, t6);
			append(form, div4);
			append(div4, label1);
			append(div4, t8);
			append(div4, div3);
			append(div3, span1);
			append(div3, t9);
			append(div3, input1);
			set_input_value(input1, /*displayName*/ ctx[3]);
			append(form, t10);
			append(form, div6);
			append(div6, label2);
			append(div6, t12);
			append(div6, div5);
			append(div5, span3);
			append(div5, t13);
			append(div5, input2);
			set_input_value(input2, /*email*/ ctx[0]);
			append(form, t14);
			append(form, div11);
			append(div11, div9);
			append(div9, label3);
			append(div9, t16);
			append(div9, div7);
			append(div7, span5);
			append(div7, t17);
			if_block1.m(div7, null);
			append(div7, t18);
			if_block2.m(div7, null);
			append(div9, t19);
			append(div9, div8);
			append(div11, t21);
			append(div11, div10);
			append(div10, input3);
			input3.checked = /*agree*/ ctx[4];
			append(div10, t22);
			append(div10, label4);
			append(form, t25);
			if_block3.m(form, null);
			append(div13, t26);
			append(div13, div12);

			if (!mounted) {
				dispose = [
					listen(input0, "blur", /*onNameBlur*/ ctx[10]),
					listen(input0, "input", /*input0_input_handler*/ ctx[12]),
					listen(input1, "input", /*input1_input_handler*/ ctx[13]),
					listen(input2, "input", /*input2_input_handler*/ ctx[14]),
					listen(input3, "change", /*input3_change_handler*/ ctx[17]),
					listen(form, "submit", stop_propagation(prevent_default(/*onRegister*/ ctx[9])))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*error*/ ctx[8]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div13, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*name*/ 4 && input0.value !== /*name*/ ctx[2]) {
				set_input_value(input0, /*name*/ ctx[2]);
			}

			if (dirty & /*displayName*/ 8 && input1.value !== /*displayName*/ ctx[3]) {
				set_input_value(input1, /*displayName*/ ctx[3]);
			}

			if (dirty & /*email*/ 1 && input2.value !== /*email*/ ctx[0]) {
				set_input_value(input2, /*email*/ ctx[0]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div7, t18);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx, dirty)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_1(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div7, null);
				}
			}

			if (dirty & /*agree*/ 16) {
				input3.checked = /*agree*/ ctx[4];
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx, dirty)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_2(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(form, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if_block1.d();
			if_block2.d();
			if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let email = "";
	let password = "";
	let name = "";
	let displayName = "";
	let agree = false;
	let valid = false;
	let showPassword = false;
	let creating = false;
	let error = "";
	let lastName = "";

	async function onRegister() {
		$$invalidate(8, error = "");
		$$invalidate(7, creating = true);

		if (!name && !displayName) {
			$$invalidate(2, name = email.split("@")[0].trim());
			$$invalidate(3, displayName = name);
		}

		try {
			const result = await postApi("user/register", {
				email,
				fullName: name,
				displayName,
				password
			});

			if (result.token) {
				setToken(result);
				navigate("/");
			} else {
				$$invalidate(8, error = "Failed to register, unknown response from server.");
			}
		} catch(ex) {
			if (ex.message === "email already exists") {
				$$invalidate(8, error = "Email address is already in use.");
			} else {
				$$invalidate(8, error = "Failed to register, something went wrong.");
			}
		} finally {
			$$invalidate(7, creating = false);
		}
	}

	afterUpdate(() => {
		$$invalidate(5, valid = isValid());
	});

	function onNameBlur() {
		if (name && lastName !== name) {
			$$invalidate(3, displayName = name.trim().split(" ")[0] ?? "");
			lastName = name;
		}
	}

	function isValid() {
		return email != "" && password != "" && agree;
	}

	function togglePassword() {
		$$invalidate(6, showPassword = !showPassword);
	}

	function input0_input_handler() {
		name = this.value;
		$$invalidate(2, name);
	}

	function input1_input_handler() {
		displayName = this.value;
		$$invalidate(3, displayName);
	}

	function input2_input_handler() {
		email = this.value;
		$$invalidate(0, email);
	}

	function input_input_handler() {
		password = this.value;
		$$invalidate(1, password);
	}

	function input_input_handler_1() {
		password = this.value;
		$$invalidate(1, password);
	}

	function input3_change_handler() {
		agree = this.checked;
		$$invalidate(4, agree);
	}

	return [
		email,
		password,
		name,
		displayName,
		agree,
		valid,
		showPassword,
		creating,
		error,
		onRegister,
		onNameBlur,
		togglePassword,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input_input_handler,
		input_input_handler_1,
		input3_change_handler
	];
}

class RegisterPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default RegisterPage;