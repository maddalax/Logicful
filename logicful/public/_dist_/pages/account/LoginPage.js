/* src/pages/account/LoginPage.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	stop_propagation,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { postApi } from "../../services/ApiService.js";
import { setToken } from "../../services/AuthService.js";
import { afterUpdate, onMount } from "../../../web_modules/svelte.js";
import LogoDark from "../../components/layout/logos/LogoDark.js";
import Link from "../../components/Link.js";
import { navigate } from "../../../web_modules/svelte-routing.js";

function create_if_block_4(ctx) {
	let div;
	let t0;
	let t1;
	let button;

	return {
		c() {
			div = element("div");
			t0 = text(/*error*/ ctx[6]);
			t1 = space();
			button = element("button");
			button.innerHTML = `<span aria-hidden="true">Ã—</span>`;
			attr(button, "type", "button");
			attr(button, "class", "close");
			attr(button, "data-dismiss", "alert");
			attr(button, "aria-label", "Close");
			attr(div, "class", "alert alert-danger alert-dismissible fade show");
			set_style(div, "border-radius", "0");
			attr(div, "role", "alert");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, button);
		},
		p(ctx, dirty) {
			if (dirty & /*error*/ 64) set_data(t0, /*error*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (118:10) {:else}
function create_else_block(ctx) {
	let div12;
	let div1;
	let div0;
	let logodark;
	let t0;
	let h1;
	let t2;
	let div3;
	let t3;
	let div4;
	let t5;
	let form;
	let div6;
	let label0;
	let t7;
	let div5;
	let span1;
	let t8;
	let input0;
	let t9;
	let div10;
	let div8;
	let label1;
	let t11;
	let div7;
	let span3;
	let t12;
	let t13;
	let t14;
	let div9;
	let input1;
	let t15;
	let label2;
	let t17;
	let t18;
	let div11;
	let span4;
	let t19;
	let link;
	let current;
	let mounted;
	let dispose;
	logodark = new LogoDark({});

	function select_block_type_1(ctx, dirty) {
		if (/*showPassword*/ ctx[4]) return create_if_block_3;
		return create_else_block_3;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block0 = current_block_type(ctx);

	function select_block_type_2(ctx, dirty) {
		if (!/*showPassword*/ ctx[4]) return create_if_block_2;
		return create_else_block_2;
	}

	let current_block_type_1 = select_block_type_2(ctx, -1);
	let if_block1 = current_block_type_1(ctx);

	function select_block_type_3(ctx, dirty) {
		if (!/*processing*/ ctx[5]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type_2 = select_block_type_3(ctx, -1);
	let if_block2 = current_block_type_2(ctx);

	link = new Link({
			props: {
				href: "/account/register",
				class: "font-weight-bold",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div12 = element("div");
			div1 = element("div");
			div0 = element("div");
			create_component(logodark.$$.fragment);
			t0 = space();
			h1 = element("h1");
			h1.textContent = "Sign in to our Platform";
			t2 = space();
			div3 = element("div");
			div3.innerHTML = `<div class="g-signin2" data-longtitle="true" data-theme="dark" data-height="50" data-width="400" data-onsuccess="onGoogleSignIn"></div>`;
			t3 = space();
			div4 = element("div");
			div4.textContent = "Or";
			t5 = space();
			form = element("form");
			div6 = element("div");
			label0 = element("label");
			label0.textContent = "Your Email";
			t7 = space();
			div5 = element("div");
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-envelope"></span>`;
			t8 = space();
			input0 = element("input");
			t9 = space();
			div10 = element("div");
			div8 = element("div");
			label1 = element("label");
			label1.textContent = "Your Password";
			t11 = space();
			div7 = element("div");
			span3 = element("span");
			span3.innerHTML = `<span class="fas fa-unlock-alt"></span>`;
			t12 = space();
			if_block0.c();
			t13 = space();
			if_block1.c();
			t14 = space();
			div9 = element("div");
			input1 = element("input");
			t15 = space();
			label2 = element("label");
			label2.textContent = "Remember me";
			t17 = space();
			if_block2.c();
			t18 = space();
			div11 = element("div");
			span4 = element("span");
			t19 = text("Not signed up?\n                  ");
			create_component(link.$$.fragment);
			attr(div0, "href", "/");
			set_style(div0, "height", "100px");
			set_style(h1, "margin-top", "1em");
			attr(h1, "class", "mb-0 h3");
			attr(div1, "class", "text-center text-md-center mb-4 mt-md-0");
			set_style(div3, "margin-bottom", "1em");
			attr(div4, "class", "separator");
			set_style(div4, "margin-bottom", "1em");
			set_style(div4, "margin-top", "1.5em");
			attr(label0, "for", "email");
			attr(span1, "class", "input-group-text");
			attr(span1, "id", "basic-addon3");
			attr(input0, "type", "email");
			attr(input0, "class", "form-control");
			attr(input0, "id", "email");
			attr(input0, "autocomplete", "email");
			attr(div5, "class", "input-group");
			attr(div6, "class", "form-group mb-4");
			attr(label1, "for", "password");
			attr(span3, "class", "input-group-text");
			attr(span3, "id", "basic-addon4");
			attr(div7, "class", "input-group");
			attr(div8, "class", "form-group mb-4");
			attr(input1, "class", "form-check-input");
			attr(input1, "type", "checkbox");
			attr(input1, "id", "rememberMe");
			attr(label2, "class", "form-check-label");
			attr(label2, "for", "rememberMe");
			attr(div9, "class", "form-check mb-4");
			attr(div10, "class", "form-group");
			attr(span4, "class", "font-weight-normal");
			attr(div11, "class", "d-flex justify-content-center align-items-center mt-4");
		},
		m(target, anchor) {
			insert(target, div12, anchor);
			append(div12, div1);
			append(div1, div0);
			mount_component(logodark, div0, null);
			append(div1, t0);
			append(div1, h1);
			append(div12, t2);
			append(div12, div3);
			append(div12, t3);
			append(div12, div4);
			append(div12, t5);
			append(div12, form);
			append(form, div6);
			append(div6, label0);
			append(div6, t7);
			append(div6, div5);
			append(div5, span1);
			append(div5, t8);
			append(div5, input0);
			set_input_value(input0, /*email*/ ctx[0]);
			append(form, t9);
			append(form, div10);
			append(div10, div8);
			append(div8, label1);
			append(div8, t11);
			append(div8, div7);
			append(div7, span3);
			append(div7, t12);
			if_block0.m(div7, null);
			append(div7, t13);
			if_block1.m(div7, null);
			append(div10, t14);
			append(div10, div9);
			append(div9, input1);
			input1.checked = /*remember*/ ctx[2];
			append(div9, t15);
			append(div9, label2);
			append(form, t17);
			if_block2.m(form, null);
			append(div12, t18);
			append(div12, div11);
			append(div11, span4);
			append(span4, t19);
			mount_component(link, span4, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen(input1, "change", /*input1_change_handler*/ ctx[14]),
					listen(form, "submit", stop_propagation(prevent_default(/*onLogin*/ ctx[9])))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*email*/ 1 && input0.value !== /*email*/ ctx[0]) {
				set_input_value(input0, /*email*/ ctx[0]);
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div7, t13);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div7, null);
				}
			}

			if (dirty & /*remember*/ 4) {
				input1.checked = /*remember*/ ctx[2];
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx, dirty)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_2(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(form, null);
				}
			}

			const link_changes = {};

			if (dirty & /*$$scope*/ 262144) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(logodark.$$.fragment, local);
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(logodark.$$.fragment, local);
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div12);
			destroy_component(logodark);
			if_block0.d();
			if_block1.d();
			if_block2.d();
			destroy_component(link);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (108:10) {#if processingGoogle && googleIdToken}
function create_if_block(ctx) {
	let div2;

	return {
		c() {
			div2 = element("div");

			div2.innerHTML = `<div class="spinner-border text-secondary" role="status"><span class="sr-only">Loading...</span></div> 
              <div style="margin-top: 1em"><p><strong>Signing in with Google...</strong></p></div>`;

			set_style(div2, "text-align", "center");
			set_style(div2, "padding-top", "1em");
			set_style(div2, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (173:22) {:else}
function create_else_block_3(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "type", "password");
			attr(input, "minlength", "6");
			attr(input, "class", "form-control");
			attr(input, "id", "password");
			attr(input, "autocomplete", "current-password");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			set_input_value(input, /*password*/ ctx[1]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_1*/ ctx[13]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*password*/ 2 && input.value !== /*password*/ ctx[1]) {
				set_input_value(input, /*password*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (165:22) {#if showPassword}
function create_if_block_3(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "type", "text");
			attr(input, "minlength", "6");
			attr(input, "class", "form-control");
			attr(input, "id", "password");
			attr(input, "autocomplete", "current-password");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			set_input_value(input, /*password*/ ctx[1]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[12]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*password*/ 2 && input.value !== /*password*/ ctx[1]) {
				set_input_value(input, /*password*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (188:22) {:else}
function create_else_block_2(ctx) {
	let span1;
	let mounted;
	let dispose;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-eye-slash" style="position:absolute;top:0px;right:10px;margin-top:0.8em;"></span>`;
		},
		m(target, anchor) {
			insert(target, span1, anchor);

			if (!mounted) {
				dispose = listen(span1, "click", /*togglePassword*/ ctx[10]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span1);
			mounted = false;
			dispose();
		}
	};
}

// (182:22) {#if !showPassword}
function create_if_block_2(ctx) {
	let span1;
	let mounted;
	let dispose;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-eye" style="position:absolute;top:0px;right:10px;margin-top:0.8em;"></span>`;
		},
		m(target, anchor) {
			insert(target, span1, anchor);

			if (!mounted) {
				dispose = listen(span1, "click", /*togglePassword*/ ctx[10]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span1);
			mounted = false;
			dispose();
		}
	};
}

// (212:16) {:else}
function create_else_block_1(ctx) {
	let button;
	let button_disabled_value;

	return {
		c() {
			button = element("button");
			button.textContent = "Signing In...";
			attr(button, "type", "submit");
			attr(button, "class", "btn btn-block btn-primary");
			button.disabled = button_disabled_value = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (207:16) {#if !processing}
function create_if_block_1(ctx) {
	let button;
	let t;
	let button_disabled_value;

	return {
		c() {
			button = element("button");
			t = text("Sign In With Email");
			attr(button, "type", "submit");
			attr(button, "class", "btn btn-block btn-primary");
			button.disabled = button_disabled_value = !/*valid*/ ctx[3];
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		p(ctx, dirty) {
			if (dirty & /*valid*/ 8 && button_disabled_value !== (button_disabled_value = !/*valid*/ ctx[3])) {
				button.disabled = button_disabled_value;
			}
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (223:18) <Link href="/account/register" class="font-weight-bold">
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Register here");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let meta;
	let script;
	let script_src_value;
	let t0;
	let section;
	let div3;
	let div2;
	let div1;
	let div0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let current;
	let if_block0 = /*error*/ ctx[6] && create_if_block_4(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*processingGoogle*/ ctx[7] && /*googleIdToken*/ ctx[8]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			meta = element("meta");
			script = element("script");
			t0 = space();
			section = element("section");
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			attr(meta, "name", "google-signin-client_id");
			attr(meta, "content", "507014281135-ff3semdge1t7iu6jdi63h3ido0ch4k4q.apps.googleusercontent.com");
			if (script.src !== (script_src_value = "https://apis.google.com/js/platform.js")) attr(script, "src", script_src_value);
			script.async = true;
			script.defer = true;
			attr(div0, "class", "signin-inner mt-3 mt-lg-0 bg-white shadow-soft border rounded\n            border-light p-4 p-lg-5 w-100 fmxw-500");
			attr(div1, "class", "col-12 d-flex align-items-center justify-content-center");
			attr(div2, "class", "row justify-content-center");
			attr(div3, "class", "container");
			attr(section, "class", "min-vh-100 d-flex align-items-center section-image overlay-soft-dark");
			attr(section, "data-background", "../../assets/img/pages/form-image.jpg");
		},
		m(target, anchor) {
			append(document.head, meta);
			append(document.head, script);
			insert(target, t0, anchor);
			insert(target, section, anchor);
			append(section, div3);
			append(div3, div2);
			append(div2, div1);
			append(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t1);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*error*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(div0, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div0, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			detach(meta);
			detach(script);
			if (detaching) detach(t0);
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let email = "";
	let password = "";
	let remember = true;
	let valid = false;
	let showPassword = false;
	let processing = false;
	let error = "";
	let processingGoogle = false;
	let googleIdToken = "";

	onMount(() => {
		//@ts-ignore
		window.onGoogleSignIn = user => {
			$$invalidate(7, processingGoogle = true);
			const idToken = user.getAuthResponse().id_token;
			$$invalidate(8, googleIdToken = idToken);
			onGoogleLogin();
		};
	});

	async function onGoogleLogin() {
		await doLogin("user/login/google", { token: googleIdToken });
	}

	async function onLogin() {
		$$invalidate(6, error = "");
		$$invalidate(5, processing = true);
		$$invalidate(0, email = email.trim().toLowerCase());
		await doLogin("user/login", { email, password });
	}

	async function doLogin(endpoint, body) {
		try {
			const result = await postApi(endpoint, body);

			if (result.token) {
				setToken(result, remember);
				window.location.replace("/");
			} else {
				$$invalidate(6, error = "Failed to login, unknown response from server.");
			}
		} catch(ex) {
			if (ex.message === "invalid username or password") {
				$$invalidate(6, error = "Invalid username or password.");
			} else {
				$$invalidate(6, error = "Failed to login, something went wrong.");
			}
		} finally {
			$$invalidate(5, processing = false);
		}
	}

	afterUpdate(() => {
		$$invalidate(3, valid = isValid());
	});

	function isValid() {
		return email != "" && password != "";
	}

	function togglePassword() {
		$$invalidate(4, showPassword = !showPassword);
	}

	function input0_input_handler() {
		email = this.value;
		$$invalidate(0, email);
	}

	function input_input_handler() {
		password = this.value;
		$$invalidate(1, password);
	}

	function input_input_handler_1() {
		password = this.value;
		$$invalidate(1, password);
	}

	function input1_change_handler() {
		remember = this.checked;
		$$invalidate(2, remember);
	}

	return [
		email,
		password,
		remember,
		valid,
		showPassword,
		processing,
		error,
		processingGoogle,
		googleIdToken,
		onLogin,
		togglePassword,
		input0_input_handler,
		input_input_handler,
		input_input_handler_1,
		input1_change_handler
	];
}

class LoginPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default LoginPage;