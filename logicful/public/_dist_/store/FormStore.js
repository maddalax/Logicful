import{dispatch as g}from"../event/EventBus.js";import{dispatchFieldChange as i}from"../event/FieldEvent.js";import d from"../../web_modules/lodash.get.js";import{fastClone as s,fastEquals as f}from"../util/Compare.js";import{set as a}from"../util/Selection.js";let l={},c={},r={fields:{}};export class FormStore{initialized(){return this.getForm().initialized===!0}setForm(e){const t=s(e);r={fields:{}},t.fields.forEach(o=>{p.set(o,{fromUser:!1,field:"",value:""})}),Object.keys(t).forEach(o=>{if(o==="fields")return;r[o]=t[o]}),r.initialized=!0,g("form_updated",this.getForm())}set(e,t={field:"",value:"",fromUser:!1}){if(console.log("formstore_set",e,t),e.configTarget==="form"){const n=f(l[e.id],e);if(n)return;a(r,e.configFieldTarget,e.value),g("form_updated",this.getForm()),i(s(e),{field:e.configFieldTarget,value:e.value,fromUser:t.fromUser});return}if(e.configTarget){const n=f(l[e.id],e);if(n)return;a(r.fields[e.configTarget],e.configFieldTarget,e.value);const m=s(e);l[e.id]=m,i(m,t);const F=d(r.fields,e.configTarget);i(s(F),{field:e.configFieldTarget,value:e.value,fromUser:t.fromUser});return}const o=f(e,d(r.fields,e.id));if(o)return;const u=s(e);a(r.fields,e.id,u),i(u,t)}get(e){const t=r.fields[e];if(!t)return;const o=s(t);return o}getValue(e){const t=this.get(e);return t?.value??void 0}getForm(){const e={fields:[]};return Object.keys(r).forEach(t=>{if(t==="fields")return;e[t]=r[t]}),Object.keys(r.fields).forEach(t=>{const o=r.fields[t];if(o.configTarget)return;e.fields.push(s(o))}),e}setFile(e,t){c[e]=t}clearFile(e){delete c[e]}getFile(e){return c[e]}}const p=new FormStore;export default p;
