import{randomString as i}from"../util/Generate.js";import{onMount as c}from"../../web_modules/svelte.js";const n=new Map;export function subscribe(s,e){let t=i();if(n.has(s)){const r=n.get(s);r[t]=e,n.set(s,r)}else{const r={[t]:e};n.set(s,r)}return console.log("subscribers",s,Object.keys(n.get(s)).length),t}export function unsubscribe(s,e){if(!n.has(s)||!n.get(s))return;const t=n.get(s);delete t[e],n.set(s,t)}export function subscribeComponent(s,e){c(()=>{const t=subscribe(s,e);return()=>{unsubscribe(s,t)}})}export function subscribePrivateComponent(s,e,t){c(()=>{const r=subscribePrivate(s,e,t);return()=>{unsubscribe(e,r)}})}export function subscribePrivate(s,e,t){const r=`${s}-${e}`;return subscribe(r,t)}export async function dispatchPrivate(s,e,t){const r=`${s}-${e}`;console.debug("dispatch_event_private",r,t),dispatch(r,t)}export function dispatchSingle(s,e){const t=dispatchSync(s,e)[0];return console.debug("dispatch_event_single",s,e,t),t}export async function dispatch(s,e){if(console.debug("dispatch_event",s,e),n.has(s)){const t=n.get(s);if(!t)return;const r=Object.values(t).map(o=>o(e));await Promise.all(r)}}export function dispatchSync(s,e){if(console.debug("dispatch_event_sync",s,e),n.has(s)){const t=n.get(s);return t?Object.values(t).map(r=>r(e)):[]}return[]}
