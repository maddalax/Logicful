import './FormList.css.proxy.js';
/* src/features/folders/FormList.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import Link from "../../components/Link.js";
import MoveFormManager from "./MoveFormManager.js";
import { dispatch } from "../../event/EventBus.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (29:0) {#if moving}
function create_if_block(ctx) {
	let div;
	let moveformmanager;
	let current;

	moveformmanager = new MoveFormManager({
			props: {
				onClose: /*onMoveComplete*/ ctx[3],
				forms: [/*moving*/ ctx[1]]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(moveformmanager.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(moveformmanager, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const moveformmanager_changes = {};
			if (dirty & /*moving*/ 2) moveformmanager_changes.forms = [/*moving*/ ctx[1]];
			moveformmanager.$set(moveformmanager_changes);
		},
		i(local) {
			if (current) return;
			transition_in(moveformmanager.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(moveformmanager.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(moveformmanager);
		}
	};
}

// (42:14) <Link                 href={`/form/builder?formId=${form.id}`}                 style="font-weight: 600;">
function create_default_slot_4(ctx) {
	let t_value = /*form*/ ctx[6].title + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*forms*/ 1 && t_value !== (t_value = /*form*/ ctx[6].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (50:14) <Link                 href={`/form/submissions?formId=${form.id}`}                 style="font-weight: 50; text-decoration: underline;">
function create_default_slot_3(ctx) {
	let t0;
	let t1_value = /*form*/ ctx[6].unreadSubmissions + "";
	let t1;
	let t2;

	return {
		c() {
			t0 = text("Unread (");
			t1 = text(t1_value);
			t2 = text(")");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*forms*/ 1 && t1_value !== (t1_value = /*form*/ ctx[6].unreadSubmissions + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (56:14) <Link                 href={`/form/submissions?formId=${form.id}`}                 style="font-weight: 50; text-decoration: underline;">
function create_default_slot_2(ctx) {
	let t0;
	let t1_value = /*form*/ ctx[6].submissionCount + "";
	let t1;
	let t2;

	return {
		c() {
			t0 = text("All (");
			t1 = text(t1_value);
			t2 = text(")");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*forms*/ 1 && t1_value !== (t1_value = /*form*/ ctx[6].submissionCount + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (62:14) <Link                 href={`/form/preview?formId=${form.id}`}                 target="_blank"                 style="font-weight: 50; text-decoration: underline;">
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Preview");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (71:12) <Link               href={`/form/builder?formId=${form.id}`}               style="font-weight: 400;"               class="btn btn-xs btn-outline-dark">
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Edit");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (37:4) {#each forms as form}
function create_each_block(ctx) {
	let li;
	let div2;
	let div0;
	let h3;
	let link0;
	let t0;
	let small;
	let link1;
	let t1;
	let span0;
	let t3;
	let link2;
	let t4;
	let span1;
	let t6;
	let link3;
	let t7;
	let div1;
	let link4;
	let t8;
	let button0;
	let t10;
	let button1;
	let span2;
	let t11;
	let current;
	let mounted;
	let dispose;

	link0 = new Link({
			props: {
				href: `/form/builder?formId=${/*form*/ ctx[6].id}`,
				style: "font-weight: 600;",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	link1 = new Link({
			props: {
				href: `/form/submissions?formId=${/*form*/ ctx[6].id}`,
				style: "font-weight: 50; text-decoration: underline;",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	link2 = new Link({
			props: {
				href: `/form/submissions?formId=${/*form*/ ctx[6].id}`,
				style: "font-weight: 50; text-decoration: underline;",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	link3 = new Link({
			props: {
				href: `/form/preview?formId=${/*form*/ ctx[6].id}`,
				target: "_blank",
				style: "font-weight: 50; text-decoration: underline;",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	link4 = new Link({
			props: {
				href: `/form/builder?formId=${/*form*/ ctx[6].id}`,
				style: "font-weight: 400;",
				class: "btn btn-xs btn-outline-dark",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	function click_handler(...args) {
		return /*click_handler*/ ctx[4](/*form*/ ctx[6], ...args);
	}

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[5](/*form*/ ctx[6], ...args);
	}

	return {
		c() {
			li = element("li");
			div2 = element("div");
			div0 = element("div");
			h3 = element("h3");
			create_component(link0.$$.fragment);
			t0 = space();
			small = element("small");
			create_component(link1.$$.fragment);
			t1 = space();
			span0 = element("span");
			span0.textContent = "|";
			t3 = space();
			create_component(link2.$$.fragment);
			t4 = space();
			span1 = element("span");
			span1.textContent = "|";
			t6 = space();
			create_component(link3.$$.fragment);
			t7 = space();
			div1 = element("div");
			create_component(link4.$$.fragment);
			t8 = space();
			button0 = element("button");
			button0.textContent = "Move";
			t10 = space();
			button1 = element("button");
			span2 = element("span");
			t11 = space();
			attr(h3, "class", "h6 mb-1");
			attr(small, "class", "text-gray-700");
			attr(div0, "class", "col");
			attr(button0, "class", "btn btn-xs btn-outline-dark");
			attr(span2, "class", "fas fa-trash");
			attr(button1, "class", "btn btn-xs btn-outline-dark");
			attr(div1, "class", "col-auto");
			attr(div2, "class", "row align-items-center");
			attr(li, "class", "list-group-item border-bottom py-3 radius-0 svelte-ie0b39");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div2);
			append(div2, div0);
			append(div0, h3);
			mount_component(link0, h3, null);
			append(div0, t0);
			append(div0, small);
			mount_component(link1, small, null);
			append(small, t1);
			append(small, span0);
			append(small, t3);
			mount_component(link2, small, null);
			append(small, t4);
			append(small, span1);
			append(small, t6);
			mount_component(link3, small, null);
			append(div2, t7);
			append(div2, div1);
			mount_component(link4, div1, null);
			append(div1, t8);
			append(div1, button0);
			append(div1, t10);
			append(div1, button1);
			append(button1, span2);
			append(li, t11);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler),
					listen(span2, "click", click_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const link0_changes = {};
			if (dirty & /*forms*/ 1) link0_changes.href = `/form/builder?formId=${/*form*/ ctx[6].id}`;

			if (dirty & /*$$scope, forms*/ 513) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};
			if (dirty & /*forms*/ 1) link1_changes.href = `/form/submissions?formId=${/*form*/ ctx[6].id}`;

			if (dirty & /*$$scope, forms*/ 513) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
			const link2_changes = {};
			if (dirty & /*forms*/ 1) link2_changes.href = `/form/submissions?formId=${/*form*/ ctx[6].id}`;

			if (dirty & /*$$scope, forms*/ 513) {
				link2_changes.$$scope = { dirty, ctx };
			}

			link2.$set(link2_changes);
			const link3_changes = {};
			if (dirty & /*forms*/ 1) link3_changes.href = `/form/preview?formId=${/*form*/ ctx[6].id}`;

			if (dirty & /*$$scope*/ 512) {
				link3_changes.$$scope = { dirty, ctx };
			}

			link3.$set(link3_changes);
			const link4_changes = {};
			if (dirty & /*forms*/ 1) link4_changes.href = `/form/builder?formId=${/*form*/ ctx[6].id}`;

			if (dirty & /*$$scope*/ 512) {
				link4_changes.$$scope = { dirty, ctx };
			}

			link4.$set(link4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			transition_in(link2.$$.fragment, local);
			transition_in(link3.$$.fragment, local);
			transition_in(link4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			transition_out(link2.$$.fragment, local);
			transition_out(link3.$$.fragment, local);
			transition_out(link4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(link0);
			destroy_component(link1);
			destroy_component(link2);
			destroy_component(link3);
			destroy_component(link4);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let t;
	let div;
	let ul;
	let current;
	let if_block = /*moving*/ ctx[1] && create_if_block(ctx);
	let each_value = /*forms*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "list-group list-group-flush form-list svelte-ie0b39");
			attr(div, "class", "card-body px-0 pt-0");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*moving*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*moving*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*onDelete, forms, moveFolders*/ 5) {
				each_value = /*forms*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function onDelete(formId) {
	
}

function instance($$self, $$props, $$invalidate) {
	
	let { forms = [] } = $$props;
	let moving;

	function moveFolders(form) {
		$$invalidate(1, moving = form);
	}

	function onMoveComplete() {
		dispatch("forms_moved", moving.id);
		$$invalidate(1, moving = undefined);
	}

	const click_handler = form => moveFolders(form);

	const click_handler_1 = form => {
		onDelete(form.id || "");
	};

	$$self.$$set = $$props => {
		if ("forms" in $$props) $$invalidate(0, forms = $$props.forms);
	};

	return [forms, moving, moveFolders, onMoveComplete, click_handler, click_handler_1];
}

class FormList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { forms: 0 });
	}
}

export default FormList;