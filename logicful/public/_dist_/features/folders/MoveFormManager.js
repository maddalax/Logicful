/* src/features/folders/MoveFormManager.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import Dialog from "../../components/layout/Dialog.js";
import { getApi } from "../../services/ApiService.js";
import { onMount } from "../../../web_modules/svelte.js";
import { saveForm } from "../form/edit/services/SaveForm.js";
import { getFolders } from "./FolderService.js";
import MoveForm from "./MoveForm.js";

function create_default_slot(ctx) {
	let moveform;
	let current;

	moveform = new MoveForm({
			props: {
				folders: /*folders*/ ctx[1],
				selected: /*selected*/ ctx[2],
				onSelected: /*onSelected*/ ctx[3]
			}
		});

	return {
		c() {
			create_component(moveform.$$.fragment);
		},
		m(target, anchor) {
			mount_component(moveform, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const moveform_changes = {};
			if (dirty & /*folders*/ 2) moveform_changes.folders = /*folders*/ ctx[1];
			if (dirty & /*selected*/ 4) moveform_changes.selected = /*selected*/ ctx[2];
			moveform.$set(moveform_changes);
		},
		i(local) {
			if (current) return;
			transition_in(moveform.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(moveform.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(moveform, detaching);
		}
	};
}

function create_fragment(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				isOpen: true,
				onClose: /*onClose*/ ctx[0],
				title: "Select Folder To Move Form(s)",
				getActions: /*getActions*/ ctx[4],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const dialog_changes = {};
			if (dirty & /*onClose*/ 1) dialog_changes.onClose = /*onClose*/ ctx[0];

			if (dirty & /*$$scope, folders, selected*/ 262) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	
	
	let { onClose } = $$props;
	let { forms } = $$props;
	let folders = {};
	let selected = "";
	let name = "";

	function onSelected(folder) {
		$$invalidate(2, selected = folder.id);
		name = folder.name;
	}

	async function moveForms() {
		const promises = forms.map(f => {
			return getApi(`form/${f.id}`);
		});

		const fullForms = await Promise.all(promises);

		const saves = fullForms.map(f => {
			f.folder = selected;
			return saveForm({ dispatchEvent: false }, f);
		});

		await Promise.all(saves);
	}

	function getActions() {
		let actions = [
			{
				type: "primary",
				onClick: moveForms,
				label: "Move Form(s) to " + name + " Folder"
			}
		];

		return actions;
	}

	onMount(async () => {
		$$invalidate(1, folders = await getFolders(true));
		onSelected(folders[Object.keys(folders)[0]]);
	});

	$$self.$$set = $$props => {
		if ("onClose" in $$props) $$invalidate(0, onClose = $$props.onClose);
		if ("forms" in $$props) $$invalidate(5, forms = $$props.forms);
	};

	return [onClose, folders, selected, onSelected, getActions, forms];
}

class MoveFormManager extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { onClose: 0, forms: 5 });
	}
}

export default MoveFormManager;