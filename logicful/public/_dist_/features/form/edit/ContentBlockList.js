/* src/features/form/edit/ContentBlockList.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	init,
	mount_component,
	noop,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import RemoteTable from "../../../components/RemoteTable.js";
import { dispatch } from "../../../event/EventBus.js";
import ManageContentBlock from "./ManageContentBlock.js";
import { getApi } from "../../../services/ApiService.js";

function create_fragment(ctx) {
	let remotetable;
	let current;

	remotetable = new RemoteTable({
			props: {
				headerActions: [
					{
						label: "+ New Content Block",
						onClick: /*createNew*/ ctx[0]
					}
				],
				getRows: /*getRows*/ ctx[1],
				hidden: /*hidden*/ ctx[2],
				onEdit: /*func*/ ctx[4],
				onDelete: /*func_1*/ ctx[5]
			}
		});

	return {
		c() {
			create_component(remotetable.$$.fragment);
		},
		m(target, anchor) {
			mount_component(remotetable, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(remotetable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(remotetable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(remotetable, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { type = "Selector" } = $$props;

	function createNew() {
		dispatch("dialog_push", {
			child: ManageContentBlock,
			title: "New Content Block",
			save: false,
			props: { isNew: true }
		});
	}

	async function getRows() {
		const blocks = await getApi("content-block");

		return blocks.map(block => {
			return {
				id: block.id,
				Name: block.name,
				Value: block.value,
				"Last Updated": new Date(block.changeTime ?? new Date()).toLocaleString(),
				"Modified By": block.changeBy,
				"Forms Using": 3,
				Status: "Published"
			};
		});
	}

	const hidden = new Set(["Value", "id"]);

	const func = async row => {
		dispatch("dialog_push", {
			child: ManageContentBlock,
			title: "Modifying Content Block",
			save: false,
			props: { id: row.id }
		});
	};

	const func_1 = () => {
		alert("delete");
	};

	$$self.$$set = $$props => {
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
	};

	return [createNew, getRows, hidden, type, func, func_1];
}

class ContentBlockList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { type: 3 });
	}
}

export default ContentBlockList;