import './DynamicForm.css.proxy.js';
/* src/features/form/edit/DynamicForm.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	outro_and_destroy_block,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../../web_modules/svelte/internal.js";

import Field from "./Field.js";
import { subscribeFieldChange } from "../../../event/FieldEvent.js";
import { DynamicFormMode } from "../../../components/models/ComponentProps.js";
import { dispatch, subscribeComponent } from "../../../event/EventBus.js";
import { LogicBuilder } from "../../../services/LogicBuilder.js";
import { fastClone } from "../../../util/Compare.js";
import { onMount } from "../../../../web_modules/svelte.js";
import Dialog from "../../../components/layout/Dialog.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (58:0) {#if deleting}
function create_if_block_1(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				title: "Confirm Deletion",
				isOpen: true,
				actions: [
					{
						label: `Delete Field`,
						type: "danger",
						onClick: /*onDelete*/ ctx[3],
						focus: true
					},
					{ label: "Cancel", type: "secondary" }
				],
				onClose: /*func*/ ctx[5],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};
			if (dirty & /*deleting*/ 2) dialog_changes.onClose = /*func*/ ctx[5];

			if (dirty & /*$$scope*/ 512) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (59:2) <Dialog     title={'Confirm Deletion'}     isOpen={true}     actions={[{ label: `Delete Field`, type: 'danger', onClick: onDelete, focus: true }, { label: 'Cancel', type: 'secondary' }]}     onClose={() => {       deleting = false     }}   >
function create_default_slot(ctx) {
	let p0;
	let t1;
	let p1;

	return {
		c() {
			p0 = element("p");
			p0.textContent = "Are you sure you want to delete this field? Deletion is permanent and cannot be reversed.";
			t1 = space();
			p1 = element("p");
			p1.textContent = "Changes will be applied after the form is saved.";
		},
		m(target, anchor) {
			insert(target, p0, anchor);
			insert(target, t1, anchor);
			insert(target, p1, anchor);
		},
		d(detaching) {
			if (detaching) detach(p0);
			if (detaching) detach(t1);
			if (detaching) detach(p1);
		}
	};
}

// (89:6) {:else}
function create_else_block(ctx) {
	let div;
	let field;
	let t;
	let div_id_value;
	let current;

	field = new Field({
			props: {
				field: fastClone(/*field*/ ctx[6]),
				hidden: true
			}
		});

	return {
		c() {
			div = element("div");
			create_component(field.$$.fragment);
			t = space();
			attr(div, "id", div_id_value = `form-field-${/*field*/ ctx[6].id}`);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(field, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const field_changes = {};
			if (dirty & /*form*/ 1) field_changes.field = fastClone(/*field*/ ctx[6]);
			field.$set(field_changes);

			if (!current || dirty & /*form*/ 1 && div_id_value !== (div_id_value = `form-field-${/*field*/ ctx[6].id}`)) {
				attr(div, "id", div_id_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(field.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(field);
		}
	};
}

// (85:6) {#if display(field)}
function create_if_block(ctx) {
	let div;
	let field;
	let t;
	let div_id_value;
	let current;

	field = new Field({
			props: { field: fastClone(/*field*/ ctx[6]) }
		});

	return {
		c() {
			div = element("div");
			create_component(field.$$.fragment);
			t = space();
			attr(div, "id", div_id_value = `form-field-${/*field*/ ctx[6].id}`);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(field, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const field_changes = {};
			if (dirty & /*form*/ 1) field_changes.field = fastClone(/*field*/ ctx[6]);
			field.$set(field_changes);

			if (!current || dirty & /*form*/ 1 && div_id_value !== (div_id_value = `form-field-${/*field*/ ctx[6].id}`)) {
				attr(div, "id", div_id_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(field.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(field);
		}
	};
}

// (84:4) {#each form.fields as field (field.id)}
function create_each_block(key_1, ctx) {
	let first;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*form*/ 1) show_if = !!/*display*/ ctx[2](/*field*/ ctx[6]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let t0;
	let div2;
	let div0;
	let h4;
	let t1_value = (/*form*/ ctx[0].title || "Form Title") + "";
	let t1;
	let t2;
	let small;
	let t3_value = (/*form*/ ctx[0].description ?? "") + "";
	let t3;
	let t4;
	let div1;
	let a0;
	let t5;
	let a0_href_value;
	let t6;
	let a1;
	let t7;
	let a1_href_value;
	let t8;
	let hr;
	let t9;
	let form_1;
	let div3;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let if_block = /*deleting*/ ctx[1] && create_if_block_1(ctx);
	let each_value = /*form*/ ctx[0].fields;
	const get_key = ctx => /*field*/ ctx[6].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			h4 = element("h4");
			t1 = text(t1_value);
			t2 = space();
			small = element("small");
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");
			a0 = element("a");
			t5 = text("Submissions");
			t6 = space();
			a1 = element("a");
			t7 = text("Preview");
			t8 = space();
			hr = element("hr");
			t9 = space();
			form_1 = element("form");
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(small, "class", "text-gray-700");
			attr(div0, "class", "col");
			attr(a0, "href", a0_href_value = `/form/submissions?formId=${/*form*/ ctx[0].id}`);
			attr(a0, "target", "_blank");
			attr(a0, "class", "btn btn-xs btn-outline-dark");
			attr(a1, "href", a1_href_value = `/form/preview?formId=${/*form*/ ctx[0].id}&mode=local`);
			attr(a1, "target", "_blank");
			attr(a1, "class", "btn btn-xs btn-outline-dark");
			attr(div1, "class", "col-auto");
			set_style(div1, "text-align", "right");
			attr(div2, "class", "row");
			set_style(div2, "padding-left", "0.5em");
			set_style(div2, "display", "flex");
			set_style(hr, "margin-top", "0.5rem");
			set_style(hr, "margin-bottom", "0.7rem");
			set_style(div3, "padding-bottom", "1em");
			attr(div3, "id", "form-preview-fields");
			attr(form_1, "class", "preview-padding");
			attr(form_1, "id", "form-preview");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, h4);
			append(h4, t1);
			append(div0, t2);
			append(div0, small);
			append(small, t3);
			append(div2, t4);
			append(div2, div1);
			append(div1, a0);
			append(a0, t5);
			append(div1, t6);
			append(div1, a1);
			append(a1, t7);
			insert(target, t8, anchor);
			insert(target, hr, anchor);
			insert(target, t9, anchor);
			insert(target, form_1, anchor);
			append(form_1, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*deleting*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*deleting*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*form*/ 1) && t1_value !== (t1_value = (/*form*/ ctx[0].title || "Form Title") + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*form*/ 1) && t3_value !== (t3_value = (/*form*/ ctx[0].description ?? "") + "")) set_data(t3, t3_value);

			if (!current || dirty & /*form*/ 1 && a0_href_value !== (a0_href_value = `/form/submissions?formId=${/*form*/ ctx[0].id}`)) {
				attr(a0, "href", a0_href_value);
			}

			if (!current || dirty & /*form*/ 1 && a1_href_value !== (a1_href_value = `/form/preview?formId=${/*form*/ ctx[0].id}&mode=local`)) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*form, fastClone, display*/ 5) {
				const each_value = /*form*/ ctx[0].fields;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div3, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div2);
			if (detaching) detach(t8);
			if (detaching) detach(hr);
			if (detaching) detach(t9);
			if (detaching) detach(form_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { form } = $$props;
	let { mode = DynamicFormMode.Live } = $$props;
	let deleting = false;

	subscribeComponent("confirm_field_deletion", () => {
		$$invalidate(1, deleting = true);
	});

	subscribeFieldChange(onMount, updatedField => {
		if (!form || !form.fields) {
			return;
		}

		const index = form.fields.findIndex(w => w.id === updatedField.id);

		if (index === -1) {
			return;
		}

		$$invalidate(0, form.fields[index].updated = !form.fields[index].updated, form);

		const fieldsWithRules = form.fields.filter(w => {
			if (!w.logic || !w.logic.rules) {
				return false;
			}

			const hasRule = w.logic.rules.find(rule => rule.field === updatedField.id);
			return hasRule != null;
		});

		for (let fieldWithRule of fieldsWithRules) {
			let ruleIndex = form.fields.findIndex(w => w.id === fieldWithRule.id);
			$$invalidate(0, form.fields[ruleIndex].updated = !form.fields[ruleIndex].updated, form);
		}
	});

	function display(field) {
		if (!form.enableLogic) {
			return true;
		}

		if (!field.logic) {
			return true;
		}

		const builder = new LogicBuilder();
		return builder.evaluate(field);
	}

	function onDelete() {
		const selected = form.fields.find(w => w.selected);

		if (selected) {
			dispatch("field_delete", { field: selected });
		}
	}

	const func = () => {
		$$invalidate(1, deleting = false);
	};

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("mode" in $$props) $$invalidate(4, mode = $$props.mode);
	};

	return [form, deleting, display, onDelete, mode, func];
}

class DynamicForm extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { form: 0, mode: 4 });
	}
}

export default DynamicForm;