import './FormSidebar.css.proxy.js';
/* src/features/form/edit/FormSidebar.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_style,
	space
} from "../../../../web_modules/svelte/internal.js";

import { dispatch, subscribeComponent } from "../../../event/EventBus.js";
import { flip } from "../../../../web_modules/svelte/animate.js";
import { randomString } from "../../../util/Generate.js";
import { onMount, tick } from "../../../../web_modules/svelte.js";
import FieldEdit from "./FieldEdit.js";
import { slide } from "../../../../web_modules/svelte/transition.js";
import { subscribeFieldChange } from "../../../event/FieldEvent.js";
import { fastClone } from "../../../util/Compare.js";
import { transformDraggedElement } from "./util/Draggable.js";
import { debounce } from "../../../util/Debounce.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

// (171:2) {:else}
function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Save Form";
			attr(button, "class", "btn save-button btn-primary svelte-1ture1");
			attr(button, "type", "button");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*saveDraft*/ ctx[5]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (166:19) 
function create_if_block_13(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Saving...";
			attr(button, "class", "btn save-button btn-primary svelte-1ture1");
			attr(button, "type", "button");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (161:18) 
function create_if_block_12(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Saved";
			attr(button, "class", "btn save-button btn-primary svelte-1ture1");
			attr(button, "type", "button");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (156:2) {#if !loaded}
function create_if_block_11(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Loading...";
			attr(button, "class", "btn save-button btn-primary svelte-1ture1");
			attr(button, "type", "button");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (294:47) 
function create_if_block_10(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-dot-circle"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Radio Buttons</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (283:50) 
function create_if_block_9(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="far fa-check-square"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Checkboxes</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (272:45) 
function create_if_block_8(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="far fa-address-card"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Full Name</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (261:43) 
function create_if_block_7(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="far fa-address-card"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Address Block</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (250:40) 
function create_if_block_6(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-file-upload"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">File Upload</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (239:40) 
function create_if_block_5(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-calendar-day"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Date</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (228:41) 
function create_if_block_4(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-indent"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Content</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (217:44) 
function create_if_block_3(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="far fa-caret-square-down"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Dropdown</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (206:42) 
function create_if_block_2(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-toggle-off"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Toggle</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (195:42) 
function create_if_block_1(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-rocket"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Spacer</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (184:8) {#if block.name === 'string'}
function create_if_block(ctx) {
	let div3;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fas fa-i-cursor"></span></div></div> 
            <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Text Input</h6></div>`;

			attr(div3, "class", "d-flex px-2 block svelte-1ture1");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

// (182:4) {#each blocks as block}
function create_each_block(ctx) {
	let div;
	let t;
	let div_id_value;
	let mounted;
	let dispose;

	function select_block_type_1(ctx, dirty) {
		if (/*block*/ ctx[11].name === "string") return create_if_block;
		if (/*block*/ ctx[11].name === "spacer") return create_if_block_1;
		if (/*block*/ ctx[11].name === "switch") return create_if_block_2;
		if (/*block*/ ctx[11].name === "combobox") return create_if_block_3;
		if (/*block*/ ctx[11].name === "block") return create_if_block_4;
		if (/*block*/ ctx[11].name === "date") return create_if_block_5;
		if (/*block*/ ctx[11].name === "file") return create_if_block_6;
		if (/*block*/ ctx[11].name === "address") return create_if_block_7;
		if (/*block*/ ctx[11].name === "full-name") return create_if_block_8;
		if (/*block*/ ctx[11].name === "checkbox-group") return create_if_block_9;
		if (/*block*/ ctx[11].name === "radio-group") return create_if_block_10;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	function click_handler(...args) {
		return /*click_handler*/ ctx[6](/*block*/ ctx[11], ...args);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			attr(div, "id", div_id_value = "sidebar-block-" + /*block*/ ctx[11].name);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(div);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let t0;
	let div15;
	let h5;
	let t2;
	let hr;
	let t3;
	let div1;
	let t4;
	let div8;
	let t9;
	let div14;

	function select_block_type(ctx, dirty) {
		if (!/*loaded*/ ctx[2]) return create_if_block_11;
		if (/*saved*/ ctx[1]) return create_if_block_12;
		if (/*saving*/ ctx[0]) return create_if_block_13;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);
	let each_value = /*blocks*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div0 = element("div");
			if_block.c();
			t0 = space();
			div15 = element("div");
			h5 = element("h5");
			h5.textContent = "Add Field";
			t2 = space();
			hr = element("hr");
			t3 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div8 = element("div");

			div8.innerHTML = `<div><div class="icon icon-sm icon-secondary"><span class="fas fa-palette"></span></div></div> 
    <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Styling</h6></div> 
    <div class="pl-3 svelte-1ture1"></div> 
    <div><div class="icon icon-sm icon-secondary link-arrow"><span class="fas fa-chevron-right" style="font-size: 1em;"></span></div></div>`;

			t9 = space();
			div14 = element("div");

			div14.innerHTML = `<div class="multi-level collapse" role="list" id="submenu-app" aria-expanded="false" style="padding-top:0.5em; padding-left: 1em;"><ul class="flex-column nav"><li class="nav-item"><a class="nav-link" id="address" href="#" style="padding-left: 0em;"><div class="d-flex px-2 block svelte-1ture1"><div><div class="icon icon-sm icon-secondary"><span class="fas fa-rocket"></span></div></div> 
              <div class="pl-3 svelte-1ture1"><h6 class="h6 svelte-1ture1">Spacer</h6></div></div></a></li></ul></div>`;

			set_style(div0, "text-align", "center");
			set_style(hr, "margin-right", "0.7em", 1);
			attr(div1, "id", "block-container");
			attr(div8, "class", "d-flex px-2 collapsed");
			attr(div8, "href", "#submenu-app");
			attr(div8, "data-toggle", "collapse");
			attr(div8, "data-target", "#submenu-app");
			attr(div8, "aria-expanded", "false");
			set_style(div15, "padding-left", "0.2em");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			if_block.m(div0, null);
			insert(target, t0, anchor);
			insert(target, div15, anchor);
			append(div15, h5);
			append(div15, t2);
			append(div15, hr);
			append(div15, t3);
			append(div15, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(div15, t4);
			append(div15, div8);
			append(div15, t9);
			append(div15, div14);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			if (dirty & /*blocks, addField*/ 24) {
				each_value = /*blocks*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div0);
			if_block.d();
			if (detaching) detach(t0);
			if (detaching) detach(div15);
			destroy_each(each_blocks, detaching);
		}
	};
}

function defaultBlocks() {
	return [
		{ name: "string" },
		{ name: "switch" },
		{ name: "spacer" },
		{ name: "date" },
		{ name: "block" },
		{ name: "file" },
		{ name: "address" },
		{ name: "checkbox-group" },
		{ name: "radio-group" },
		{ name: "full-name" }
	];
}

function saveAndPublish() {
	
}

function instance($$self, $$props, $$invalidate) {
	let saving = false;
	let saved = false;
	let loaded = false;
	let drake = null;
	let dragula;
	let shouldReload = true;
	let blocks = defaultBlocks();

	const loadDragula = debounce(
		async () => {
			shouldReload = true;

			if (!dragula) {
				dragula = (await import("../../../../web_modules/dragula.js")).default;
				await tick();
			}

			if (drake) {
				drake.destroy();
			}

			await tick();

			drake = dragula(
				[
					document.querySelector("#block-container"),
					document.querySelector("#form-preview-fields")
				],
				{
					copy(el, source) {
						return source === document.getElementById("block-container");
					},
					accepts(el, target) {
						return target !== document.getElementById("block-container");
					}
				}
			).on("drag", function (el) {
				if (el.id && el.id.startsWith("form-field-")) {
					return;
				}

				const container = document.getElementById("form-preview-fields");

				if (container && !container.className?.includes("ex-over")) {
					container.className += " ex-over";
				}
			}).on("over", function (el, container) {
				if (el.id && el.id.startsWith("form-field-")) {
					return;
				}

				if (container.id === "form-preview-fields" && !container.className?.includes("ex-over")) {
					container.className += " ex-over";
				}

				dispatch("drag_over", container);
			}).on("drop", function (el) {
				console.log("drop");
				const container = document.getElementById("form-preview-fields");

				if (container) {
					container.className = container.className.replace("ex-over", "");
				}

				const fields = Array.from(document.querySelector("#form-preview-fields").childNodes).filter(w => w.id?.startsWith("sidebar-block") || w.id?.startsWith("form-field-"));
				el.remove();
				dispatch("drag_finished", fields);
			});
		},
		300
	);

	function addField(block) {
		dispatch("add_field", { type: block.name });
	}

	async function saveDraft() {
		$$invalidate(0, saving = true);
		await dispatch("save_form", { status: "draft" });
		$$invalidate(0, saving = false);
	}

	subscribeComponent("form_saved", () => {
		$$invalidate(1, saved = true);

		setTimeout(
			() => {
				$$invalidate(1, saved = false);
			},
			1500
		);
	});

	subscribeComponent("reload_dragula", () => {
		loadDragula();
	});

	subscribeComponent("destroy_dragula", () => {
		shouldReload = false;

		requestAnimationFrame(() => {
			console.log("DESTROYING");

			if (drake) {
				drake.destroy();
			}
		});
	});

	subscribeComponent("form_updated", () => {
		if (shouldReload) {
			loadDragula();
		}
	});

	subscribeComponent("form_loaded", () => {
		$$invalidate(2, loaded = true);
		loadDragula();
	});

	onMount(async () => {
		import("../../../../web_modules/dragula/dist/dragula.css.proxy.js");
	});

	const click_handler = block => addField(block);
	return [saving, saved, loaded, blocks, addField, saveDraft, click_handler];
}

class FormSidebar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FormSidebar;