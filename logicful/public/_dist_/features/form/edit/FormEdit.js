/* src/features/form/edit/FormEdit.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import Field from "./Field.js";
import { randomString } from "../../../util/Generate.js";
import { onMount } from "../../../../web_modules/svelte.js";
import { dispatch, subscribe, subscribeComponent } from "../../../event/EventBus.js";
import formStore from "../../../store/FormStore.js";
import FormEditSettings from "./FormEditSettings.js";
import GroupEditSidebar from "./GroupEditSidebar.js";

function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<span class="sr-only">Loading...</span>`;
			attr(div, "class", "spinner-border");
			set_style(div, "width", "2rem");
			set_style(div, "height", "2rem");
			attr(div, "role", "status");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (27:0) {#if form}
function create_if_block(ctx) {
	let div1;
	let h5;
	let t1;
	let div0;
	let a;
	let i;
	let a_href_value;
	let t2;
	let hr;
	let t3;
	let div2;
	let field;
	let t4;
	let formeditsettings;
	let current;

	field = new Field({
			props: {
				field: {
					id: randomString(),
					type: "switch",
					label: "Enable Logic For Preview",
					value: {
						type: "local",
						value: /*form*/ ctx[0].enableLogic ?? true
					},
					configFieldTarget: "enableLogic",
					configTarget: "form"
				}
			}
		});

	formeditsettings = new FormEditSettings({ props: { form: /*form*/ ctx[0] } });

	return {
		c() {
			div1 = element("div");
			h5 = element("h5");
			h5.textContent = "Form Settings";
			t1 = space();
			div0 = element("div");
			a = element("a");
			i = element("i");
			t2 = space();
			hr = element("hr");
			t3 = space();
			div2 = element("div");
			create_component(field.$$.fragment);
			t4 = space();
			create_component(formeditsettings.$$.fragment);
			set_style(h5, "padding-bottom", "0.2em");
			attr(i, "class", "fas fa-cog");
			attr(a, "href", a_href_value = `/form-settings?formId=${/*form*/ ctx[0].id}`);
			attr(a, "target", "_blank");
			attr(a, "class", "");
			attr(div0, "class", "");
			set_style(div0, "padding", "0.75em 0.4em");
			set_style(div1, "padding-left", "0.5em");
			set_style(div1, "display", "flex");
			set_style(div2, "padding-right", "1.5em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h5);
			append(div1, t1);
			append(div1, div0);
			append(div0, a);
			append(a, i);
			append(div1, t2);
			append(div1, hr);
			insert(target, t3, anchor);
			insert(target, div2, anchor);
			mount_component(field, div2, null);
			append(div2, t4);
			mount_component(formeditsettings, div2, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*form*/ 1 && a_href_value !== (a_href_value = `/form-settings?formId=${/*form*/ ctx[0].id}`)) {
				attr(a, "href", a_href_value);
			}

			const field_changes = {};

			if (dirty & /*form*/ 1) field_changes.field = {
				id: randomString(),
				type: "switch",
				label: "Enable Logic For Preview",
				value: {
					type: "local",
					value: /*form*/ ctx[0].enableLogic ?? true
				},
				configFieldTarget: "enableLogic",
				configTarget: "form"
			};

			field.$set(field_changes);
			const formeditsettings_changes = {};
			if (dirty & /*form*/ 1) formeditsettings_changes.form = /*form*/ ctx[0];
			formeditsettings.$set(formeditsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field.$$.fragment, local);
			transition_in(formeditsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field.$$.fragment, local);
			transition_out(formeditsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t3);
			if (detaching) detach(div2);
			destroy_component(field);
			destroy_component(formeditsettings);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let form;

	subscribeComponent("form_updated", props => {
		$$invalidate(0, form = props);
	});

	subscribeComponent("form_loaded", props => {
		$$invalidate(0, form = props.form);
	});

	onMount(() => {
		const f = formStore.getForm();

		if (f.loaded) {
			$$invalidate(0, form = f);
		}
	});

	function onGroupSettings() {
		dispatch("show_right_sidebar", {
			component: GroupEditSidebar,
			groupId: "123"
		});
	}

	return [form];
}

class FormEdit extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FormEdit;