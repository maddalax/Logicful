/* src/features/form/edit/FormBuilder.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import { randomStringSmall, randomString } from "../../../util/Generate.js";
import { afterUpdate, onDestroy, onMount, tick } from "../../../../web_modules/svelte.js";
import { subscribeFieldChange } from "../../../event/FieldEvent.js";
import DynamicForm from "./DynamicForm.js";
import formStore from "../../../store/FormStore.js";
import { set } from "../../../util/Selection.js";
import { fastClone } from "../../../util/Compare.js";
import { saveForm, saveToLocalStorage } from "./services/SaveForm.js";
import ToastManager from "../../../components/ToastManager.js";
import { debounce } from "../../../util/Debounce.js";

import {
	setFieldDefaults
} from "./services/DefaultFieldValueFactory.js";

import { getApi } from "../../../services/ApiService.js";
import { getUrlParameter } from "../../../util/Http.js";
import { startPreviewSaver } from "./services/PreviewSaver.js";
import { DynamicFormMode } from "../../../components/models/ComponentProps.js";
import { dispatch, subscribeComponent } from "../../../event/EventBus.js";
import { navigate } from "../../../../web_modules/svelte-routing.js";

function create_else_block(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block_1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*dragForm*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			attr(div0, "class", "row");
			attr(div1, "class", "container");
			set_style(div1, "padding-left", "0.4em");
			set_style(div1, "padding-top", "0.5em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (249:2) {#if form == null || loadingActive}
function create_if_block(ctx) {
	let div2;

	return {
		c() {
			div2 = element("div");
			div2.innerHTML = `<div class="d-flex justify-content-center"><div class="spinner-border" style="width: 3rem; height: 3rem; margin-top: 2em" role="status"><span class="sr-only">Loading...</span></div></div>`;
			attr(div2, "class", "flex-column justify-content-center align-items-center");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (267:8) {:else}
function create_else_block_1(ctx) {
	let div;
	let dynamicform;
	let div_class_value;
	let current;

	dynamicform = new DynamicForm({
			props: {
				form: /*form*/ ctx[2],
				mode: DynamicFormMode.Preview
			}
		});

	return {
		c() {
			div = element("div");
			create_component(dynamicform.$$.fragment);
			attr(div, "class", div_class_value = "col-md no-gutters max-width");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(dynamicform, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const dynamicform_changes = {};
			if (dirty & /*form*/ 4) dynamicform_changes.form = /*form*/ ctx[2];
			dynamicform.$set(dynamicform_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dynamicform.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dynamicform.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(dynamicform);
		}
	};
}

// (263:8) {#if dragForm}
function create_if_block_1(ctx) {
	let div;
	let dynamicform;
	let div_class_value;
	let current;

	dynamicform = new DynamicForm({
			props: {
				form: /*dragForm*/ ctx[1],
				mode: DynamicFormMode.Preview
			}
		});

	return {
		c() {
			div = element("div");
			create_component(dynamicform.$$.fragment);
			attr(div, "class", div_class_value = "col-md no-gutters max-width");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(dynamicform, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const dynamicform_changes = {};
			if (dirty & /*dragForm*/ 2) dynamicform_changes.form = /*dragForm*/ ctx[1];
			dynamicform.$set(dynamicform_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dynamicform.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dynamicform.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(dynamicform);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let toastmanager;
	let t;
	let current_block_type_index;
	let if_block;
	let current;
	toastmanager = new ToastManager({});
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[2] == null || /*loadingActive*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			create_component(toastmanager.$$.fragment);
			t = space();
			if_block.c();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(toastmanager, div, null);
			append(div, t);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(toastmanager.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(toastmanager.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(toastmanager);
			if_blocks[current_block_type_index].d();
		}
	};
}

let dropped = false;
let lastLength = 0;

function instance($$self, $$props, $$invalidate) {
	
	
	let loadingActive = false;
	let order = [];
	let dragForm;
	let dirty = false;
	let form;

	async function loadForm() {
		$$invalidate(0, loadingActive = true);
		const formId = getUrlParameter("formId");

		if (!formId) {
			navigate("/form/create", { replace: true });
			return;
		}

		try {
			await loadFromApi(formId);

			if (!form) {
				return;
			}

			if (!form.fields) {
				$$invalidate(2, form.fields = [], form);
			}

			$$invalidate(
				2,
				form.fields = form.fields.map(w => {
					w.selected = false;
					return w;
				}),
				form
			);

			$$invalidate(2, form.loaded = true, form);
			formStore.setForm(form);
			dispatch("form_loaded", { form });
			saveToLocalStorage(form);
			startPreviewSaver();
		} finally {
			$$invalidate(0, loadingActive = false); //addPlaceHolder()
		}
	}

	async function loadFromApi(formId) {
		if (!formId) {
			return;
		}

		$$invalidate(2, form = await getApi(`form/${formId}`));
	}

	function removePlaceHolder() {
		const placeholder = form.fields.findIndex(w => w.type === "placeholder");

		if (placeholder !== -1) {
			const temp = fastClone(form.fields);
			temp.splice(placeholder, 1);
			$$invalidate(2, form.fields = temp, form);
			dispatch("form_placeholder_changed", { added: false });
		}
	}

	function addPlaceHolder() {
		if (form.fields.filter(w => w.type !== "placeholder").length !== 0) {
			removePlaceHolder();
			return;
		}

		if (form.fields.find(w => w.type === "placeholder")) {
			return;
		}

		$$invalidate(
			2,
			form.fields = form.fields.concat([
				{
					name: "placeholder-field",
					label: "You have no fields",
					type: "placeholder",
					id: "placeholder"
				}
			]),
			form
		);

		dispatch("form_placeholder_changed", { added: true });
	}

	subscribeComponent("form_updated", props => {
		$$invalidate(2, form = props);
		addPlaceHolder();
		dirty = true;
	});

	subscribeComponent("field_delete", params => {
		const index = form.fields.findIndex(w => w.id === params.field.id);
		const temp = [...form.fields];
		temp.splice(index, 1);
		$$invalidate(2, form.fields = temp, form);
		formStore.setForm(form);
	});

	subscribeComponent("right_sidebar_loaded", () => {
		form && dispatch("form_loaded", { form });
	});

	subscribeComponent("add_field", params => {
		$$invalidate(
			2,
			form.fields = form.fields.map(w => {
				w.selected = false;
				return w;
			}),
			form
		);

		const id = randomString();

		let field = {
			name: "new-field-" + randomStringSmall(),
			label: "New Field " + randomStringSmall(),
			type: params.type,
			id,
			selected: true,
			value: undefined,
			expanded: true
		};

		field = setFieldDefaults(field);
		$$invalidate(2, form.fields = form.fields.concat(field), form);
		removePlaceHolder();
		formStore.setForm(form);
	});

	subscribeComponent("field_clone", params => {
		const index = form.fields.findIndex(w => w.id === params.field.id);
		const copy = fastClone(form.fields[index]);
		copy.name = copy.name + "-" + randomStringSmall();
		copy.label = copy.label + " Copy";
		copy.id = randomString();
		copy.selected = true;
		const temp = fastClone(form.fields);
		temp.splice(index + 1, 0, copy);
		$$invalidate(2, form.fields = temp, form);
		formStore.set(copy);
	});

	subscribeComponent("save_form", async params => {
		await saveForm();
	});

	subscribeComponent("get_form_fields", () => {
		return form.fields;
	});

	subscribeComponent("drag_over", () => {
		removePlaceHolder();
	});

	subscribeComponent("drag_finished", async elements => {
		removePlaceHolder();

		let fields = elements.filter(w => w).map(e => {
			if (e.id === "form-field-placeholder") {
				return undefined;
			}

			if (e.id.startsWith("form-field-")) {
				const field = form.fields.find(w => w.id === e.id.replace("form-field-", ""));

				if (field) {
					field.selected = false;
				}

				return field;
			}

			if (e.id.startsWith("sidebar-block-")) {
				const type = e.id.replace("sidebar-block-", "");

				let field = {
					id: randomString(),
					type,
					name: "new-field-" + randomStringSmall(),
					label: "New Field " + randomStringSmall(),
					selected: true,
					value: undefined
				};

				field = setFieldDefaults(field);
				return field;
			}
		});

		fields = fields.filter(w => w != null);
		$$invalidate(2, form.fields = fastClone(fields), form);
		await dispatch("destroy_dragula", {});
		await tick();
		$$invalidate(1, dragForm = fastClone(form));
		formStore.setForm(form);
		await tick();
		$$invalidate(1, dragForm = undefined);

		if (form.fields.length === 0) {
			addPlaceHolder();
		}

		await tick();
		dispatch("reload_dragula", {});
	});

	subscribeFieldChange(onMount, newField => {
		if (!newField.selected) {
			return;
		}

		$$invalidate(
			2,
			form.fields = form.fields.map(f => {
				if (f.id !== newField.id && f.selected) {
					f.selected = false;
					formStore.set(f);
				}

				return f;
			}),
			form
		);
	});

	subscribeComponent("form_saved", f => {
		dirty = false;
	});

	subscribeComponent("form_updated", params => {
		$$invalidate(2, form = params);
	});

	subscribeComponent("document_click", () => {
		$$invalidate(
			2,
			form.fields = form.fields.map(f => {
				if (f.selected) {
					f.selected = false;
					formStore.set(f);
				}

				return f;
			}),
			form
		);
	});

	subscribeFieldChange(onMount, async field => {
		if (!form || !form.fields) {
			return;
		}

		dirty = true;
		const index = form.fields.findIndex(w => w.id === field.id);

		if (index !== -1) {
			$$invalidate(2, form.fields[index] = field, form);
		}
	});

	onMount(async () => {
		loadForm();
	});

	return [loadingActive, dragForm, form];
}

class FormBuilder extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FormBuilder;