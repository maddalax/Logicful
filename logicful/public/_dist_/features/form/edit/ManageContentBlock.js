/* src/features/form/edit/ManageContentBlock.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import { onMount } from "../../../../web_modules/svelte.js";
import Field from "./Field.js";
import { getUrlParameter } from "../../../util/Http.js";
import DropdownButton from "../../../components/DropdownButton.js";
import ContentBlockList from "./ContentBlockList.js";
import { dispatch } from "../../../event/EventBus.js";
import TextArea from "../../../inputs/TextArea.js";
import { randomString } from "../../../util/Generate.js";
import { getApi, postApi, putApi } from "../../../services/ApiService.js";

function create_else_block(ctx) {
	let div;
	let field0;
	let t;
	let field1;
	let current;

	field0 = new Field({
			props: {
				field: {
					id: `${/*block*/ ctx[0].id}-name`,
					type: "string",
					required: true,
					name: "name",
					label: "Name",
					placeholder: "Name",
					value: /*block*/ ctx[0].name,
					onChange: /*func*/ ctx[6]
				}
			}
		});

	field1 = new Field({
			props: {
				editor: true,
				config: { onChange: /*onChange*/ ctx[3] },
				field: {
					value: /*data*/ ctx[1],
					id: randomString(),
					name: /*block*/ ctx[0].name,
					type: "block-editor"
				}
			}
		});

	return {
		c() {
			div = element("div");
			create_component(field0.$$.fragment);
			t = space();
			create_component(field1.$$.fragment);
			set_style(div, "margin-top", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(field0, div, null);
			append(div, t);
			mount_component(field1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const field0_changes = {};

			if (dirty & /*block*/ 1) field0_changes.field = {
				id: `${/*block*/ ctx[0].id}-name`,
				type: "string",
				required: true,
				name: "name",
				label: "Name",
				placeholder: "Name",
				value: /*block*/ ctx[0].name,
				onChange: /*func*/ ctx[6]
			};

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*data, block*/ 3) field1_changes.field = {
				value: /*data*/ ctx[1],
				id: randomString(),
				name: /*block*/ ctx[0].name,
				type: "block-editor"
			};

			field1.$set(field1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(field0);
			destroy_component(field1);
		}
	};
}

// (77:2) {#if block == null}
function create_if_block(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-secondary" role="status"><span class="sr-only">Loading...</span></div>`;
			set_style(div1, "text-align", "center");
			set_style(div1, "padding-top", "1em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let current_block_type_index;
	let if_block;
	let t;
	let div0;
	let dropdownbutton;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*block*/ ctx[0] == null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	dropdownbutton = new DropdownButton({
			props: {
				label: "Save",
				processingLabel: "Saving...",
				actions: [
					{
						label: "Save as Draft",
						onClick: /*save*/ ctx[2]
					},
					{
						label: "Save and Publish",
						onClick: /*save*/ ctx[2]
					}
				]
			}
		});

	return {
		c() {
			div1 = element("div");
			if_block.c();
			t = space();
			div0 = element("div");
			create_component(dropdownbutton.$$.fragment);
			attr(div0, "class", "float-right");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if_blocks[current_block_type_index].m(div1, null);
			append(div1, t);
			append(div1, div0);
			mount_component(dropdownbutton, div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, t);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(dropdownbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(dropdownbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
			destroy_component(dropdownbutton);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let block;
	let data;
	let loading = false;
	let errored = false;
	let { id } = $$props;
	let { isNew } = $$props;

	onMount(async () => {
		if (!isNew) {
			await load();
		} else {
			$$invalidate(0, block = {});
		}
	});

	async function load() {
		loading = true;
		const blocks = await getApi("content-block");
		const result = blocks.find(w => w.id === id);

		if (!result) {
			return;
		}

		$$invalidate(1, data = await convertUrlToLocal(result));
		$$invalidate(0, block = result);
		loading = false;
	}

	async function convertUrlToLocal(block) {
		loading = true;

		try {
			const url = block.value;

			if (!url) {
				return [];
			}

			const response = await fetch(url);
			return await response.json();
		} catch(ex) {
			errored = true;
			return [];
		} finally {
			loading = false;
		}
	}

	async function save() {
		$$invalidate(0, block.value = await generateInlineUrl(), block);
		await postApi("content-block", block);
		dispatch("option_set_modified", block);

		dispatch("dialog_show", {
			child: ContentBlockList,
			closeOnOutsideClick: false,
			confirmCloseOnDirty: true,
			title: "Manage Content Blocks"
		});
	}

	async function generateInlineUrl() {
		const saveId = getUrlParameter("id", block.value);
		const qs = saveId ? `?id=${saveId}` : "";

		const { message } = qs
		? await putApi(`s3/json?${qs}`, data)
		: await postApi(`s3/json?${qs}`, data);

		return message;
	}

	function onChange(blockData) {
		$$invalidate(1, data = blockData);
	}

	const func = value => {
		$$invalidate(0, block.name = value, block);
	};

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(4, id = $$props.id);
		if ("isNew" in $$props) $$invalidate(5, isNew = $$props.isNew);
	};

	return [block, data, save, onChange, id, isNew, func];
}

class ManageContentBlock extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 4, isNew: 5 });
	}
}

export default ManageContentBlock;