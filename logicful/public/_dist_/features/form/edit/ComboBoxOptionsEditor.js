import './ComboBoxOptionsEditor.css.proxy.js';
/* src/features/form/edit/ComboBoxOptionsEditor.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import { dispatch } from "../../../event/EventBus.js";
import OptionSetsList from "./OptionSetsList.js";
import Field from "./Field.js";
import { randomString } from "../../../util/Generate.js";
import { apiEndpoint } from "../../../services/ApiService.js";

function create_fragment(ctx) {
	let div;
	let field_1;
	let t0;
	let button;
	let current;
	let mounted;
	let dispose;

	field_1 = new Field({
			props: {
				field: {
					id: randomString(),
					loadTransformer,
					required: true,
					label: "Option Set",
					value: /*field*/ ctx[0].options,
					name: `${/*field*/ ctx[0].id}-builder-config-field-field_editor-options`,
					type: "combobox",
					options: {
						type: "remote",
						value: `${apiEndpoint()}option-set`
					},
					configFieldTarget: "options",
					configTarget: /*field*/ ctx[0].id
				}
			}
		});

	return {
		c() {
			div = element("div");
			create_component(field_1.$$.fragment);
			t0 = space();
			button = element("button");
			button.textContent = "Manage Option Sets";
			attr(button, "class", "manage-button btn btn-light svelte-bh6pw2");
			attr(button, "type", "button");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(field_1, div, null);
			append(div, t0);
			append(div, button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*manageSets*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const field_1_changes = {};

			if (dirty & /*field*/ 1) field_1_changes.field = {
				id: randomString(),
				loadTransformer,
				required: true,
				label: "Option Set",
				value: /*field*/ ctx[0].options,
				name: `${/*field*/ ctx[0].id}-builder-config-field-field_editor-options`,
				type: "combobox",
				options: {
					type: "remote",
					value: `${apiEndpoint()}option-set`
				},
				configFieldTarget: "options",
				configTarget: /*field*/ ctx[0].id
			};

			field_1.$set(field_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(field_1);
			mounted = false;
			dispose();
		}
	};
}

function loadTransformer(value) {
	return value.map(v => {
		return { label: v.name, value: v.value };
	});
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;

	function manageSets() {
		dispatch("dialog_show", {
			child: OptionSetsList,
			closeOnOutsideClick: false,
			confirmCloseOnDirty: true,
			title: "Manage Option Sets",
			save: false
		});
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
	};

	return [field, manageSets];
}

class ComboBoxOptionsEditor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0 });
	}
}

export default ComboBoxOptionsEditor;