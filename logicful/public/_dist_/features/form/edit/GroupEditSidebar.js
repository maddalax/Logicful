/* src/features/form/edit/GroupEditSidebar.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import formStore from "../../../store/FormStore.js";
import { onMount } from "../../../../web_modules/svelte.js";
import { randomString } from "../../../util/Generate.js";
import Field from "./Field.js";

function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (22:0) {#if group}
function create_if_block(ctx) {
	let div0;
	let t2;
	let div1;
	let field;
	let current;

	field = new Field({
			props: {
				field: {
					id: randomString(),
					required: true,
					label: "Group Name",
					value: {
						type: "local",
						value: /*group*/ ctx[0].label
					},
					type: "string",
					configFieldTarget: `groups[${/*index*/ ctx[1]}].label`,
					configTarget: "form"
				}
			}
		});

	return {
		c() {
			div0 = element("div");

			div0.innerHTML = `<h5 style="padding-bottom: 0.2em;">Group Settings</h5> 
    <hr/>`;

			t2 = space();
			div1 = element("div");
			create_component(field.$$.fragment);
			set_style(div0, "padding-left", "0.5em");
			set_style(div1, "padding", ".75em 0.6em");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t2, anchor);
			insert(target, div1, anchor);
			mount_component(field, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const field_changes = {};

			if (dirty & /*group, index*/ 3) field_changes.field = {
				id: randomString(),
				required: true,
				label: "Group Name",
				value: {
					type: "local",
					value: /*group*/ ctx[0].label
				},
				type: "string",
				configFieldTarget: `groups[${/*index*/ ctx[1]}].label`,
				configTarget: "form"
			};

			field.$set(field_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t2);
			if (detaching) detach(div1);
			destroy_component(field);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*group*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { groupId } = $$props;
	let form;
	let group;
	let index;

	onMount(() => {
		form = formStore.getForm();
		let groups = form.groups ?? [];

		$$invalidate(1, index = groups.findIndex(group => {
			return group.value === groupId;
		}));

		$$invalidate(0, group = groups[index]);
		console.log("index", index);
	});

	$$self.$$set = $$props => {
		if ("groupId" in $$props) $$invalidate(2, groupId = $$props.groupId);
	};

	return [group, index, groupId];
}

class GroupEditSidebar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { groupId: 2 });
	}
}

export default GroupEditSidebar;