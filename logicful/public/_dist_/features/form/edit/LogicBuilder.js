/* src/features/form/edit/LogicBuilder.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import Field from "./Field.js";
import { randomString } from "../../../util/Generate.js";
import Repeater from "../../../components/Repeater.js";
import LogicRule from "../../../components/LogicRule.js";

function create_fragment(ctx) {
	let field_1;
	let t0;
	let hr;
	let t1;
	let logicrule;
	let current;

	field_1 = new Field({
			props: {
				field: {
					id: randomString(),
					label: "Select Action",
					helperText: "What should happen when all or some of your rules are matched.",
					value: {
						type: "local",
						value: /*field*/ ctx[0].logic?.action
					},
					type: "combobox",
					required: true,
					configFieldTarget: "logic.action",
					configTarget: /*field*/ ctx[0].id,
					options: { type: "local", value: /*actions*/ ctx[1] }
				},
				padding: false
			}
		});

	logicrule = new LogicRule({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(field_1.$$.fragment);
			t0 = space();
			hr = element("hr");
			t1 = space();
			create_component(logicrule.$$.fragment);
		},
		m(target, anchor) {
			mount_component(field_1, target, anchor);
			insert(target, t0, anchor);
			insert(target, hr, anchor);
			insert(target, t1, anchor);
			mount_component(logicrule, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const field_1_changes = {};

			if (dirty & /*field*/ 1) field_1_changes.field = {
				id: randomString(),
				label: "Select Action",
				helperText: "What should happen when all or some of your rules are matched.",
				value: {
					type: "local",
					value: /*field*/ ctx[0].logic?.action
				},
				type: "combobox",
				required: true,
				configFieldTarget: "logic.action",
				configTarget: /*field*/ ctx[0].id,
				options: { type: "local", value: /*actions*/ ctx[1] }
			};

			field_1.$set(field_1_changes);
			const logicrule_changes = {};
			if (dirty & /*field*/ 1) logicrule_changes.field = /*field*/ ctx[0];
			logicrule.$set(logicrule_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field_1.$$.fragment, local);
			transition_in(logicrule.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field_1.$$.fragment, local);
			transition_out(logicrule.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(field_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(hr);
			if (detaching) detach(t1);
			destroy_component(logicrule, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;

	const actions = [
		{
			label: "Show this field when all rule(s) match",
			value: "show-all-match"
		},
		{
			label: "Show this field when any rule(s) match",
			value: "show-any-match"
		},
		{
			label: "Hide this field when any rule(s) match",
			value: "hide-any-match"
		},
		{
			label: "Hide this field when all rule(s) match",
			value: "hide-all-match"
		}
	];

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
	};

	return [field, actions];
}

class LogicBuilder extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0 });
	}
}

export default LogicBuilder;