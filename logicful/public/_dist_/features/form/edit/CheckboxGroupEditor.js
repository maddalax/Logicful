/* src/features/form/edit/CheckboxGroupEditor.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import Field from "./Field.js";
import { randomString } from "../../../util/Generate.js";
import { dispatch } from "../../../event/EventBus.js";
import ContentBlockList from "./ContentBlockList.js";
import Repeater from "../../../components/Repeater.js";
import formStore from "../../../store/FormStore.js";
import { isEmptyOrNull } from "../../../util/Compare.js";

function create_fragment(ctx) {
	let div;
	let repeater;
	let t;
	let field_1;
	let current;

	repeater = new Repeater({
			props: {
				options: /*options*/ ctx[2](),
				onlyLabel: true,
				label: "Checkbox Options",
				onChange: /*onOptionsChange*/ ctx[1]
			}
		});

	field_1 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "switch",
					label: "Include 'Other' Option",
					value: {
						type: "local",
						value: /*field*/ ctx[0].includeOther || false
					},
					configFieldTarget: "includeOther",
					configTarget: /*field*/ ctx[0].id
				}
			}
		});

	return {
		c() {
			div = element("div");
			create_component(repeater.$$.fragment);
			t = space();
			create_component(field_1.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(repeater, div, null);
			append(div, t);
			mount_component(field_1, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const field_1_changes = {};

			if (dirty & /*field*/ 1) field_1_changes.field = {
				id: randomString(),
				type: "switch",
				label: "Include 'Other' Option",
				value: {
					type: "local",
					value: /*field*/ ctx[0].includeOther || false
				},
				configFieldTarget: "includeOther",
				configTarget: /*field*/ ctx[0].id
			};

			field_1.$set(field_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(repeater.$$.fragment, local);
			transition_in(field_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(repeater.$$.fragment, local);
			transition_out(field_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(repeater);
			destroy_component(field_1);
		}
	};
}

function loadTransformer(value) {
	return value.map(v => {
		return { label: v.name, value: v.value };
	});
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { field } = $$props;
	let { expanded } = $$props;

	function onOptionsChange(options) {
		if (options.length === 0) {
			options = ["Checkbox Item 1"];
		}

		$$invalidate(0, field.options = options, field);

		formStore.set(field, {
			fromUser: true,
			field: "options",
			value: options
		});
	}

	function options() {
		if (isEmptyOrNull(field.options)) {
			return [
				{
					label: "Checkbox Item 1",
					value: "Checkbox Item 1"
				}
			];
		}

		return field.options?.map(w => {
			return { label: w, value: w };
		});
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("expanded" in $$props) $$invalidate(3, expanded = $$props.expanded);
	};

	return [field, onOptionsChange, options, expanded];
}

class CheckboxGroupEditor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0, expanded: 3 });
	}
}

export default CheckboxGroupEditor;