/* src/features/form/edit/FieldEditSidebar.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	outro_and_destroy_block,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../../web_modules/svelte/internal.js";

import { onMount } from "../../../../web_modules/svelte.js";
import FieldEdit from "./FieldEdit.js";
import { subscribeComponent } from "../../../event/EventBus.js";
import { fade, slide } from "../../../../web_modules/svelte/transition.js";
import FormEdit from "./FormEdit.js";
import { dispatch } from "../../../event/EventBus.js";
import { subscribeFieldChange } from "../../../event/FieldEvent.js";
import { fastClone } from "../../../util/Compare.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (34:4) {:else}
function create_else_block(ctx) {
	let formedit;
	let current;
	formedit = new FormEdit({});

	return {
		c() {
			create_component(formedit.$$.fragment);
		},
		m(target, anchor) {
			mount_component(formedit, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(formedit.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formedit.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formedit, detaching);
		}
	};
}

// (28:4) {#if field}
function create_if_block(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = [/*field*/ ctx[0]];
	const get_key = ctx => /*fieldId*/ ctx[1];

	for (let i = 0; i < 1; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < 1; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < 1; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1) {
				const each_value = [/*field*/ ctx[0]];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < 1; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < 1; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < 1; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (29:6) {#each [field] as f (fieldId)}
function create_each_block(key_1, ctx) {
	let div;
	let fieldedit;
	let t;
	let div_transition;
	let current;
	fieldedit = new FieldEdit({ props: { field: /*f*/ ctx[2] } });

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			create_component(fieldedit.$$.fragment);
			t = space();
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(fieldedit, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const fieldedit_changes = {};
			if (dirty & /*field*/ 1) fieldedit_changes.field = /*f*/ ctx[2];
			fieldedit.$set(fieldedit_changes);
		},
		i(local) {
			if (current) return;
			transition_in(fieldedit.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 500 }, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(fieldedit.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 500 }, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(fieldedit);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*field*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			attr(div0, "class", "col-md no-gutters");
			set_style(div0, "padding-left", "0.55em");
			set_style(div0, "padding-right", "0.55em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let field;
	let fieldId;

	subscribeFieldChange(onMount, newField => {
		if (newField.id === fieldId && !newField.selected) {
			$$invalidate(0, field = undefined);
			$$invalidate(1, fieldId = undefined);
			return;
		}

		if (newField.selected) {
			$$invalidate(0, field = fastClone(newField));
			$$invalidate(1, fieldId = field.id);
		}
	});

	return [field, fieldId];
}

class FieldEditSidebar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FieldEditSidebar;