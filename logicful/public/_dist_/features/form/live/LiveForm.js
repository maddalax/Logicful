/* src/features/form/live/LiveForm.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	outro_and_destroy_block,
	prevent_default,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../../web_modules/svelte/internal.js";

import LiveField from "./LiveField.js";
import { subscribeFieldChange } from "../../../event/FieldEvent.js";
import formStore from "../../../store/FormStore.js";
import { LogicBuilder } from "../../../services/LogicBuilder.js";
import { fastClone } from "../../../util/Compare.js";
import { onMount } from "../../../../web_modules/svelte.js";
import { submitForm } from "./service/SubmitForm.js";
import { LoadState } from "../../../models/LoadState.js";
import { fade } from "../../../../web_modules/svelte/transition.js";
import { subscribeComponent } from "../../../event/EventBus.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (76:6) {:else}
function create_else_block_1(ctx) {
	let div;
	let livefield;
	let t;
	let current;

	livefield = new LiveField({
			props: {
				field: fastClone(/*field*/ ctx[6]),
				hidden: true
			}
		});

	return {
		c() {
			div = element("div");
			create_component(livefield.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(livefield, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const livefield_changes = {};
			if (dirty & /*form*/ 1) livefield_changes.field = fastClone(/*field*/ ctx[6]);
			livefield.$set(livefield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(livefield.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(livefield.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(livefield);
		}
	};
}

// (72:6) {#if display(field)}
function create_if_block_5(ctx) {
	let div;
	let livefield;
	let t;
	let div_transition;
	let current;

	livefield = new LiveField({
			props: { field: fastClone(/*field*/ ctx[6]) }
		});

	return {
		c() {
			div = element("div");
			create_component(livefield.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(livefield, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const livefield_changes = {};
			if (dirty & /*form*/ 1) livefield_changes.field = fastClone(/*field*/ ctx[6]);
			livefield.$set(livefield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(livefield.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(livefield.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(livefield);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (71:4) {#each form.fields as field (field.id)}
function create_each_block(key_1, ctx) {
	let first;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*form*/ 1) show_if = !!/*display*/ ctx[3](/*field*/ ctx[6]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (95:41) 
function create_if_block_4(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Submitted Successfully.";
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (87:40) 
function create_if_block_2(ctx) {
	let button;

	function select_block_type_2(ctx, dirty) {
		if (/*uploadingFiles*/ ctx[2]) return create_if_block_3;
		return create_else_block;
	}

	let current_block_type = select_block_type_2(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			button = element("button");
			if_block.c();
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if_block.m(button, null);
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_2(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			if_block.d();
		}
	};
}

// (85:39) 
function create_if_block_1(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Failed to Submit, Click To Try Again";
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "submit");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (83:2) {#if state === LoadState.NotStarted}
function create_if_block(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Submit";
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "submit");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (91:6) {:else}
function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("Submitting...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (89:6) {#if uploadingFiles}
function create_if_block_3(ctx) {
	let t;

	return {
		c() {
			t = text("Uploading Files...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let h4;
	let t0_value = (/*form*/ ctx[0].title ?? "Form Title") + "";
	let t0;
	let t1;
	let small;
	let t2_value = (/*form*/ ctx[0].description ?? "") + "";
	let t2;
	let t3;
	let hr;
	let t4;
	let form_1;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t5;
	let current;
	let mounted;
	let dispose;
	let each_value = /*form*/ ctx[0].fields;
	const get_key = ctx => /*field*/ ctx[6].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	function select_block_type_1(ctx, dirty) {
		if (/*state*/ ctx[1] === LoadState.NotStarted) return create_if_block;
		if (/*state*/ ctx[1] === LoadState.Failed) return create_if_block_1;
		if (/*state*/ ctx[1] === LoadState.Loading) return create_if_block_2;
		if (/*state*/ ctx[1] === LoadState.Finished) return create_if_block_4;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			div0 = element("div");
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			small = element("small");
			t2 = text(t2_value);
			t3 = space();
			hr = element("hr");
			t4 = space();
			form_1 = element("form");
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			if (if_block) if_block.c();
			attr(small, "class", "text-gray-700");
			set_style(div0, "padding-left", "0.5em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h4);
			append(h4, t0);
			append(div0, t1);
			append(div0, small);
			append(small, t2);
			append(div0, t3);
			append(div0, hr);
			insert(target, t4, anchor);
			insert(target, form_1, anchor);
			append(form_1, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(form_1, t5);
			if (if_block) if_block.m(form_1, null);
			current = true;

			if (!mounted) {
				dispose = listen(form_1, "submit", prevent_default(/*onSubmit*/ ctx[4]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*form*/ 1) && t0_value !== (t0_value = (/*form*/ ctx[0].title ?? "Form Title") + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*form*/ 1) && t2_value !== (t2_value = (/*form*/ ctx[0].description ?? "") + "")) set_data(t2, t2_value);

			if (dirty & /*fastClone, form, display*/ 9) {
				const each_value = /*form*/ ctx[0].fields;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(form_1, null);
				}
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t4);
			if (detaching) detach(form_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { form } = $$props;
	let { mode = "" } = $$props;
	let state = LoadState.NotStarted;
	let uploadingFiles = false;

	subscribeFieldChange(onMount, updatedField => {
		if (!form || !form.fields) {
			return;
		}

		const index = form.fields.findIndex(w => w.id === updatedField.id);

		if (index === -1) {
			return;
		}

		$$invalidate(0, form.fields[index].updated = !form.fields[index].updated, form);

		const fieldsWithRules = form.fields.filter(w => {
			if (!w.logic || !w.logic.rules) {
				return false;
			}

			const hasRule = w.logic.rules.find(rule => rule.field === updatedField.id);
			return hasRule != null;
		});

		for (let fieldWithRule of fieldsWithRules) {
			let ruleIndex = form.fields.findIndex(w => w.id === fieldWithRule.id);
			$$invalidate(0, form.fields[ruleIndex].updated = !form.fields[ruleIndex].updated, form);
		}
	});

	function display(field) {
		if (!field.logic) {
			return true;
		}

		const builder = new LogicBuilder();
		return builder.evaluate(field);
	}

	subscribeComponent("submission_uploading_files", () => {
		$$invalidate(2, uploadingFiles = true);
	});

	subscribeComponent("submission_uploading_files_finished", () => {
		$$invalidate(2, uploadingFiles = false);
	});

	async function onSubmit() {
		$$invalidate(1, state = LoadState.Loading);

		try {
			await submitForm();
			$$invalidate(1, state = LoadState.Finished);
		} catch(ex) {
			console.error(ex);
			$$invalidate(1, state = LoadState.Failed);
		}
	}

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("mode" in $$props) $$invalidate(5, mode = $$props.mode);
	};

	return [form, state, uploadingFiles, display, onSubmit, mode];
}

class LiveForm extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { form: 0, mode: 5 });
	}
}

export default LiveForm;