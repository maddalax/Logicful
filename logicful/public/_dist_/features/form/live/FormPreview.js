/* src/features/form/live/FormPreview.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import LiveForm from "./LiveForm.js";
import { getApi } from "../../../services/ApiService.js";
import formStore from "../../../store/FormStore.js";
import { onDestroy, onMount, tick } from "../../../../web_modules/svelte.js";
import { getUrlParameter } from "../../../util/Http.js";
import SubmissionPreview from "../../submissions/SubmissionPreview.js";

function create_if_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `You are viewing a live preview of how your form will display and act once it
    is published. This preview will <strong>live update</strong> when changes are
    made from the form builder, no save neeed. <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">Ã—</span></button>`;

			attr(div, "class", "alert alert-info alert-dismissible fade show");
			set_style(div, "border-radius", "0");
			attr(div, "role", "alert");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (85:6) {:else}
function create_else_block_1(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-dark" style="width: 3rem; height: 3rem;" role="status"><span class="sr-only">Loading...</span></div>`;
			attr(div1, "class", "d-flex justify-content-center");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (77:6) {#if form?.fields?.length > 0}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*mode*/ ctx[1] === "submission_preview") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (80:8) {:else}
function create_else_block(ctx) {
	let div;
	let liveform;
	let current;

	liveform = new LiveForm({
			props: {
				form: /*form*/ ctx[0],
				mode: /*mode*/ ctx[1]
			}
		});

	return {
		c() {
			div = element("div");
			create_component(liveform.$$.fragment);
			set_style(div, "margin-top", "2em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(liveform, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const liveform_changes = {};
			if (dirty & /*form*/ 1) liveform_changes.form = /*form*/ ctx[0];
			if (dirty & /*mode*/ 2) liveform_changes.mode = /*mode*/ ctx[1];
			liveform.$set(liveform_changes);
		},
		i(local) {
			if (current) return;
			transition_in(liveform.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(liveform.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(liveform);
		}
	};
}

// (78:8) {#if mode === 'submission_preview'}
function create_if_block_1(ctx) {
	let submissionpreview;
	let current;

	submissionpreview = new SubmissionPreview({
			props: {
				form: /*form*/ ctx[0],
				submission: /*submission*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(submissionpreview.$$.fragment);
		},
		m(target, anchor) {
			mount_component(submissionpreview, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const submissionpreview_changes = {};
			if (dirty & /*form*/ 1) submissionpreview_changes.form = /*form*/ ctx[0];
			if (dirty & /*submission*/ 4) submissionpreview_changes.submission = /*submission*/ ctx[2];
			submissionpreview.$set(submissionpreview_changes);
		},
		i(local) {
			if (current) return;
			transition_in(submissionpreview.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(submissionpreview.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(submissionpreview, detaching);
		}
	};
}

function create_fragment(ctx) {
	let t;
	let div2;
	let div1;
	let div0;
	let current_block_type_index;
	let if_block1;
	let current;
	let if_block0 = /*mode*/ ctx[1] === "local" && create_if_block_2(ctx);
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[0]?.fields?.length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if_block1.c();
			attr(div0, "class", "container");
			attr(div2, "class", "container");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*mode*/ ctx[1] === "local") {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div0, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(div2);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { submission = undefined } = $$props;
	let { form } = $$props;
	let formId = "";
	let { mode = "" } = $$props;

	onDestroy(() => {
		formStore.setForm({ fields: [] });
		$$invalidate(0, form = { fields: [] });
	});

	async function loadForm() {
		formId = getUrlParameter("formId") ?? "";

		if (!formId) {
			return;
		}

		//@ts-ignore
		$$invalidate(1, mode = getUrlParameter("mode") || mode);

		if (mode === "local") {
			const item = localStorage.getItem("form");

			if (!item) {
				return;
			}

			$$invalidate(0, form = JSON.parse(item));

			window.onstorage = e => {
				if (e.key === "form" && e.newValue) {
					$$invalidate(0, form = JSON.parse(e.newValue));
				}
			};
		} else {
			$$invalidate(0, form = await getApi(`form/${formId}`));
		}
	}

	onMount(async () => {
		formStore.setForm({ fields: [] });
		await tick();

		if (!form) {
			await loadForm();
		}

		if (submission) {
			Object.keys(submission.details).forEach(k => {
				const index = form.fields.findIndex(f => f.label === k || f.name === k);

				if (index !== -1) {
					$$invalidate(0, form.fields[index].value = submission.details[k], form);
				}
			});
		}

		await tick();
		formStore.setForm(form);
	});

	$$self.$$set = $$props => {
		if ("submission" in $$props) $$invalidate(2, submission = $$props.submission);
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("mode" in $$props) $$invalidate(1, mode = $$props.mode);
	};

	return [form, mode, submission];
}

class FormPreview extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { submission: 2, form: 0, mode: 1 });
	}
}

export default FormPreview;