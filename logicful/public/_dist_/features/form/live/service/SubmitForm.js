import f from"../../../../store/FormStore.js";import v from"../../../../../web_modules/bowser.js";import g from"../../../../../web_modules/traverse.js";import{isObject as m}from"../../../../guards/Guard.js";import{postApi as h}from"../../../../services/ApiService.js";import{dispatch as y}from"../../../../event/EventBus.js";const w=["block"];export async function submitForm(){const i=f.getForm();await uploadFiles(i);const r=i.id,u={},o={},d={},t=["name","value","type","id"];g(i).forEach(function(e){if(!this.key||this.key==="fields")return;if(m(e)){let a=!1;Object.keys(e).forEach(n=>{n==="value"&&(a=!0)}),a&&Object.keys(e).forEach(n=>{const l=e[n];if(n==="value")return;(m(l)||Array.isArray(l))&&delete e[n]})}if(m(e)||Array.isArray(e))return;if(!t.includes(this.key)){const a=this.path[this.path.length-2];if(a==="value")return;this.delete()}}),i.fields.forEach(e=>{if(e.name==null)return;if(w.includes(e.type))return;u[e.name]=e.value??e.defaultValue??null,o[e.name]||(o[e.name]={}),e.value==null&&(o[e.name].userSelectedValue=!1),o[e.name].type=e.type});try{d.env=v.getParser(window.navigator.userAgent).getResult()}catch(e){}const s={formId:r,details:u,fieldMeta:o,meta:d};await h(`form/${r}/submission`,s)}export async function uploadFiles(i){y("submission_uploading_files",{});const r=i.fields.filter(t=>t.type==="file"&&t.value),u=await r.map(t=>{const s=f.getFile(t.value.id);if(!s)throw new Error("Failed to get file for "+t.name);return h(`s3/put?length=${s.size}`,{})}),o=await Promise.all(u),d=o.map((t,s)=>{const e=r[s].id,a=f.getFile(r[s].value.id);if(!a)throw new Error("Failed to get file for "+r[s].name);const n=i.fields.findIndex(l=>l.id===e);return i.fields[n].value.id=t.key,new Promise((l,p)=>{fetch(t.url,{method:"PUT",body:a,headers:{"Content-Type":"application/octet-stream"}}).then(c=>{if(!c.ok)return p("Failed to upload file, please try again.");l()}).catch(c=>{p(c)})})});await Promise.all(d),y("submission_uploading_files_finished",{})}
