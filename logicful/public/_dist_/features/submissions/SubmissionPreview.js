/* src/features/submissions/SubmissionPreview.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	outro_and_destroy_block,
	prevent_default,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../web_modules/svelte/internal.js";

import { isObject, isString } from "../../guards/Guard.js";
import LiveField from "../form/live/LiveField.js";
import { subscribeFieldChange } from "../../event/FieldEvent.js";
import { LogicBuilder } from "../../services/LogicBuilder.js";
import { fastClone } from "../../util/Compare.js";
import { afterUpdate, onMount } from "../../../web_modules/svelte.js";
import { submitForm } from "../form/live/service/SubmitForm.js";
import { LoadState } from "../../models/LoadState.js";
import { fade } from "../../../web_modules/svelte/transition.js";
import { subscribeComponent } from "../../event/EventBus.js";
import { formatSubmissionItem } from "../../pages/form/FormSubmissionsPage.js";
import Loader from "../../components/Loader.js";
import { getApi, postApi } from "../../services/ApiService.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

// (138:0) {:else}
function create_else_block(ctx) {
	let t0;
	let div0;
	let h40;
	let t1_value = (/*form*/ ctx[0].title ?? "Form Title") + "";
	let t1;
	let t2;
	let small;
	let t3_value = (/*form*/ ctx[0].description ?? "") + "";
	let t3;
	let t4;
	let form_1;
	let div1;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t5;
	let h41;
	let t7;
	let hr0;
	let t8;
	let t9;
	let br;
	let t10;
	let h42;
	let t12;
	let hr1;
	let t13;
	let div2;
	let pre;
	let code;
	let current;
	let mounted;
	let dispose;
	let if_block = /*submission*/ ctx[1] && create_if_block_4(ctx);
	let each_value_1 = /*form*/ ctx[0].fields;
	const get_key = ctx => /*field*/ ctx[21].id;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
	}

	let each_value = Object.keys(/*submission*/ ctx[1]?.details ?? []).filter(/*func*/ ctx[12]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			div0 = element("div");
			h40 = element("h4");
			t1 = text(t1_value);
			t2 = space();
			small = element("small");
			t3 = text(t3_value);
			t4 = space();
			form_1 = element("form");
			div1 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t5 = space();
			h41 = element("h4");
			h41.innerHTML = `<strong>Raw Details</strong>`;
			t7 = space();
			hr0 = element("hr");
			t8 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t9 = space();
			br = element("br");
			t10 = space();
			h42 = element("h4");
			h42.innerHTML = `<strong>Raw JSON</strong>`;
			t12 = space();
			hr1 = element("hr");
			t13 = space();
			div2 = element("div");
			pre = element("pre");
			code = element("code");
			code.textContent = `${/*toRawJson*/ ctx[8]()}`;
			attr(small, "class", "text-gray-700");
			set_style(div0, "margin-top", "1.5em");
			set_style(div1, "padding-bottom", "1em");
			set_style(div2, "margin-top", "1em");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div0, anchor);
			append(div0, h40);
			append(h40, t1);
			append(div0, t2);
			append(div0, small);
			append(small, t3);
			insert(target, t4, anchor);
			insert(target, form_1, anchor);
			append(form_1, div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div1, null);
			}

			insert(target, t5, anchor);
			insert(target, h41, anchor);
			insert(target, t7, anchor);
			insert(target, hr0, anchor);
			insert(target, t8, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t9, anchor);
			insert(target, br, anchor);
			insert(target, t10, anchor);
			insert(target, h42, anchor);
			insert(target, t12, anchor);
			insert(target, hr1, anchor);
			insert(target, t13, anchor);
			insert(target, div2, anchor);
			append(div2, pre);
			append(pre, code);
			current = true;

			if (!mounted) {
				dispose = listen(form_1, "submit", prevent_default(/*onSubmit*/ ctx[10]));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*submission*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if ((!current || dirty & /*form*/ 1) && t1_value !== (t1_value = (/*form*/ ctx[0].title ?? "Form Title") + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*form*/ 1) && t3_value !== (t3_value = (/*form*/ ctx[0].description ?? "") + "")) set_data(t3, t3_value);

			if (dirty & /*fastClone, form, display*/ 513) {
				const each_value_1 = /*form*/ ctx[0].fields;
				group_outros();
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_1, each0_lookup, div1, outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
				check_outros();
			}

			if (dirty & /*downloadFile, fieldPerSubmissionDetail, Object, submission, hidden, downloading, formatDetail*/ 246) {
				each_value = Object.keys(/*submission*/ ctx[1]?.details ?? []).filter(/*func*/ ctx[12]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t9.parentNode, t9);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div0);
			if (detaching) detach(t4);
			if (detaching) detach(form_1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			if (detaching) detach(t5);
			if (detaching) detach(h41);
			if (detaching) detach(t7);
			if (detaching) detach(hr0);
			if (detaching) detach(t8);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t9);
			if (detaching) detach(br);
			if (detaching) detach(t10);
			if (detaching) detach(h42);
			if (detaching) detach(t12);
			if (detaching) detach(hr1);
			if (detaching) detach(t13);
			if (detaching) detach(div2);
			mounted = false;
			dispose();
		}
	};
}

// (136:0) {#if state === LoadState.Loading}
function create_if_block(ctx) {
	let loader;
	let current;
	loader = new Loader({});

	return {
		c() {
			create_component(loader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loader, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loader, detaching);
		}
	};
}

// (139:2) {#if submission}
function create_if_block_4(ctx) {
	let h40;
	let t1;
	let p0;
	let strong1;
	let t3;
	let t4_value = /*formatDetail*/ ctx[7]("Submission Date") + "";
	let t4;
	let t5;
	let br;
	let t6;
	let h41;
	let t8;
	let strong3;
	let t10_value = /*submission*/ ctx[1].meta?.ipAddress + "";
	let t10;
	let t11;
	let p1;
	let strong4;
	let t13_value = /*submission*/ ctx[1].meta?.env?.browser?.name + "";
	let t13;
	let t14;
	let t15_value = /*submission*/ ctx[1].meta?.env?.browser?.version + "";
	let t15;
	let t16;
	let p2;
	let strong5;
	let t18;
	let t19_value = /*submission*/ ctx[1].meta?.env?.os?.name + "";
	let t19;
	let t20;
	let t21_value = (/*submission*/ ctx[1].meta?.env?.os?.versionName ?? /*submission*/ ctx[1].meta?.env?.os?.version) + "";
	let t21;
	let t22;
	let p3;
	let strong6;
	let t24;
	let t25_value = /*submission*/ ctx[1].meta?.env?.platform?.vendor + "";
	let t25;
	let t26;
	let t27_value = /*submission*/ ctx[1].meta?.env?.platform?.type + "";
	let t27;

	return {
		c() {
			h40 = element("h4");
			h40.innerHTML = `<strong>General</strong>`;
			t1 = space();
			p0 = element("p");
			strong1 = element("strong");
			strong1.textContent = "Submission Date:";
			t3 = space();
			t4 = text(t4_value);
			t5 = space();
			br = element("br");
			t6 = space();
			h41 = element("h4");
			h41.innerHTML = `<strong>Environment Information</strong>`;
			t8 = space();
			strong3 = element("strong");
			strong3.textContent = "Ip Address: ";
			t10 = text(t10_value);
			t11 = space();
			p1 = element("p");
			strong4 = element("strong");
			strong4.textContent = "Browser: ";
			t13 = text(t13_value);
			t14 = space();
			t15 = text(t15_value);
			t16 = space();
			p2 = element("p");
			strong5 = element("strong");
			strong5.textContent = "OS:";
			t18 = space();
			t19 = text(t19_value);
			t20 = space();
			t21 = text(t21_value);
			t22 = space();
			p3 = element("p");
			strong6 = element("strong");
			strong6.textContent = "Platform:";
			t24 = space();
			t25 = text(t25_value);
			t26 = space();
			t27 = text(t27_value);
		},
		m(target, anchor) {
			insert(target, h40, anchor);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, strong1);
			append(p0, t3);
			append(p0, t4);
			insert(target, t5, anchor);
			insert(target, br, anchor);
			insert(target, t6, anchor);
			insert(target, h41, anchor);
			insert(target, t8, anchor);
			insert(target, strong3, anchor);
			insert(target, t10, anchor);
			insert(target, t11, anchor);
			insert(target, p1, anchor);
			append(p1, strong4);
			append(p1, t13);
			append(p1, t14);
			append(p1, t15);
			insert(target, t16, anchor);
			insert(target, p2, anchor);
			append(p2, strong5);
			append(p2, t18);
			append(p2, t19);
			append(p2, t20);
			append(p2, t21);
			insert(target, t22, anchor);
			insert(target, p3, anchor);
			append(p3, strong6);
			append(p3, t24);
			append(p3, t25);
			append(p3, t26);
			append(p3, t27);
		},
		p(ctx, dirty) {
			if (dirty & /*submission*/ 2 && t10_value !== (t10_value = /*submission*/ ctx[1].meta?.ipAddress + "")) set_data(t10, t10_value);
			if (dirty & /*submission*/ 2 && t13_value !== (t13_value = /*submission*/ ctx[1].meta?.env?.browser?.name + "")) set_data(t13, t13_value);
			if (dirty & /*submission*/ 2 && t15_value !== (t15_value = /*submission*/ ctx[1].meta?.env?.browser?.version + "")) set_data(t15, t15_value);
			if (dirty & /*submission*/ 2 && t19_value !== (t19_value = /*submission*/ ctx[1].meta?.env?.os?.name + "")) set_data(t19, t19_value);
			if (dirty & /*submission*/ 2 && t21_value !== (t21_value = (/*submission*/ ctx[1].meta?.env?.os?.versionName ?? /*submission*/ ctx[1].meta?.env?.os?.version) + "")) set_data(t21, t21_value);
			if (dirty & /*submission*/ 2 && t25_value !== (t25_value = /*submission*/ ctx[1].meta?.env?.platform?.vendor + "")) set_data(t25, t25_value);
			if (dirty & /*submission*/ 2 && t27_value !== (t27_value = /*submission*/ ctx[1].meta?.env?.platform?.type + "")) set_data(t27, t27_value);
		},
		d(detaching) {
			if (detaching) detach(h40);
			if (detaching) detach(t1);
			if (detaching) detach(p0);
			if (detaching) detach(t5);
			if (detaching) detach(br);
			if (detaching) detach(t6);
			if (detaching) detach(h41);
			if (detaching) detach(t8);
			if (detaching) detach(strong3);
			if (detaching) detach(t10);
			if (detaching) detach(t11);
			if (detaching) detach(p1);
			if (detaching) detach(t16);
			if (detaching) detach(p2);
			if (detaching) detach(t22);
			if (detaching) detach(p3);
		}
	};
}

// (172:8) {:else}
function create_else_block_2(ctx) {
	let div;
	let livefield;
	let t;
	let current;

	livefield = new LiveField({
			props: {
				field: fastClone(/*field*/ ctx[21]),
				hidden: true
			}
		});

	return {
		c() {
			div = element("div");
			create_component(livefield.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(livefield, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const livefield_changes = {};
			if (dirty & /*form*/ 1) livefield_changes.field = fastClone(/*field*/ ctx[21]);
			livefield.$set(livefield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(livefield.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(livefield.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(livefield);
		}
	};
}

// (168:8) {#if display(field)}
function create_if_block_3(ctx) {
	let div;
	let livefield;
	let t;
	let div_transition;
	let current;

	livefield = new LiveField({
			props: { field: fastClone(/*field*/ ctx[21]) }
		});

	return {
		c() {
			div = element("div");
			create_component(livefield.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(livefield, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const livefield_changes = {};
			if (dirty & /*form*/ 1) livefield_changes.field = fastClone(/*field*/ ctx[21]);
			livefield.$set(livefield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(livefield.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(livefield.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(livefield);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (167:6) {#each form.fields as field (field.id)}
function create_each_block_1(key_1, ctx) {
	let first;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_3, create_else_block_2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (dirty & /*form*/ 1) show_if = !!/*display*/ ctx[9](/*field*/ ctx[21]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (187:6) {#if fieldPerSubmissionDetail[d]?.type === 'file' && fieldPerSubmissionDetail[d].value}
function create_if_block_1(ctx) {
	let if_block_anchor;

	function select_block_type_2(ctx, dirty) {
		if (!/*downloading*/ ctx[4]) return create_if_block_2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_2(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (193:8) {:else}
function create_else_block_1(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Processing... file\n            will open in a new tab.";
			attr(button, "class", "btn btn-primary btn-sm");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (188:8) {#if !downloading}
function create_if_block_2(ctx) {
	let button;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[13](/*d*/ ctx[18], ...args);
	}

	return {
		c() {
			button = element("button");
			button.textContent = "Download\n            File";
			attr(button, "class", "btn btn-primary btn-sm");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (183:2) {#each Object.keys(submission?.details ?? []).filter((k) => !hidden.includes(k)) as d}
function create_each_block(ctx) {
	let div;
	let p0;
	let strong;
	let t0_value = (/*d*/ ctx[18] ?? "") + "";
	let t0;
	let t1;
	let p1;
	let t2_value = /*formatDetail*/ ctx[7](/*d*/ ctx[18]) + "";
	let t2;
	let t3;
	let if_block = /*fieldPerSubmissionDetail*/ ctx[2][/*d*/ ctx[18]]?.type === "file" && /*fieldPerSubmissionDetail*/ ctx[2][/*d*/ ctx[18]].value && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			p0 = element("p");
			strong = element("strong");
			t0 = text(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			if (if_block) if_block.c();
			set_style(div, "margin-top", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p0);
			append(p0, strong);
			append(strong, t0);
			append(div, t1);
			append(div, p1);
			append(p1, t2);
			append(div, t3);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (dirty & /*submission*/ 2 && t0_value !== (t0_value = (/*d*/ ctx[18] ?? "") + "")) set_data(t0, t0_value);
			if (dirty & /*submission*/ 2 && t2_value !== (t2_value = /*formatDetail*/ ctx[7](/*d*/ ctx[18]) + "")) set_data(t2, t2_value);

			if (/*fieldPerSubmissionDetail*/ ctx[2][/*d*/ ctx[18]]?.type === "file" && /*fieldPerSubmissionDetail*/ ctx[2][/*d*/ ctx[18]].value) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[3] === LoadState.Loading) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	
	let { submission } = $$props;
	let fieldPerSubmissionDetail = {};
	let { form } = $$props;
	let { mode = "" } = $$props;
	let state = LoadState.NotStarted;
	let downloading = false;
	let uploadingFiles = false;
	let error = "";
	let hidden = ["submission_id"];
	onMount(load);
	afterUpdate(load);

	function load() {
		$$invalidate(2, fieldPerSubmissionDetail = {});
		$$invalidate(3, state = LoadState.Loading);

		try {
			if (!submission) {
				return;
			}

			Object.keys(submission.details).forEach(d => {
				let field = fieldBySubmissionDetail(d);

				if (field) {
					$$invalidate(2, fieldPerSubmissionDetail[d] = field, fieldPerSubmissionDetail);
				}
			});
		} finally {
			$$invalidate(3, state = LoadState.Finished);
		}
	}

	async function downloadFile(field) {
		try {
			$$invalidate(4, downloading = true);
			const id = field.value.id;
			const result = await postApi(`form/${form.id}/submission/file/${id}`, field.value);
			window.open(result.message);
		} catch(ex) {
			error = ex.message;
		} finally {
			$$invalidate(4, downloading = false);
		}
	}

	function formatDetail(detail) {
		let value = submission?.details[detail];
		value = formatSubmissionItem(detail, value) ?? value;

		if (isObject(value) || Array.isArray(value)) {
			return JSON.stringify(value, null, 2);
		}

		return value ?? "";
	}

	function fieldBySubmissionDetail(detail) {
		return form.fields.find(w => w.label === detail || w.name === detail);
	}

	function toRawJson() {
		if (!submission) {
			return JSON.stringify({});
		}

		const clone = fastClone(submission);

		Object.keys(clone.details).forEach(d => {
			const field = fieldBySubmissionDetail(d);

			if (field) {
				const detail = fastClone(clone.details[d]);
				delete clone.details[d];
				clone.details[field.name] = detail;
			}
		});

		delete clone.details["submission_id"];
		delete clone.details["Submission Date"];
		delete clone["newSubmissionKey"];
		return JSON.stringify(clone, null, 4);
	}

	subscribeFieldChange(onMount, updatedField => {
		if (!form || !form.fields) {
			return;
		}

		const index = form.fields.findIndex(w => w.id === updatedField.id);

		if (index === -1) {
			return;
		}

		$$invalidate(0, form.fields[index].updated = !form.fields[index].updated, form);

		const fieldsWithRules = form.fields.filter(w => {
			if (!w.logic || !w.logic.rules) {
				return false;
			}

			const hasRule = w.logic.rules.find(rule => rule.field === updatedField.id);
			return hasRule != null;
		});

		for (let fieldWithRule of fieldsWithRules) {
			let ruleIndex = form.fields.findIndex(w => w.id === fieldWithRule.id);
			$$invalidate(0, form.fields[ruleIndex].updated = !form.fields[ruleIndex].updated, form);
		}
	});

	function display(field) {
		if (!field.logic) {
			return true;
		}

		const builder = new LogicBuilder();
		return builder.evaluate(field);
	}

	subscribeComponent("submission_uploading_files", () => {
		uploadingFiles = true;
	});

	subscribeComponent("submission_uploading_files_finished", () => {
		uploadingFiles = false;
	});

	async function onSubmit() {
		$$invalidate(3, state = LoadState.Loading);

		try {
			await submitForm();
			$$invalidate(3, state = LoadState.Finished);
		} catch(ex) {
			console.error(ex);
			$$invalidate(3, state = LoadState.Failed);
		}
	}

	const func = k => !hidden.includes(k);
	const click_handler = d => downloadFile(fieldPerSubmissionDetail[d]);

	$$self.$$set = $$props => {
		if ("submission" in $$props) $$invalidate(1, submission = $$props.submission);
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("mode" in $$props) $$invalidate(11, mode = $$props.mode);
	};

	return [
		form,
		submission,
		fieldPerSubmissionDetail,
		state,
		downloading,
		hidden,
		downloadFile,
		formatDetail,
		toRawJson,
		display,
		onSubmit,
		mode,
		func,
		click_handler
	];
}

class SubmissionPreview extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { submission: 1, form: 0, mode: 11 });
	}
}

export default SubmissionPreview;