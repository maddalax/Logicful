import './Dialog.css.proxy.js';
/* src/components/layout/Dialog.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	bubble,
	check_outros,
	create_bidirectional_transition,
	create_slot,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	null_to_empty,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	stop_propagation,
	text,
	transition_in,
	transition_out,
	update_slot
} from "../../../web_modules/svelte/internal.js";

import { afterUpdate, onMount, tick } from "../../../web_modules/svelte.js";
import { subscribe, dispatch } from "../../event/EventBus.js";
import { subscribeFieldChange } from "../../event/FieldEvent.js";
import { randomString } from "../../util/Generate.js";
import { fade } from "../../../web_modules/svelte/transition.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

// (79:0) {#if isOpen}
function create_if_block(ctx) {
	let div0;
	let t0;
	let div5;
	let div4;
	let div3;
	let div1;
	let h5;
	let t1;
	let t2;
	let button;
	let t4;
	let div2;
	let t5;
	let div4_style_value;
	let div5_transition;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let if_block = /*actions*/ ctx[1].length > 0 && create_if_block_1(ctx);

	return {
		c() {
			div0 = element("div");
			t0 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			h5 = element("h5");
			t1 = text(/*title*/ ctx[2]);
			t2 = space();
			button = element("button");
			button.innerHTML = `<span aria-hidden="true">Ã—</span>`;
			t4 = space();
			div2 = element("div");
			if (default_slot) default_slot.c();
			t5 = space();
			if (if_block) if_block.c();
			attr(div0, "class", "modal-backdrop fade show");
			attr(h5, "class", "modal-title");
			attr(h5, "id", "app-dialog-label");
			attr(button, "type", "button");
			attr(button, "class", "close");
			attr(button, "aria-label", "Close");
			attr(div1, "class", "modal-header");
			attr(div2, "class", "modal-body svelte-6pggpw");
			attr(div3, "class", "modal-content");
			attr(div4, "class", "modal-dialog");
			attr(div4, "style", div4_style_value = `max-width: ${/*width*/ ctx[3]}`);
			attr(div5, "class", "modal show");
			attr(div5, "tabindex", "-1");
			attr(div5, "aria-modal", "true");
			attr(div5, "role", "dialog");
			set_style(div5, "display", "block");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t0, anchor);
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div3);
			append(div3, div1);
			append(div1, h5);
			append(h5, t1);
			append(div1, t2);
			append(div1, button);
			append(div3, t4);
			append(div3, div2);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			append(div3, t5);
			if (if_block) if_block.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*close*/ ctx[8]),
					listen(button, "click", /*close*/ ctx[8]),
					listen(div3, "click", stop_propagation(/*click_handler*/ ctx[14]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 4) set_data(t1, /*title*/ ctx[2]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			if (/*actions*/ ctx[1].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*width*/ 8 && div4_style_value !== (div4_style_value = `max-width: ${/*width*/ ctx[3]}`)) {
				attr(div4, "style", div4_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div5_transition) div5_transition = create_bidirectional_transition(div5, fade, { duration: 300 }, true);
				div5_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (!div5_transition) div5_transition = create_bidirectional_transition(div5, fade, { duration: 300 }, false);
			div5_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t0);
			if (detaching) detach(div5);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			if (detaching && div5_transition) div5_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (103:8) {#if actions.length > 0}
function create_if_block_1(ctx) {
	let div;
	let t;
	let each_value = /*actions*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*error*/ ctx[7] && create_if_block_2(ctx);

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			attr(div, "class", "modal-footer");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (dirty & /*actions, runAction, failed, processing, focusable*/ 626) {
				each_value = /*actions*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*error*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

// (122:14) {:else}
function create_else_block_1(ctx) {
	let button;
	let t_value = /*action*/ ctx[21].label + "";
	let t;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_3(...args) {
		return /*click_handler_3*/ ctx[18](/*action*/ ctx[21], /*index*/ ctx[23], ...args);
	}

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"));
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_3);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*actions*/ 2 && t_value !== (t_value = /*action*/ ctx[21].label + "")) set_data(t, t_value);

			if (dirty & /*actions*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"))) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (117:37) 
function create_if_block_5(ctx) {
	let button;
	let t_value = /*action*/ ctx[21].label + "";
	let t;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[17](/*action*/ ctx[21], /*index*/ ctx[23], ...args);
	}

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"));
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
			/*button_binding*/ ctx[16](button);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*actions*/ 2 && t_value !== (t_value = /*action*/ ctx[21].label + "")) set_data(t, t_value);

			if (dirty & /*actions*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"))) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			/*button_binding*/ ctx[16](null);
			mounted = false;
			dispose();
		}
	};
}

// (106:14) {#if processing === index}
function create_if_block_3(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*failed*/ ctx[5]) return create_if_block_4;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (112:16) {:else}
function create_else_block(ctx) {
	let button;
	let t;
	let button_class_value;
	let button_disabled_value;

	return {
		c() {
			button = element("button");
			t = text("Processing...");
			attr(button, "class", button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"));
			button.disabled = button_disabled_value = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		p(ctx, dirty) {
			if (dirty & /*actions*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"))) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (107:16) {#if failed}
function create_if_block_4(ctx) {
	let button;
	let t;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[15](/*action*/ ctx[21], /*index*/ ctx[23], ...args);
	}

	return {
		c() {
			button = element("button");
			t = text("Failed To Run,\n                    Click To Try Again");
			attr(button, "class", button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"));
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*actions*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty("btn btn-" + /*action*/ ctx[21].type) + " svelte-6pggpw"))) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (105:12) {#each actions as action, index}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*processing*/ ctx[4] === /*index*/ ctx[23]) return create_if_block_3;
		if (/*action*/ ctx[21].focus) return create_if_block_5;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (128:12) {#if error}
function create_if_block_2(ctx) {
	let p;
	let t0;
	let strong;
	let t1;

	return {
		c() {
			p = element("p");
			t0 = text("Error: ");
			strong = element("strong");
			t1 = text(/*error*/ ctx[7]);
			set_style(p, "color", "#c52433");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, strong);
			append(strong, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*error*/ 128) set_data(t1, /*error*/ ctx[7]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = /*isOpen*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(document.body, "click", /*close*/ ctx[8]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*isOpen*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isOpen*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	
	let { title = "" } = $$props;
	let { isOpen = false } = $$props;

	let { onClose = () => {
		
	} } = $$props;

	let { actions = [] } = $$props;
	let { getActions = undefined } = $$props;
	let { width = "500px" } = $$props;
	let loaded = false;
	let processing = -1;
	let failed = false;
	let focusable = null;
	let error = "";

	onMount(() => {
		$$invalidate(1, actions = getActions?.() ?? actions);

		setTimeout(
			() => {
				loaded = true;
			},
			500
		);

		return () => {
			$$invalidate(0, isOpen = false);
		};
	});

	afterUpdate(() => {
		$$invalidate(1, actions = getActions?.() ?? actions);
	});

	function open() {
		$$invalidate(0, isOpen = true);
	}

	async function close() {
		if (!isOpen || !loaded) {
			return;
		}

		$$invalidate(0, isOpen = false);
		loaded = false;
		await onClose?.();
	}

	afterUpdate(() => {
		if (focusable) {
			setTimeout(
				() => {
					try {
						focusable.focus();
					} catch {
						
					}
				},
				50
			);
		}
	});

	async function runAction(action, index) {
		try {
			$$invalidate(5, failed = false);
			$$invalidate(7, error = "");
			$$invalidate(4, processing = index);

			if (action && action.onClick) {
				await action.onClick();
			}

			$$invalidate(4, processing = -1);

			if (action.onClose == null || action.onClose) {
				close();
			}
		} catch(ex) {
			console.error(ex);
			$$invalidate(7, error = ex.message);
			$$invalidate(5, failed = true);
		}
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = (action, index) => runAction(action, index);

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			focusable = $$value;
			$$invalidate(6, focusable);
		});
	}

	const click_handler_2 = (action, index) => runAction(action, index);
	const click_handler_3 = (action, index) => runAction(action, index);

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(2, title = $$props.title);
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ("onClose" in $$props) $$invalidate(10, onClose = $$props.onClose);
		if ("actions" in $$props) $$invalidate(1, actions = $$props.actions);
		if ("getActions" in $$props) $$invalidate(11, getActions = $$props.getActions);
		if ("width" in $$props) $$invalidate(3, width = $$props.width);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		isOpen,
		actions,
		title,
		width,
		processing,
		failed,
		focusable,
		error,
		close,
		runAction,
		onClose,
		getActions,
		$$scope,
		slots,
		click_handler,
		click_handler_1,
		button_binding,
		click_handler_2,
		click_handler_3
	];
}

class Dialog extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 2,
			isOpen: 0,
			onClose: 10,
			actions: 1,
			getActions: 11,
			width: 3
		});
	}
}

export default Dialog;