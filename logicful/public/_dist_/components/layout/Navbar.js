import './Navbar.css.proxy.js';
/* src/components/layout/Navbar.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { me } from "../../services/AuthService.js";
import { onMount } from "../../../web_modules/svelte.js";
import LogoWhite from "./logos/LogoWhite.js";
import Link from "../Link.js";

function create_default_slot_6(ctx) {
	let logowhite;
	let current;
	logowhite = new LogoWhite({});

	return {
		c() {
			create_component(logowhite.$$.fragment);
		},
		m(target, anchor) {
			mount_component(logowhite, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(logowhite.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(logowhite.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(logowhite, detaching);
		}
	};
}

// (40:14) <Link href="/index.html">
function create_default_slot_5(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = "/assets/img/brand/logicful-white.png")) attr(img, "src", img_src_value);
			attr(img, "alt", "logo");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (59:12) <Link href="/" class="nav-link">
function create_default_slot_4(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text("\n              Dashboard");
			attr(span, "class", "fas fa-columns");
			set_style(span, "color", "white");
			set_style(span, "font-size", "1.1em");
			set_style(span, "width", "none");
			set_style(span, "padding-right", "0.1em");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t);
		}
	};
}

// (68:14) <Link href="/folder" class="nav-link">
function create_default_slot_3(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text("\n                My Forms");
			attr(span, "class", "fas fa-bars");
			set_style(span, "color", "white");
			set_style(span, "font-size", "1.1em");
			set_style(span, "width", "none");
			set_style(span, "padding-right", "0.1em");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t);
		}
	};
}

// (79:8) {#if user}
function create_if_block(ctx) {
	let div;
	let button;
	let t1;
	let ul;
	let li0;
	let link0;
	let t2;
	let li1;
	let link1;
	let t3;
	let li2;
	let t4;
	let li3;
	let link2;
	let current;

	link0 = new Link({
			props: {
				class: "dropdown-item",
				href: "/account/settings",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	link1 = new Link({
			props: {
				class: "dropdown-item",
				href: "/account/settings",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	link2 = new Link({
			props: {
				class: "dropdown-item",
				href: "/account/logout",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			button = element("button");
			button.textContent = "My Account";
			t1 = space();
			ul = element("ul");
			li0 = element("li");
			create_component(link0.$$.fragment);
			t2 = space();
			li1 = element("li");
			create_component(link1.$$.fragment);
			t3 = space();
			li2 = element("li");
			li2.innerHTML = `<hr class="dropdown-divider"/>`;
			t4 = space();
			li3 = element("li");
			create_component(link2.$$.fragment);
			attr(button, "type", "button");
			attr(button, "class", "btn btn-sm btn-outline-soft animate-up-2 svelte-3njt4b");
			attr(button, "data-toggle", "dropdown");
			attr(button, "aria-expanded", "false");
			attr(ul, "class", "dropdown-menu");
			attr(div, "class", "btn-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			append(div, t1);
			append(div, ul);
			append(ul, li0);
			mount_component(link0, li0, null);
			append(ul, t2);
			append(ul, li1);
			mount_component(link1, li1, null);
			append(ul, t3);
			append(ul, li2);
			append(ul, t4);
			append(ul, li3);
			mount_component(link2, li3, null);
			current = true;
		},
		p(ctx, dirty) {
			const link0_changes = {};

			if (dirty & /*$$scope, user*/ 3) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
			const link2_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link2_changes.$$scope = { dirty, ctx };
			}

			link2.$set(link2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			transition_in(link2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			transition_out(link2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(link0);
			destroy_component(link1);
			destroy_component(link2);
		}
	};
}

// (90:16) <Link class="dropdown-item" href="/account/settings">
function create_default_slot_2(ctx) {
	let strong;
	let t_value = /*user*/ ctx[0].fullName + "";
	let t;

	return {
		c() {
			strong = element("strong");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, strong, anchor);
			append(strong, t);
		},
		p(ctx, dirty) {
			if (dirty & /*user*/ 1 && t_value !== (t_value = /*user*/ ctx[0].fullName + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(strong);
		}
	};
}

// (95:16) <Link class="dropdown-item" href="/account/settings">
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Settings");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (103:16) <Link class="dropdown-item" href="/account/logout">
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Sign Out");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let nav;
	let div0;
	let link0;
	let t0;
	let div8;
	let span0;
	let t1;
	let div6;
	let div4;
	let div3;
	let div1;
	let link1;
	let t2;
	let div2;
	let link2;
	let t3;
	let ul;
	let li0;
	let link3;
	let t4;
	let li1;
	let div5;
	let link4;
	let t5;
	let div7;
	let t6;
	let button;
	let current;

	link0 = new Link({
			props: {
				href: "/",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	link1 = new Link({
			props: {
				href: "/index.html",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	link2 = new Link({
			props: {
				href: "#navbar_global",
				class: "fas fa-times",
				"data-toggle": "collapse",
				"data-target": "#navbar_global",
				"aria-controls": "navbar_global",
				"aria-expanded": "false",
				title: "close",
				"aria-label": "Toggle navigation"
			}
		});

	link3 = new Link({
			props: {
				href: "/",
				class: "nav-link",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	link4 = new Link({
			props: {
				href: "/folder",
				class: "nav-link",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	let if_block = /*user*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			header = element("header");
			nav = element("nav");
			div0 = element("div");
			create_component(link0.$$.fragment);
			t0 = space();
			div8 = element("div");
			span0 = element("span");
			t1 = space();
			div6 = element("div");
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			create_component(link1.$$.fragment);
			t2 = space();
			div2 = element("div");
			create_component(link2.$$.fragment);
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			create_component(link3.$$.fragment);
			t4 = space();
			li1 = element("li");
			div5 = element("div");
			create_component(link4.$$.fragment);
			t5 = space();
			div7 = element("div");
			if (if_block) if_block.c();
			t6 = space();
			button = element("button");
			button.innerHTML = `<span class="navbar-toggler-icon"></span>`;
			set_style(div0, "margin-left", "2.5em");
			set_style(div0, "height", "36px");
			set_style(div0, "width", "100px");
			set_style(div0, "position", "absolute");
			set_style(span0, "padding-right", "1.8em");
			attr(div1, "class", "col-6 collapse-brand");
			attr(div2, "class", "col-6 collapse-close");
			attr(div3, "class", "row");
			attr(div4, "class", "navbar-collapse-header");
			attr(li0, "class", "nav-item");
			set_style(div5, "display", "flex");
			set_style(div5, "vertical-align", "middle");
			attr(li1, "class", "nav-item");
			attr(ul, "class", "navbar-nav navbar-nav-hover align-items-lg-center");
			attr(div6, "class", "navbar-collapse collapse mr-auto");
			attr(div6, "id", "navbar_global");
			attr(button, "class", "navbar-toggler ml-2");
			attr(button, "type", "button");
			attr(button, "data-toggle", "collapse");
			attr(button, "data-target", "#navbar_global");
			attr(button, "aria-controls", "navbar_global");
			attr(button, "aria-expanded", "false");
			attr(button, "aria-label", "Toggle navigation");
			attr(div7, "class", "d-flex align-items-center");
			attr(div8, "class", "container position-relative");
			set_style(div8, "max-width", "none");
			set_style(div8, "padding-right", "2.5em");
			set_style(div8, "padding-left", "7.5em");
			attr(nav, "id", "navbar-main");
			attr(nav, "aria-label", "Primary navigation");
			attr(nav, "class", "navbar navbar-main navbar-expand-lg navbar-theme-primary navbar-dark svelte-3njt4b");
			attr(header, "class", "header-global");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			append(header, nav);
			append(nav, div0);
			mount_component(link0, div0, null);
			append(nav, t0);
			append(nav, div8);
			append(div8, span0);
			append(div8, t1);
			append(div8, div6);
			append(div6, div4);
			append(div4, div3);
			append(div3, div1);
			mount_component(link1, div1, null);
			append(div3, t2);
			append(div3, div2);
			mount_component(link2, div2, null);
			append(div6, t3);
			append(div6, ul);
			append(ul, li0);
			mount_component(link3, li0, null);
			append(ul, t4);
			append(ul, li1);
			append(li1, div5);
			mount_component(link4, div5, null);
			append(div8, t5);
			append(div8, div7);
			if (if_block) if_block.m(div7, null);
			append(div7, t6);
			append(div7, button);
			current = true;
		},
		p(ctx, [dirty]) {
			const link0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
			const link3_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link3_changes.$$scope = { dirty, ctx };
			}

			link3.$set(link3_changes);
			const link4_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link4_changes.$$scope = { dirty, ctx };
			}

			link4.$set(link4_changes);

			if (/*user*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*user*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div7, t6);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			transition_in(link2.$$.fragment, local);
			transition_in(link3.$$.fragment, local);
			transition_in(link4.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			transition_out(link2.$$.fragment, local);
			transition_out(link3.$$.fragment, local);
			transition_out(link4.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			destroy_component(link0);
			destroy_component(link1);
			destroy_component(link2);
			destroy_component(link3);
			destroy_component(link4);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let user;

	onMount(() => {
		$$invalidate(0, user = me());
	});

	return [user];
}

class Navbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Navbar;