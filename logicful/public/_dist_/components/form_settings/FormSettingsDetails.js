/* src/components/form_settings/FormSettingsDetails.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { dispatch, subscribe, subscribeComponent } from "../../event/EventBus.js";
import FormEdit from "../../features/form/edit/FormEdit.js";
import FormEditSettings from "../../features/form/edit/FormEditSettings.js";
import { saveForm } from "../../features/form/edit/services/SaveForm.js";
import { onMount } from "../../../web_modules/svelte.js";
import EmailSettings from "./EmailSettings.js";

function create_if_block_5(ctx) {
	let div0;
	let t1;
	let div2;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_6, create_else_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div0 = element("div");
			div0.innerHTML = `<h3 class="h5 mb-0" style="padding-top: 0.4em;">General</h3>`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			attr(div0, "class", "card-header bg-white border-light p-3 mb-4 mb-md-0");
			set_style(div0, "display", "flex");
			set_style(div0, "padding-top", "0.2em", 1);
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "card-body p-0 p-md-4");
			set_style(div2, "padding-top", "0.5em", 1);
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (44:12) {:else}
function create_else_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (42:12) {#if form}
function create_if_block_6(ctx) {
	let formeditsettings;
	let current;
	formeditsettings = new FormEditSettings({ props: { form: /*form*/ ctx[0] } });

	return {
		c() {
			create_component(formeditsettings.$$.fragment);
		},
		m(target, anchor) {
			mount_component(formeditsettings, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const formeditsettings_changes = {};
			if (dirty & /*form*/ 1) formeditsettings_changes.form = /*form*/ ctx[0];
			formeditsettings.$set(formeditsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formeditsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formeditsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formeditsettings, detaching);
		}
	};
}

// (50:6) {#if selected === 'workflows'}
function create_if_block_3(ctx) {
	let div0;
	let t1;
	let div2;
	let div1;

	function select_block_type_1(ctx, dirty) {
		if (/*form*/ ctx[0]) return create_if_block_4;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div0 = element("div");
			div0.innerHTML = `<h3 class="h5 mb-0" style="padding-top: 0.4em;">Workflows</h3>`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			attr(div0, "class", "card-header bg-white border-light p-3 mb-4 mb-md-0");
			set_style(div0, "display", "flex");
			set_style(div0, "padding-top", "0.2em", 1);
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "card-body p-0 p-md-4");
			set_style(div2, "padding-top", "0.5em", 1);
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			if_block.m(div1, null);
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_1(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div1, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			if_block.d();
		}
	};
}

// (58:12) {:else}
function create_else_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (56:12) {#if form}
function create_if_block_4(ctx) {
	return { c: noop, m: noop, d: noop };
}

// (64:6) {#if selected === 'emails'}
function create_if_block_1(ctx) {
	let div0;
	let t1;
	let div2;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block_1];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*form*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div0 = element("div");
			div0.innerHTML = `<h3 class="h5 mb-0" style="padding-top: 0.4em;">Configure Emails</h3>`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			attr(div0, "class", "card-header bg-white border-light p-3 mb-4 mb-md-0");
			set_style(div0, "display", "flex");
			set_style(div0, "padding-top", "0.2em", 1);
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "card-body p-0 p-md-4");
			set_style(div2, "padding-top", "0.5em", 1);
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (72:12) {:else}
function create_else_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (70:12) {#if form}
function create_if_block_2(ctx) {
	let emailsettings;
	let current;
	emailsettings = new EmailSettings({ props: { form: /*form*/ ctx[0] } });

	return {
		c() {
			create_component(emailsettings.$$.fragment);
		},
		m(target, anchor) {
			mount_component(emailsettings, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const emailsettings_changes = {};
			if (dirty & /*form*/ 1) emailsettings_changes.form = /*form*/ ctx[0];
			emailsettings.$set(emailsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(emailsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(emailsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(emailsettings, detaching);
		}
	};
}

// (79:93) {:else}
function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Save Changes";
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "button");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*saveDraft*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (79:8) {#if saving}
function create_if_block(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Saving...";
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "button");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

function create_fragment(ctx) {
	let div6;
	let div5;
	let div3;
	let div0;
	let a0;
	let t0;
	let a0_href_value;
	let t1;
	let div1;
	let a1;
	let span;
	let t2;
	let a1_href_value;
	let t3;
	let div2;
	let a2;
	let t4;
	let a2_href_value;
	let t5;
	let form_1;
	let t6;
	let t7;
	let t8;
	let div4;
	let current;
	let if_block0 = /*selected*/ ctx[1] === "general" && create_if_block_5(ctx);
	let if_block1 = /*selected*/ ctx[1] === "workflows" && create_if_block_3(ctx);
	let if_block2 = /*selected*/ ctx[1] === "emails" && create_if_block_1(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*saving*/ ctx[2]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type_3(ctx, -1);
	let if_block3 = current_block_type(ctx);

	return {
		c() {
			div6 = element("div");
			div5 = element("div");
			div3 = element("div");
			div0 = element("div");
			a0 = element("a");
			t0 = text("View Submissions");
			t1 = space();
			div1 = element("div");
			a1 = element("a");
			span = element("span");
			t2 = text(" Edit Form");
			t3 = space();
			div2 = element("div");
			a2 = element("a");
			t4 = text("Preview Form");
			t5 = space();
			form_1 = element("form");
			if (if_block0) if_block0.c();
			t6 = space();
			if (if_block1) if_block1.c();
			t7 = space();
			if (if_block2) if_block2.c();
			t8 = space();
			div4 = element("div");
			if_block3.c();
			attr(a0, "href", a0_href_value = `/form/submissions?formId=${/*form*/ ctx[0].id}`);
			attr(a0, "target", "_blank");
			attr(a0, "class", "btn btn-outline-dark");
			set_style(div0, "text-align", "right");
			attr(span, "class", "fas fa-pencil-alt");
			attr(a1, "href", a1_href_value = `/form/builder?formId=${/*form*/ ctx[0].id}`);
			attr(a1, "target", "_blank");
			attr(a1, "class", "btn btn-outline-dark");
			set_style(div1, "text-align", "right");
			set_style(div1, "padding-left", "0.5em");
			attr(a2, "href", a2_href_value = `/form/preview?formId=${/*form*/ ctx[0].id}&mode=local`);
			attr(a2, "target", "_blank");
			attr(a2, "class", "btn btn-outline-dark");
			set_style(div2, "text-align", "right");
			set_style(div2, "padding-left", "0.5em");
			attr(div3, "class", "d-flex justify-content-end");
			set_style(div3, "padding-bottom", "1em");
			set_style(div3, "padding-left", "0");
			set_style(div3, "display", "flex");
			set_style(div3, "text-align", "right");
			attr(div4, "class", "d-flex justify-content-end ml-auto");
			set_style(div4, "padding-right", "1em");
			set_style(div4, "padding-bottom", "1em");
			attr(form_1, "action", "#");
			attr(form_1, "method", "post");
			attr(form_1, "class", "card border-light p-3 mb-4");
			attr(div5, "class", "col-12 mb-4");
			attr(div6, "class", "row mb-5");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div3);
			append(div3, div0);
			append(div0, a0);
			append(a0, t0);
			append(div3, t1);
			append(div3, div1);
			append(div1, a1);
			append(a1, span);
			append(a1, t2);
			append(div3, t3);
			append(div3, div2);
			append(div2, a2);
			append(a2, t4);
			append(div5, t5);
			append(div5, form_1);
			if (if_block0) if_block0.m(form_1, null);
			append(form_1, t6);
			if (if_block1) if_block1.m(form_1, null);
			append(form_1, t7);
			if (if_block2) if_block2.m(form_1, null);
			append(form_1, t8);
			append(form_1, div4);
			if_block3.m(div4, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*form*/ 1 && a0_href_value !== (a0_href_value = `/form/submissions?formId=${/*form*/ ctx[0].id}`)) {
				attr(a0, "href", a0_href_value);
			}

			if (!current || dirty & /*form*/ 1 && a1_href_value !== (a1_href_value = `/form/builder?formId=${/*form*/ ctx[0].id}`)) {
				attr(a1, "href", a1_href_value);
			}

			if (!current || dirty & /*form*/ 1 && a2_href_value !== (a2_href_value = `/form/preview?formId=${/*form*/ ctx[0].id}&mode=local`)) {
				attr(a2, "href", a2_href_value);
			}

			if (/*selected*/ ctx[1] === "general") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*selected*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(form_1, t6);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selected*/ ctx[1] === "workflows") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(form_1, t7);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*selected*/ ctx[1] === "emails") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*selected*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(form_1, t8);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type_3(ctx, dirty)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(div4, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if_block3.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let saving = false;
	let { form } = $$props;
	let { selected } = $$props;

	async function saveDraft() {
		$$invalidate(2, saving = true);
		await dispatch("save_form", { status: "draft" });
		$$invalidate(2, saving = false);
	}

	subscribeComponent("save_form", async params => {
		await saveForm();
	});

	onMount(() => {
		console.log(selected);
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	};

	return [form, selected, saving, saveDraft];
}

class FormSettingsDetails extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { form: 0, selected: 1 });
	}
}

export default FormSettingsDetails;