/* src/components/form_settings/EmailSettings.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { subscribeComponent } from "../../event/EventBus.js";
import Field from "../../features/form/edit/Field.js";
import { onMount } from "../../../web_modules/svelte.js";
import { randomString } from "../../util/Generate.js";

function create_fragment(ctx) {
	let p;
	let t1;
	let field0;
	let t2;
	let h2;
	let t4;
	let field1;
	let t5;
	let field2;
	let t6;
	let field3;
	let current;

	field0 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "switch",
					label: "Send me an email summary on submission",
					value: {
						type: "local",
						value: /*form*/ ctx[0].emailOnSubmission ?? false
					},
					configFieldTarget: "emailOnSubmission",
					configTarget: "form"
				}
			}
		});

	field1 = new Field({
			props: {
				field: {
					id: randomString(),
					required: true,
					label: "Form Title",
					value: {
						type: "local",
						value: /*form*/ ctx[0].title
					},
					type: "string",
					configFieldTarget: "title",
					configTarget: "form"
				}
			}
		});

	field2 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "switch",
					label: "Disable after a maximum number of submissions",
					value: {
						type: "local",
						value: /*form*/ ctx[0].maxSubmissions ?? false
					},
					configFieldTarget: "maxSubmissions",
					configTarget: "form"
				}
			}
		});

	field3 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "date",
					required: true,
					label: "Submissions close after date/time ",
					value: {
						type: "local",
						value: /*form*/ ctx[0].closeDateTime ?? ""
					},
					configFieldTarget: "closeDateTime",
					configTarget: "form"
				}
			}
		});

	return {
		c() {
			p = element("p");
			p.textContent = "Configure what emails are sent when the form is submitted.";
			t1 = space();
			create_component(field0.$$.fragment);
			t2 = space();
			h2 = element("h2");
			h2.textContent = "Custom Emails";
			t4 = space();
			create_component(field1.$$.fragment);
			t5 = space();
			create_component(field2.$$.fragment);
			t6 = space();
			create_component(field3.$$.fragment);
			set_style(p, "padding-top", "0.6em");
			set_style(p, "margin-bottom", "0em");
			attr(h2, "class", "h5");
			set_style(h2, "padding-top", "0.5em");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			insert(target, t1, anchor);
			mount_component(field0, target, anchor);
			insert(target, t2, anchor);
			insert(target, h2, anchor);
			insert(target, t4, anchor);
			mount_component(field1, target, anchor);
			insert(target, t5, anchor);
			mount_component(field2, target, anchor);
			insert(target, t6, anchor);
			mount_component(field3, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const field0_changes = {};

			if (dirty & /*form*/ 1) field0_changes.field = {
				id: randomString(),
				type: "switch",
				label: "Send me an email summary on submission",
				value: {
					type: "local",
					value: /*form*/ ctx[0].emailOnSubmission ?? false
				},
				configFieldTarget: "emailOnSubmission",
				configTarget: "form"
			};

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*form*/ 1) field1_changes.field = {
				id: randomString(),
				required: true,
				label: "Form Title",
				value: {
					type: "local",
					value: /*form*/ ctx[0].title
				},
				type: "string",
				configFieldTarget: "title",
				configTarget: "form"
			};

			field1.$set(field1_changes);
			const field2_changes = {};

			if (dirty & /*form*/ 1) field2_changes.field = {
				id: randomString(),
				type: "switch",
				label: "Disable after a maximum number of submissions",
				value: {
					type: "local",
					value: /*form*/ ctx[0].maxSubmissions ?? false
				},
				configFieldTarget: "maxSubmissions",
				configTarget: "form"
			};

			field2.$set(field2_changes);
			const field3_changes = {};

			if (dirty & /*form*/ 1) field3_changes.field = {
				id: randomString(),
				type: "date",
				required: true,
				label: "Submissions close after date/time ",
				value: {
					type: "local",
					value: /*form*/ ctx[0].closeDateTime ?? ""
				},
				configFieldTarget: "closeDateTime",
				configTarget: "form"
			};

			field3.$set(field3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			transition_in(field3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			transition_out(field3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t1);
			destroy_component(field0, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(h2);
			if (detaching) detach(t4);
			destroy_component(field1, detaching);
			if (detaching) detach(t5);
			destroy_component(field2, detaching);
			if (detaching) detach(t6);
			destroy_component(field3, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { form } = $$props;

	subscribeComponent("form_loaded", updatedForm => {
		$$invalidate(0, form = updatedForm);
	});

	subscribeComponent("form_updated", updatedForm => {
		$$invalidate(0, form = updatedForm);
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
	};

	return [form];
}

class EmailSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { form: 0 });
	}
}

export default EmailSettings;