import './Tooltip.css.proxy.js';
/* src/components/Tooltip.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_slot,
	detach,
	element,
	group_outros,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "../../web_modules/svelte/internal.js";

const get_custom_tip_slot_changes = dirty => ({});
const get_custom_tip_slot_context = ctx => ({});

// (24:4) {:else}
function create_else_block(ctx) {
	let current;
	const custom_tip_slot_template = /*#slots*/ ctx[9]["custom-tip"];
	const custom_tip_slot = create_slot(custom_tip_slot_template, ctx, /*$$scope*/ ctx[8], get_custom_tip_slot_context);

	return {
		c() {
			if (custom_tip_slot) custom_tip_slot.c();
		},
		m(target, anchor) {
			if (custom_tip_slot) {
				custom_tip_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (custom_tip_slot) {
				if (custom_tip_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(custom_tip_slot, custom_tip_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_custom_tip_slot_changes, get_custom_tip_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(custom_tip_slot, local);
			current = true;
		},
		o(local) {
			transition_out(custom_tip_slot, local);
			current = false;
		},
		d(detaching) {
			if (custom_tip_slot) custom_tip_slot.d(detaching);
		}
	};
}

// (22:4) {#if tip}
function create_if_block(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*tip*/ ctx[0]);
			attr(div, "class", "default-tip svelte-4lel3k");
			attr(div, "style", /*style*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*tip*/ 1) set_data(t, /*tip*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let span;
	let t;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tip*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div1 = element("div");
			span = element("span");
			if (default_slot) default_slot.c();
			t = space();
			div0 = element("div");
			if_block.c();
			attr(span, "class", "tooltip-slot");
			attr(div0, "class", "tooltip svelte-4lel3k");
			toggle_class(div0, "active", /*active*/ ctx[5]);
			toggle_class(div0, "left", /*left*/ ctx[4]);
			toggle_class(div0, "right", /*right*/ ctx[2]);
			toggle_class(div0, "bottom", /*bottom*/ ctx[3]);
			toggle_class(div0, "top", /*top*/ ctx[1]);
			attr(div1, "class", "tooltip-wrapper svelte-4lel3k");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append(div1, t);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			if (dirty & /*active*/ 32) {
				toggle_class(div0, "active", /*active*/ ctx[5]);
			}

			if (dirty & /*left*/ 16) {
				toggle_class(div0, "left", /*left*/ ctx[4]);
			}

			if (dirty & /*right*/ 4) {
				toggle_class(div0, "right", /*right*/ ctx[2]);
			}

			if (dirty & /*bottom*/ 8) {
				toggle_class(div0, "bottom", /*bottom*/ ctx[3]);
			}

			if (dirty & /*top*/ 2) {
				toggle_class(div0, "top", /*top*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { tip = "" } = $$props;
	let { top = false } = $$props;
	let { right = false } = $$props;
	let { bottom = false } = $$props;
	let { left = false } = $$props;
	let { active = false } = $$props;
	let { color = "#424767" } = $$props;
	let style = `background-color: #424767; color: white;`;

	$$self.$$set = $$props => {
		if ("tip" in $$props) $$invalidate(0, tip = $$props.tip);
		if ("top" in $$props) $$invalidate(1, top = $$props.top);
		if ("right" in $$props) $$invalidate(2, right = $$props.right);
		if ("bottom" in $$props) $$invalidate(3, bottom = $$props.bottom);
		if ("left" in $$props) $$invalidate(4, left = $$props.left);
		if ("active" in $$props) $$invalidate(5, active = $$props.active);
		if ("color" in $$props) $$invalidate(7, color = $$props.color);
		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [tip, top, right, bottom, left, active, style, color, $$scope, slots];
}

class Tooltip extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			tip: 0,
			top: 1,
			right: 2,
			bottom: 3,
			left: 4,
			active: 5,
			color: 7
		});
	}
}

export default Tooltip;