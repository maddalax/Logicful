/* src/components/account/Settings.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_input_value,
	set_style,
	space
} from "../../../web_modules/svelte/internal.js";

import { me } from "../../services/AuthService.js";
import { onMount } from "../../../web_modules/svelte.js";

function create_if_block(ctx) {
	let div19;
	let div12;
	let div11;
	let div10;
	let h2;
	let t1;
	let form0;
	let div4;
	let div1;
	let div0;
	let label0;
	let t3;
	let input0;
	let t4;
	let div3;
	let div2;
	let label1;
	let t6;
	let input1;
	let t7;
	let div8;
	let div6;
	let div5;
	let label2;
	let t9;
	let input2;
	let t10;
	let div7;
	let t11;
	let div9;
	let t13;
	let div18;
	let mounted;
	let dispose;

	return {
		c() {
			div19 = element("div");
			div12 = element("div");
			div11 = element("div");
			div10 = element("div");
			h2 = element("h2");
			h2.textContent = "General Information";
			t1 = space();
			form0 = element("form");
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Full Name";
			t3 = space();
			input0 = element("input");
			t4 = space();
			div3 = element("div");
			div2 = element("div");
			label1 = element("label");
			label1.textContent = "Display Name";
			t6 = space();
			input1 = element("input");
			t7 = space();
			div8 = element("div");
			div6 = element("div");
			div5 = element("div");
			label2 = element("label");
			label2.textContent = "Email";
			t9 = space();
			input2 = element("input");
			t10 = space();
			div7 = element("div");
			t11 = space();
			div9 = element("div");
			div9.innerHTML = `<button type="submit" class="btn btn-primary">Save</button>`;
			t13 = space();
			div18 = element("div");

			div18.innerHTML = `<div class="card-body" style="padding-left: 2em; padding-right: 2em;"><h3 class="h5 mb-4 mt-2">Change Password</h3> 
      <form class="form mt-5" autocomplete="off"><div class="mb-4"><label for="inputPasswordOld">Current Password</label>  <input type="password" class="form-control" id="inputPasswordOld" required=""/></div> 
        <div class="mb-4"><label for="inputPasswordNew">New Password</label> 
          <input type="password" class="form-control" id="inputPasswordNew" required=""/> 
          <span class="form-text small text-muted">Password must be 6 characters minimum.</span></div> 
        <div class="mb-4"><label for="inputPasswordNewVerify">Verify</label> 
          <input type="password" class="form-control" id="inputPasswordNewVerify" required=""/> 
          <span class="form-text small text-muted">To confirm, type the new password again.</span></div> 
        <div class="form-group"><button type="submit" class="btn btn-dark">Save</button></div></form></div>`;

			attr(h2, "class", "h5 mb-4 mt-2");
			attr(label0, "for", "first_name");
			attr(input0, "class", "form-control");
			attr(input0, "id", "first_name");
			attr(input0, "type", "text");
			attr(div0, "class", "mb-3");
			attr(div1, "class", "col-md-6 mb-3");
			attr(label1, "for", "last_name");
			attr(input1, "class", "form-control");
			attr(input1, "id", "last_name");
			attr(input1, "type", "text");
			attr(div2, "class", "mb-3");
			attr(div3, "class", "col-md-6 mb-3");
			attr(div4, "class", "row");
			attr(label2, "for", "email");
			attr(input2, "class", "form-control");
			attr(input2, "id", "email");
			attr(input2, "type", "email");
			attr(div5, "class", "mb-3");
			attr(div6, "class", "col-md-6 mb-3");
			attr(div7, "class", "col-md-6 mb-3");
			attr(div8, "class", "row");
			attr(div9, "class", "mt-1");
			attr(div10, "class", "card card-body bg-white border-light mb-4");
			set_style(div10, "padding-left", "2em");
			set_style(div10, "padding-right", "2em");
			attr(div11, "class", "col-lg-12");
			attr(div12, "class", "row");
			attr(div18, "class", "card bg-white border-light mb-4");
		},
		m(target, anchor) {
			insert(target, div19, anchor);
			append(div19, div12);
			append(div12, div11);
			append(div11, div10);
			append(div10, h2);
			append(div10, t1);
			append(div10, form0);
			append(form0, div4);
			append(div4, div1);
			append(div1, div0);
			append(div0, label0);
			append(div0, t3);
			append(div0, input0);
			set_input_value(input0, /*fullName*/ ctx[2]);
			append(div4, t4);
			append(div4, div3);
			append(div3, div2);
			append(div2, label1);
			append(div2, t6);
			append(div2, input1);
			set_input_value(input1, /*displayName*/ ctx[1]);
			append(form0, t7);
			append(form0, div8);
			append(div8, div6);
			append(div6, div5);
			append(div5, label2);
			append(div5, t9);
			append(div5, input2);
			set_input_value(input2, /*email*/ ctx[3]);
			append(div8, t10);
			append(div8, div7);
			append(form0, t11);
			append(form0, div9);
			append(div19, t13);
			append(div19, div18);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[4]),
					listen(input1, "input", /*input1_input_handler*/ ctx[5]),
					listen(input2, "input", /*input2_input_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*fullName*/ 4 && input0.value !== /*fullName*/ ctx[2]) {
				set_input_value(input0, /*fullName*/ ctx[2]);
			}

			if (dirty & /*displayName*/ 2 && input1.value !== /*displayName*/ ctx[1]) {
				set_input_value(input1, /*displayName*/ ctx[1]);
			}

			if (dirty & /*email*/ 8 && input2.value !== /*email*/ ctx[3]) {
				set_input_value(input2, /*email*/ ctx[3]);
			}
		},
		d(detaching) {
			if (detaching) detach(div19);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*user*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*user*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let user;
	let displayName = "";
	let fullName = "";
	let email = "";

	onMount(() => {
		$$invalidate(0, user = me());
		$$invalidate(1, displayName = user.displayName);
		$$invalidate(2, fullName = user.fullName);
		$$invalidate(3, email = user.email);
	});

	function input0_input_handler() {
		fullName = this.value;
		$$invalidate(2, fullName);
	}

	function input1_input_handler() {
		displayName = this.value;
		$$invalidate(1, displayName);
	}

	function input2_input_handler() {
		email = this.value;
		$$invalidate(3, email);
	}

	return [
		user,
		displayName,
		fullName,
		email,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler
	];
}

class Settings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Settings;