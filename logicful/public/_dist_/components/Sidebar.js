import './Sidebar.css.proxy.js';
/* src/components/Sidebar.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_style,
	stop_propagation,
	transition_in,
	transition_out,
	update_slot
} from "../../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let nav;
	let div;
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			nav = element("nav");
			div = element("div");
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "class", "nav flex-column");
			attr(ul, "id", "blocks");
			set_style(ul, "padding-top", "0.5em");
			set_style(div, "margin-left", ".5em");
			set_style(div, "margin-right", "0.5em");
			attr(nav, "class", "d-md-block sidebar collapse svelte-1nmn5ly");
			set_style(nav, "background-color", "#f5f9fe");
			set_style(nav, "height", "100vh");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div);
			append(div, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(nav, "click", stop_propagation(/*click_handler*/ ctx[2]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	"use strict";

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots, click_handler];
}

class Sidebar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Sidebar;