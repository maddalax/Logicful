import './RemoteTable.css.proxy.js';
/* src/components/RemoteTable.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	check_outros,
	create_component,
	destroy_block,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	stop_propagation,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../web_modules/svelte/internal.js";

import { afterUpdate, onMount, tick } from "../../web_modules/svelte.js";
import Fuse from "../../web_modules/fusejs.js";
import { LoadState } from "../models/LoadState.js";
import { randomString } from "../util/Generate.js";
import Pagination from "./Pagination.js";
import { dispatch, dispatchPrivate } from "../event/EventBus.js";
import { fastClone, fastEquals } from "../util/Compare.js";
import Dialog from "./layout/Dialog.js";
import ToastManager from "./ToastManager.js";
import { isObject } from "../guards/Guard.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[61] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[61] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[64] = list[i];
	child_ctx[65] = list;
	child_ctx[66] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[61] = list[i];
	return child_ctx;
}

// (294:4) {#if appliedFilters > 0}
function create_if_block_13(ctx) {
	let div;
	let span;
	let t0;
	let t1;

	return {
		c() {
			div = element("div");
			span = element("span");
			t0 = text(/*appliedFilters*/ ctx[17]);
			t1 = text(" Filter(s) Applied");
			attr(span, "class", "badge bg-primary");
			attr(div, "class", "mr-auto p-2 bd-highlight");
			set_style(div, "margin-top", "7px");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*appliedFilters*/ 131072) set_data(t0, /*appliedFilters*/ ctx[17]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (299:4) {#if selectedCount > 0}
function create_if_block_12(ctx) {
	let div1;
	let div0;
	let t0;
	let strong;
	let t1;
	let t2;
	let t3_value = /*filtered*/ ctx[5].length + "";
	let t3;
	let t4;
	let div3;
	let div2;
	let t5;
	let div5;
	let div4;
	let t6;
	let div7;
	let div6;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("Selected: ");
			strong = element("strong");
			t1 = text(/*selectedCount*/ ctx[14]);
			t2 = text(" of ");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");
			div2 = element("div");
			div2.innerHTML = `<i class="fas fa-eye svelte-1yxaouc"></i>`;
			t5 = space();
			div5 = element("div");
			div4 = element("div");
			div4.innerHTML = `<i class="fas fa-eye-slash svelte-1yxaouc"></i>`;
			t6 = space();
			div7 = element("div");
			div6 = element("div");
			div6.innerHTML = `<i class="fas fa-trash-alt svelte-1yxaouc"></i>`;
			set_style(div0, "margin-top", "5px");
			attr(div1, "class", "p-2 bd-highlight");
			set_style(div2, "pointer", "cursor");
			attr(div3, "class", "p-2 bd-highlight");
			set_style(div4, "pointer", "cursor");
			attr(div5, "class", "p-2 bd-highlight");
			set_style(div6, "pointer", "cursor");
			attr(div7, "class", "p-2 bd-highlight");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div0, strong);
			append(strong, t1);
			append(strong, t2);
			append(strong, t3);
			insert(target, t4, anchor);
			insert(target, div3, anchor);
			append(div3, div2);
			insert(target, t5, anchor);
			insert(target, div5, anchor);
			append(div5, div4);
			insert(target, t6, anchor);
			insert(target, div7, anchor);
			append(div7, div6);

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler_3*/ ctx[40]),
					listen(div4, "click", /*click_handler_4*/ ctx[41]),
					listen(div6, "click", /*click_handler_5*/ ctx[42])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selectedCount*/ 16384) set_data(t1, /*selectedCount*/ ctx[14]);
			if (dirty[0] & /*filtered*/ 32 && t3_value !== (t3_value = /*filtered*/ ctx[5].length + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t4);
			if (detaching) detach(div3);
			if (detaching) detach(t5);
			if (detaching) detach(div5);
			if (detaching) detach(t6);
			if (detaching) detach(div7);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (429:39) 
function create_if_block_11(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<p>Failed to load rows, please try refreshing the page.</p>`;
			set_style(div, "padding-top", "1em");
			set_style(div, "padding-left", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (333:41) 
function create_if_block_5(ctx) {
	let canvas;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_6, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*rows*/ ctx[4].length === 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			canvas = element("canvas");
			t = space();
			if_block.c();
			if_block_anchor = empty();
			attr(canvas, "id", "canvas");
			set_style(canvas, "display", "none");
		},
		m(target, anchor) {
			insert(target, canvas, anchor);
			insert(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(canvas);
			if (detaching) detach(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (327:2) {#if state === LoadState.Loading}
function create_if_block_4(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-secondary" role="status"><span class="sr-only">Loading...</span></div>`;
			set_style(div1, "text-align", "center");
			set_style(div1, "padding-top", "1em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (341:4) {:else}
function create_else_block(ctx) {
	let div1;
	let table;
	let tbody;
	let tr;
	let th;
	let div0;
	let input;
	let input_id_value;
	let t0;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t1;
	let t2;
	let pagination;
	let current;
	let mounted;
	let dispose;
	let each_value_3 = /*filteredColumns*/ ctx[7];
	const get_key = ctx => /*column*/ ctx[61];

	for (let i = 0; i < each_value_3.length; i += 1) {
		let child_ctx = get_each_context_3(ctx, each_value_3, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_3(key, child_ctx));
	}

	let each_value_1 = /*filtered*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	pagination = new Pagination({
			props: {
				id: /*id*/ ctx[3],
				count: /*filtered*/ ctx[5].length,
				onRangeChange: /*func*/ ctx[47]
			}
		});

	return {
		c() {
			div1 = element("div");
			table = element("table");
			tbody = element("tbody");
			tr = element("tr");
			th = element("th");
			div0 = element("div");
			input = element("input");
			t0 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			create_component(pagination.$$.fragment);
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			input.value = "";
			input.checked = /*allRowsSelected*/ ctx[13];
			attr(input, "id", input_id_value = "row-toggle-all");
			attr(div0, "class", "form-check");
			attr(th, "scope", "col");
			set_style(th, "width", "50px");
			attr(tr, "class", "svelte-1yxaouc");
			attr(table, "class", "table table-hover svelte-1yxaouc");
			set_style(table, "table-layout", "fixed");
			attr(div1, "class", "table-responsive");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, table);
			append(table, tbody);
			append(tbody, tr);
			append(tr, th);
			append(th, div0);
			append(div0, input);
			append(tr, t0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append(tbody, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			insert(target, t2, anchor);
			mount_component(pagination, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*selectAllRows*/ ctx[18]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*allRowsSelected*/ 8192) {
				input.checked = /*allRowsSelected*/ ctx[13];
			}

			if (dirty[0] & /*headerStyle, filteredColumns, sortColumn, sort, sortDirection*/ 1579136) {
				const each_value_3 = /*filteredColumns*/ ctx[7];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_3, each0_lookup, tr, destroy_block, create_each_block_3, null, get_each_context_3);
			}

			if (dirty[0] & /*filtered, onRowClick, filteredColumns, renderValue, onRowSelected, range*/ 20972708) {
				each_value_1 = /*filtered*/ ctx[5];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			const pagination_changes = {};
			if (dirty[0] & /*id*/ 8) pagination_changes.id = /*id*/ ctx[3];
			if (dirty[0] & /*filtered*/ 32) pagination_changes.count = /*filtered*/ ctx[5].length;
			if (dirty[0] & /*range, columns*/ 1088) pagination_changes.onRangeChange = /*func*/ ctx[47];
			pagination.$set(pagination_changes);
		},
		i(local) {
			if (current) return;
			transition_in(pagination.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pagination.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			destroy_each(each_blocks, detaching);
			if (detaching) detach(t2);
			destroy_component(pagination, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (335:4) {#if rows.length === 0}
function create_if_block_6(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="text-secondary"><p>No results to display.</p></div>`;
			set_style(div1, "text-align", "center");
			set_style(div1, "padding-top", "1em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (367:74) 
function create_if_block_10(ctx) {
	let span1;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-chevron-down"></span>`;
		},
		m(target, anchor) {
			insert(target, span1, anchor);
		},
		d(detaching) {
			if (detaching) detach(span1);
		}
	};
}

// (365:20) {#if sort === column && sortDirection === 'asc'}
function create_if_block_9(ctx) {
	let span1;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-chevron-up"></span>`;
		},
		m(target, anchor) {
			insert(target, span1, anchor);
		},
		d(detaching) {
			if (detaching) detach(span1);
		}
	};
}

// (358:14) {#each filteredColumns as column (column)}
function create_each_block_3(key_1, ctx) {
	let th;
	let t0_value = /*column*/ ctx[61] + "";
	let t0;
	let t1;
	let span;
	let t2;
	let th_style_value;
	let mounted;
	let dispose;

	function select_block_type_2(ctx, dirty) {
		if (/*sort*/ ctx[11] === /*column*/ ctx[61] && /*sortDirection*/ ctx[12] === "asc") return create_if_block_9;
		if (/*sort*/ ctx[11] === /*column*/ ctx[61] && /*sortDirection*/ ctx[12] === "desc") return create_if_block_10;
	}

	let current_block_type = select_block_type_2(ctx, [-1]);
	let if_block = current_block_type && current_block_type(ctx);

	function click_handler_7(...args) {
		return /*click_handler_7*/ ctx[44](/*column*/ ctx[61], ...args);
	}

	return {
		key: key_1,
		first: null,
		c() {
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			if (if_block) if_block.c();
			t2 = space();
			attr(th, "scope", "col");
			attr(th, "style", th_style_value = /*headerStyle*/ ctx[20](/*column*/ ctx[61]));
			this.first = th;
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, t0);
			append(th, t1);
			append(th, span);
			if (if_block) if_block.m(span, null);
			append(th, t2);

			if (!mounted) {
				dispose = listen(th, "click", click_handler_7);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*filteredColumns*/ 128 && t0_value !== (t0_value = /*column*/ ctx[61] + "")) set_data(t0, t0_value);

			if (current_block_type !== (current_block_type = select_block_type_2(ctx, dirty))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}

			if (dirty[0] & /*filteredColumns*/ 128 && th_style_value !== (th_style_value = /*headerStyle*/ ctx[20](/*column*/ ctx[61]))) {
				attr(th, "style", th_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(th);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

// (375:14) {#if index >= range.min && index <= range.max}
function create_if_block_7(ctx) {
	let tr;
	let td;
	let div;
	let input;
	let input_checked_value;
	let input_id_value;
	let t0;
	let show_if = isUnread(/*row*/ ctx[64]);
	let t1;
	let t2;
	let mounted;
	let dispose;

	function change_handler(...args) {
		return /*change_handler*/ ctx[45](/*row*/ ctx[64], ...args);
	}

	let if_block = show_if && create_if_block_8(ctx);
	let each_value_2 = /*filteredColumns*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	function click_handler_8(...args) {
		return /*click_handler_8*/ ctx[46](/*row*/ ctx[64], /*each_value_1*/ ctx[65], /*index*/ ctx[66], ...args);
	}

	return {
		c() {
			tr = element("tr");
			td = element("td");
			div = element("div");
			input = element("input");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			input.value = "";
			input.checked = input_checked_value = /*row*/ ctx[64].meta_selected;
			attr(input, "id", input_id_value = "row-toggle-" + /*index*/ ctx[66]);
			attr(div, "class", "form-check");
			attr(td, "class", "svelte-1yxaouc");
			toggle_class(td, "unread", isUnread(/*row*/ ctx[64]));
			set_style(tr, "vertical-align", "middle");
			set_style(tr, "cursor", "pointer");
			attr(tr, "class", "svelte-1yxaouc");
			toggle_class(tr, "active", /*row*/ ctx[64].meta_selected);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td);
			append(td, div);
			append(div, input);
			append(div, t0);
			if (if_block) if_block.m(div, null);
			append(tr, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t2);

			if (!mounted) {
				dispose = [
					listen(input, "click", stop_propagation(/*click_handler*/ ctx[37])),
					listen(input, "change", stop_propagation(change_handler)),
					listen(tr, "click", click_handler_8)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*filtered*/ 32 && input_checked_value !== (input_checked_value = /*row*/ ctx[64].meta_selected)) {
				input.checked = input_checked_value;
			}

			if (dirty[0] & /*filtered*/ 32) show_if = isUnread(/*row*/ ctx[64]);

			if (show_if) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_8(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*filtered*/ 32) {
				toggle_class(td, "unread", isUnread(/*row*/ ctx[64]));
			}

			if (dirty[0] & /*filtered, renderValue, filteredColumns*/ 4194464) {
				each_value_2 = /*filteredColumns*/ ctx[7];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (dirty[0] & /*filtered*/ 32) {
				toggle_class(tr, "active", /*row*/ ctx[64].meta_selected);
			}
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (395:22) {#if isUnread(row)}
function create_if_block_8(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<i class="fas fa-circle" style="width: .5em;margin-left:4px"></i>`;
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (404:18) {#each filteredColumns as column}
function create_each_block_2(ctx) {
	let td;
	let div;
	let t_value = /*renderValue*/ ctx[22](/*row*/ ctx[64], /*column*/ ctx[61]) + "";
	let t;

	return {
		c() {
			td = element("td");
			div = element("div");
			t = text(t_value);
			attr(div, "class", "text svelte-1yxaouc");
			toggle_class(div, "text-unread", isUnread(/*row*/ ctx[64]));
			attr(td, "class", "svelte-1yxaouc");
			toggle_class(td, "unread", isUnread(/*row*/ ctx[64]));
		},
		m(target, anchor) {
			insert(target, td, anchor);
			append(td, div);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filtered, filteredColumns*/ 160 && t_value !== (t_value = /*renderValue*/ ctx[22](/*row*/ ctx[64], /*column*/ ctx[61]) + "")) set_data(t, t_value);

			if (dirty[0] & /*filtered*/ 32) {
				toggle_class(div, "text-unread", isUnread(/*row*/ ctx[64]));
			}

			if (dirty[0] & /*filtered*/ 32) {
				toggle_class(td, "unread", isUnread(/*row*/ ctx[64]));
			}
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (374:12) {#each filtered as row, index}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*index*/ ctx[66] >= /*range*/ ctx[10].min && /*index*/ ctx[66] <= /*range*/ ctx[10].max && create_if_block_7(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*index*/ ctx[66] >= /*range*/ ctx[10].min && /*index*/ ctx[66] <= /*range*/ ctx[10].max) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_7(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (470:31) 
function create_if_block_3(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				title: "Manage Filters",
				isOpen: true,
				onClose: /*func_3*/ ctx[52],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};
			if (dirty[0] & /*modal*/ 32768) dialog_changes.onClose = /*func_3*/ ctx[52];

			if (dirty[0] & /*filters*/ 65536 | dirty[2] & /*$$scope*/ 512) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (460:31) 
function create_if_block_2(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				title: "Confirm Deletion",
				isOpen: true,
				actions: [
					{
						label: `Delete ${/*selectedCount*/ ctx[14]} Entries`,
						type: "danger",
						onClick: /*deleteEntries*/ ctx[26]
					},
					{ label: "Cancel", type: "secondary" }
				],
				onClose: /*func_2*/ ctx[50],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};

			if (dirty[0] & /*selectedCount*/ 16384) dialog_changes.actions = [
				{
					label: `Delete ${/*selectedCount*/ ctx[14]} Entries`,
					type: "danger",
					onClick: /*deleteEntries*/ ctx[26]
				},
				{ label: "Cancel", type: "secondary" }
			];

			if (dirty[0] & /*modal*/ 32768) dialog_changes.onClose = /*func_2*/ ctx[50];

			if (dirty[0] & /*selectedCount*/ 16384 | dirty[2] & /*$$scope*/ 512) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (434:2) {#if modal === 'toggle_column'}
function create_if_block(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				title: "Toggle Column Visibility",
				isOpen: true,
				onClose: /*func_1*/ ctx[49],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};
			if (dirty[0] & /*modal*/ 32768) dialog_changes.onClose = /*func_1*/ ctx[49];

			if (dirty[0] & /*columns, hidden*/ 66 | dirty[2] & /*$$scope*/ 512) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (471:4) <Dialog       title={'Manage Filters'}       isOpen={true}       onClose={() => {         modal = '';       }}>
function create_default_slot_2(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			label.textContent = "Only Show Unread Items";
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			attr(label, "class", "form-check-label");
			attr(div, "class", "form-check");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			input.checked = /*filters*/ ctx[16].onlyUnread;
			append(div, t0);
			append(div, label);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[51]),
					listen(input, "click", stop_propagation(/*click_handler_1*/ ctx[36]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filters*/ 65536) {
				input.checked = /*filters*/ ctx[16].onlyUnread;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (461:4) <Dialog       title={'Confirm Deletion'}       isOpen={true}       actions={[{ label: `Delete ${selectedCount} Entries`, type: 'danger', onClick: deleteEntries }, { label: 'Cancel', type: 'secondary' }]}       onClose={() => {         modal = '';       }}>
function create_default_slot_1(ctx) {
	let p;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			p = element("p");
			t0 = text("Are you sure you want to delete ");
			t1 = text(/*selectedCount*/ ctx[14]);
			t2 = text(" entries?");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selectedCount*/ 16384) set_data(t1, /*selectedCount*/ ctx[14]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (442:8) {#if column !== 'table_meta_id'}
function create_if_block_1(ctx) {
	let div;
	let input;
	let input_checked_value;
	let input_id_value;
	let t0;
	let label;
	let t1_value = /*column*/ ctx[61] + "";
	let t1;
	let label_for_value;
	let t2;
	let mounted;
	let dispose;

	function change_handler_1(...args) {
		return /*change_handler_1*/ ctx[48](/*column*/ ctx[61], ...args);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			t2 = space();
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			input.value = "";
			input.checked = input_checked_value = !/*hidden*/ ctx[1].has(/*column*/ ctx[61]);
			attr(input, "id", input_id_value = "toggle-" + /*column*/ ctx[61]);
			attr(label, "class", "form-check-label");
			attr(label, "for", label_for_value = "toggle-" + /*column*/ ctx[61]);
			attr(div, "class", "form-check");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, t1);
			append(div, t2);

			if (!mounted) {
				dispose = listen(input, "change", change_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*hidden, columns*/ 66 && input_checked_value !== (input_checked_value = !/*hidden*/ ctx[1].has(/*column*/ ctx[61]))) {
				input.checked = input_checked_value;
			}

			if (dirty[0] & /*columns*/ 64 && input_id_value !== (input_id_value = "toggle-" + /*column*/ ctx[61])) {
				attr(input, "id", input_id_value);
			}

			if (dirty[0] & /*columns*/ 64 && t1_value !== (t1_value = /*column*/ ctx[61] + "")) set_data(t1, t1_value);

			if (dirty[0] & /*columns*/ 64 && label_for_value !== (label_for_value = "toggle-" + /*column*/ ctx[61])) {
				attr(label, "for", label_for_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (441:6) {#each columns as column}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*column*/ ctx[61] !== "table_meta_id" && create_if_block_1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*column*/ ctx[61] !== "table_meta_id") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (435:4) <Dialog       title={'Toggle Column Visibility'}       isOpen={true}       onClose={() => {         modal = '';       }}>
function create_default_slot(ctx) {
	let each_1_anchor;
	let each_value = /*columns*/ ctx[6];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*columns, hidden, toggleColumn*/ 8388674) {
				each_value = /*columns*/ ctx[6];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div6;
	let toastmanager;
	let t0;
	let div5;
	let div0;
	let input;
	let t1;
	let div2;
	let div1;
	let t2;
	let t3;
	let t4;
	let div4;
	let div3;
	let t5;
	let current_block_type_index;
	let if_block2;
	let t6;
	let current_block_type_index_1;
	let if_block3;
	let current;
	let mounted;
	let dispose;
	toastmanager = new ToastManager({});
	let if_block0 = /*appliedFilters*/ ctx[17] > 0 && create_if_block_13(ctx);
	let if_block1 = /*selectedCount*/ ctx[14] > 0 && create_if_block_12(ctx);
	const if_block_creators = [create_if_block_4, create_if_block_5, create_if_block_11];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[9] === LoadState.Loading) return 0;
		if (/*state*/ ctx[9] === LoadState.Finished) return 1;
		if (/*state*/ ctx[9] === LoadState.Failed) return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, [-1]))) {
		if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const if_block_creators_1 = [create_if_block, create_if_block_2, create_if_block_3];
	const if_blocks_1 = [];

	function select_block_type_3(ctx, dirty) {
		if (/*modal*/ ctx[15] === "toggle_column") return 0;
		if (/*modal*/ ctx[15] === "delete") return 1;
		if (/*modal*/ ctx[15] === "filter") return 2;
		return -1;
	}

	if (~(current_block_type_index_1 = select_block_type_3(ctx, [-1]))) {
		if_block3 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	}

	return {
		c() {
			div6 = element("div");
			create_component(toastmanager.$$.fragment);
			t0 = space();
			div5 = element("div");
			div0 = element("div");
			input = element("input");
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			div1.innerHTML = `<i class="fas fa-filter svelte-1yxaouc"></i>`;
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div4 = element("div");
			div3 = element("div");
			div3.innerHTML = `<i class="fas fa-columns svelte-1yxaouc"></i>`;
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			if (if_block3) if_block3.c();
			attr(input, "class", "form-control");
			attr(input, "placeholder", /*searchPlaceHolder*/ ctx[0]);
			set_style(input, "width", "300px");
			attr(div0, "class", "p-2 bd-highlight");
			set_style(div1, "margin-top", "7px");
			attr(div2, "class", "p-2 bd-highlight");
			toggle_class(div2, "mr-auto", /*appliedFilters*/ ctx[17] === 0);
			set_style(div3, "pointer", "cursor");
			attr(div4, "class", "p-2 bd-highlight");
			attr(div5, "class", "d-flex bd-highlight mb-3");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			mount_component(toastmanager, div6, null);
			append(div6, t0);
			append(div6, div5);
			append(div5, div0);
			append(div0, input);
			set_input_value(input, /*query*/ ctx[8]);
			append(div5, t1);
			append(div5, div2);
			append(div2, div1);
			append(div5, t2);
			if (if_block0) if_block0.m(div5, null);
			append(div5, t3);
			if (if_block1) if_block1.m(div5, null);
			append(div5, t4);
			append(div5, div4);
			append(div4, div3);
			append(div6, t5);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div6, null);
			}

			append(div6, t6);

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].m(div6, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[38]),
					listen(div1, "click", /*click_handler_2*/ ctx[39]),
					listen(div3, "click", /*click_handler_6*/ ctx[43])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*searchPlaceHolder*/ 1) {
				attr(input, "placeholder", /*searchPlaceHolder*/ ctx[0]);
			}

			if (dirty[0] & /*query*/ 256 && input.value !== /*query*/ ctx[8]) {
				set_input_value(input, /*query*/ ctx[8]);
			}

			if (dirty[0] & /*appliedFilters*/ 131072) {
				toggle_class(div2, "mr-auto", /*appliedFilters*/ ctx[17] === 0);
			}

			if (/*appliedFilters*/ ctx[17] > 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_13(ctx);
					if_block0.c();
					if_block0.m(div5, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*selectedCount*/ ctx[14] > 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_12(ctx);
					if_block1.c();
					if_block1.m(div5, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block2) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block2 = if_blocks[current_block_type_index];

					if (!if_block2) {
						if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block2.c();
					}

					transition_in(if_block2, 1);
					if_block2.m(div6, t6);
				} else {
					if_block2 = null;
				}
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_3(ctx, dirty);

			if (current_block_type_index_1 === previous_block_index_1) {
				if (~current_block_type_index_1) {
					if_blocks_1[current_block_type_index_1].p(ctx, dirty);
				}
			} else {
				if (if_block3) {
					group_outros();

					transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
						if_blocks_1[previous_block_index_1] = null;
					});

					check_outros();
				}

				if (~current_block_type_index_1) {
					if_block3 = if_blocks_1[current_block_type_index_1];

					if (!if_block3) {
						if_block3 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
						if_block3.c();
					}

					transition_in(if_block3, 1);
					if_block3.m(div6, null);
				} else {
					if_block3 = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(toastmanager.$$.fragment, local);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(toastmanager.$$.fragment, local);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			destroy_component(toastmanager);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function isUnread(row) {
	return row["meta_unread"] === true;
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { getRows } = $$props;
	let { defaultSortColumn = "" } = $$props;
	let { searchPlaceHolder = "Search" } = $$props;
	let { columnMeta = {} } = $$props;
	let id = "";
	let rows = [];
	let filtered = [];
	let columns = [];
	let filteredColumns = [];
	let query = "";
	let fuse;
	let state = LoadState.Loading;
	let range = { min: 1, max: 1 };
	let widths = {};
	let canvasContext;
	let sort = "";
	let sortDirection = "";
	let allRowsSelected = false;
	let selectedCount = 0;
	let modal = "";
	let filters = { onlyUnread: false };
	let lastFilters = {};
	let appliedFilters = 0;
	let { headerActions = [] } = $$props;
	let { onEdit = undefined } = $$props;
	let { onDelete = undefined } = $$props;
	let { onRead = undefined } = $$props;
	let { hidden = new Set() } = $$props;
	let { sortColumns = undefined } = $$props;
	let { onFormat = () => undefined } = $$props;

	let { onRowClick = () => {
		
	} } = $$props;

	afterUpdate(() => {
		console.log("after update", filters);

		if (!fastEquals(filters, lastFilters)) {
			lastFilters = fastClone(filters);
			applyFilters();
		}
	});

	function applyFilters() {
		$$invalidate(17, appliedFilters = 0);
		$$invalidate(5, filtered = rows);

		if (filters.onlyUnread) {
			$$invalidate(17, appliedFilters++, appliedFilters);

			$$invalidate(5, filtered = filtered.filter(f => {
				return isUnread(f);
			}));
		}
	}

	function createFuse() {
		const list = rows.map(r => {
			const result = {};

			Object.keys(r).forEach(key => {
				result[key] = isObject(r[key]) ? JSON.stringify(r[key]) : r[key];
			});

			return result;
		});

		return new Fuse(list, { keys: Object.keys(rows[0]) });
	}

	onMount(() => {
		$$invalidate(3, id = randomString());
		hidden.add("table_meta_id");
		const element = document.createElement("canvas");
		canvasContext = element.getContext("2d");
		load();
	});

	function selectAllRows() {
		for (let i = 0; i < filtered.length; i++) {
			if (i >= range.min && i <= range.max) {
				$$invalidate(5, filtered[i].meta_selected = allRowsSelected ? false : true, filtered);
			}
		}

		$$invalidate(13, allRowsSelected = !allRowsSelected);
		let count = 0;

		for (let i = 0; i < filtered.length; i++) {
			if (filtered[i].meta_selected) {
				count++;
			}
		}

		$$invalidate(14, selectedCount = count);
	}

	async function load() {
		try {
			$$invalidate(9, state = LoadState.Loading);
			$$invalidate(4, rows = await getRows());

			if (rows.length === 0) {
				$$invalidate(9, state = LoadState.Finished);
				return;
			}

			rows.map(w => {
				w.table_meta_id = randomString();
				return w;
			});

			$$invalidate(53, fuse = createFuse());
			$$invalidate(5, filtered = rows);
			let allColumns = new Set();

			rows.forEach(r => {
				Object.keys(r).forEach(c => allColumns.add(c));
			});

			$$invalidate(6, columns = Array.from(allColumns));
			$$invalidate(6, columns = sortColumns?.(columns) ?? columns);
			$$invalidate(7, filteredColumns = columns.filter(w => !hidden.has(w)));
			$$invalidate(9, state = LoadState.Finished);

			if (defaultSortColumn) {
				sortColumn(defaultSortColumn);
			}
		} catch(ex) {
			console.error(ex);
			$$invalidate(9, state = LoadState.Failed);
		}
	}

	function sortColumn(column) {
		if (sort === column) {
			$$invalidate(11, sort = column);
			$$invalidate(12, sortDirection = sortDirection === "asc" ? "desc" : "asc");
		} else {
			$$invalidate(11, sort = column);
			$$invalidate(12, sortDirection = "desc");
		}

		let isDate = columnMeta[column]?.type === "date";
		dispatchPrivate(id, "on_sort", { sort, sortDirection });

		$$invalidate(5, filtered = filtered.sort(function (a, b) {
			var nameA = a[sort]?.toString()?.toUpperCase();
			var nameB = b[sort]?.toString()?.toUpperCase();

			if (nameA == null && nameB == null) {
				return 0;
			}

			if (nameA == null) {
				return 1;
			}

			if (nameB == null) {
				return 1;
			}

			if (isDate) {
				if (new Date(nameA).getTime() < new Date(nameB).getTime()) {
					return 1;
				}

				if (new Date(nameA).getTime() > new Date(nameB).getTime()) {
					return -1;
				}
			}

			if (nameA < nameB) {
				return 1;
			}

			if (nameA > nameB) {
				return -1;
			}

			return 0;
		}));

		if (sortDirection === "asc") {
			$$invalidate(5, filtered = filtered.reverse());
		}
	}

	function headerStyle(column) {
		if (widths[column]) {
			return "width: " + widths[column] + "px;";
		}
	}

	function setWidths() {
		let values = filtered.slice(range.min, range.max);
		widths = {};

		values.forEach(value => {
			columns.forEach(c => {
				const v = value[c];
				let width = getTextWidth(v, "");

				if (width < 150) {
					width = 150;
				}

				if (width > 400) {
					width = 400;
				}

				if ((widths[c] ?? 0) < width) {
					widths[c] = width;
				}
			});
		});
	}

	function renderValue(row, column) {
		let value = row[column] ?? "";
		value = onFormat(column, row[column]) ?? value;

		return isObject(value) || Array.isArray(value)
		? JSON.stringify(value)
		: value;
	}

	function getTextWidth(text, font) {
		canvasContext.font = "bold 1em arial";
		return canvasContext.measureText(text).width;
	}

	function toggleColumn(checked, column) {
		checked ? hidden.delete(column) : hidden.add(column);
		$$invalidate(7, filteredColumns = columns.filter(w => !hidden.has(w)));
	}

	function onRowSelected(row) {
		const index = filtered.findIndex(w => w.table_meta_id === row.table_meta_id);

		if (filtered[index].meta_selected) {
			$$invalidate(14, selectedCount--, selectedCount);
			$$invalidate(5, filtered[index].meta_selected = false, filtered);
		} else {
			$$invalidate(14, selectedCount++, selectedCount);
			$$invalidate(5, filtered[index].meta_selected = true, filtered);
		}
	}

	async function markRead(value) {
		const selected = filtered.filter(w => w.meta_selected);
		const ids = new Set(selected.map(s => s.table_meta_id));
		await onRead?.(selected, value);

		$$invalidate(5, filtered = filtered.map(f => {
			const id = f.table_meta_id;

			if (ids.has(id)) {
				f.meta_unread = !value;
			}

			return f;
		}));

		dispatch("show_toast", {
			message: `Item(s) marked as ${value ? "read" : "unread"}.`
		});
	}

	async function deleteEntries() {
		const selected = filtered.filter(w => w.meta_selected);

		if (selected.length !== selectedCount) {
			throw new Error("Selection count did not match actual selected, please try reloading the page.");
		}

		await onDelete?.(selected);

		dispatch("show_toast", {
			title: "Deletion Started",
			message: "Your entries have been queued for deletion."
		});

		$$invalidate(15, modal = "");
		const toRemove = new Set(selected.map(w => w.table_meta_id));

		$$invalidate(5, filtered = filtered.filter(w => {
			return !toRemove.has(w.table_meta_id);
		}));

		$$invalidate(5, filtered = filtered.map(f => {
			f.meta_selected = false;
			return f;
		}));

		$$invalidate(4, rows = rows.filter(w => {
			return !toRemove.has(w.table_meta_id);
		}));

		dispatch("show_toast", { message: `Item(s) deleted.'}.` });
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function input_input_handler() {
		query = this.value;
		$$invalidate(8, query);
	}

	const click_handler_2 = () => $$invalidate(15, modal = "filter");
	const click_handler_3 = () => markRead(true);
	const click_handler_4 = () => markRead(false);
	const click_handler_5 = () => $$invalidate(15, modal = "delete");
	const click_handler_6 = () => $$invalidate(15, modal = "toggle_column");
	const click_handler_7 = column => sortColumn(column);

	const change_handler = (row, e) => {
		onRowSelected(row);
	};

	const click_handler_8 = (row, each_value_1, index) => {
		onRowClick(row);
		$$invalidate(5, each_value_1[index]["meta_unread"] = false, filtered);
	};

	const func = r => {
		if (fastEquals(r, range)) {
			return;
		}

		$$invalidate(10, range = r);
		setWidths();
		$$invalidate(6, columns);
	};

	const change_handler_1 = (column, e) => {
		toggleColumn(e.target.checked, column);
	};

	const func_1 = () => {
		$$invalidate(15, modal = "");
	};

	const func_2 = () => {
		$$invalidate(15, modal = "");
	};

	function input_change_handler() {
		filters.onlyUnread = this.checked;
		$$invalidate(16, filters);
	}

	const func_3 = () => {
		$$invalidate(15, modal = "");
	};

	$$self.$$set = $$props => {
		if ("getRows" in $$props) $$invalidate(27, getRows = $$props.getRows);
		if ("defaultSortColumn" in $$props) $$invalidate(28, defaultSortColumn = $$props.defaultSortColumn);
		if ("searchPlaceHolder" in $$props) $$invalidate(0, searchPlaceHolder = $$props.searchPlaceHolder);
		if ("columnMeta" in $$props) $$invalidate(29, columnMeta = $$props.columnMeta);
		if ("headerActions" in $$props) $$invalidate(30, headerActions = $$props.headerActions);
		if ("onEdit" in $$props) $$invalidate(31, onEdit = $$props.onEdit);
		if ("onDelete" in $$props) $$invalidate(32, onDelete = $$props.onDelete);
		if ("onRead" in $$props) $$invalidate(33, onRead = $$props.onRead);
		if ("hidden" in $$props) $$invalidate(1, hidden = $$props.hidden);
		if ("sortColumns" in $$props) $$invalidate(34, sortColumns = $$props.sortColumns);
		if ("onFormat" in $$props) $$invalidate(35, onFormat = $$props.onFormat);
		if ("onRowClick" in $$props) $$invalidate(2, onRowClick = $$props.onRowClick);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*rows, query*/ 272 | $$self.$$.dirty[1] & /*fuse*/ 4194304) {
			$: {
				if (rows.length === 0) {
					$$invalidate(5, filtered = rows);
				} else if (query === "") {
					$$invalidate(5, filtered = rows);
				} else {
					const result = fuse.search(query);
					$$invalidate(5, filtered = result.map(r => r.item));
				}
			}
		}
	};

	return [
		searchPlaceHolder,
		hidden,
		onRowClick,
		id,
		rows,
		filtered,
		columns,
		filteredColumns,
		query,
		state,
		range,
		sort,
		sortDirection,
		allRowsSelected,
		selectedCount,
		modal,
		filters,
		appliedFilters,
		selectAllRows,
		sortColumn,
		headerStyle,
		setWidths,
		renderValue,
		toggleColumn,
		onRowSelected,
		markRead,
		deleteEntries,
		getRows,
		defaultSortColumn,
		columnMeta,
		headerActions,
		onEdit,
		onDelete,
		onRead,
		sortColumns,
		onFormat,
		click_handler_1,
		click_handler,
		input_input_handler,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		change_handler,
		click_handler_8,
		func,
		change_handler_1,
		func_1,
		func_2,
		input_change_handler,
		func_3
	];
}

class RemoteTable extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				getRows: 27,
				defaultSortColumn: 28,
				searchPlaceHolder: 0,
				columnMeta: 29,
				headerActions: 30,
				onEdit: 31,
				onDelete: 32,
				onRead: 33,
				hidden: 1,
				sortColumns: 34,
				onFormat: 35,
				onRowClick: 2
			},
			[-1, -1, -1]
		);
	}
}

export default RemoteTable;