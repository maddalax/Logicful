/* src/components/DropdownButton.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (42:6) {:else}
function create_else_block(ctx) {
	let a;
	let t_value = /*action*/ ctx[10].label + "";
	let t;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[6](/*action*/ ctx[10], ...args);
	}

	return {
		c() {
			a = element("a");
			t = text(t_value);
			attr(a, "class", "dropdown-item");
			attr(a, "href", "#");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*actions*/ 2 && t_value !== (t_value = /*action*/ ctx[10].label + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (40:6) {#if i === 0}
function create_if_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (39:4) {#each actions as action, i}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*i*/ ctx[12] === 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let button0;

	let t0_value = (/*processing*/ ctx[0]
	? `${/*processingLabel*/ ctx[2]}`
	: /*actions*/ ctx[1][0].label) + "";

	let t0;
	let button0_class_value;
	let button0_onclick_value;
	let t1;
	let button1;
	let t4;
	let div0;
	let each_value = /*actions*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			button0 = element("button");
			t0 = text(t0_value);
			t1 = space();
			button1 = element("button");

			button1.innerHTML = `<span class="fas fa-angle-down dropdown-arrow"></span> 
    <span class="sr-only">Toggle Dropdown</span>`;

			t4 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(button0, "type", "button");
			attr(button0, "class", button0_class_value = `btn btn-primary`);
			attr(button0, "onclick", button0_onclick_value = /*func*/ ctx[5]);
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-primary dropdown-toggle dropdown-toggle-split");
			attr(button1, "data-toggle", "dropdown");
			attr(button1, "aria-haspopup", "true");
			attr(button1, "aria-expanded", "false");
			attr(div0, "class", "dropdown-menu");
			attr(div1, "class", "btn-group mr-2 mb-2");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, button0);
			append(button0, t0);
			append(div1, t1);
			append(div1, button1);
			append(div1, t4);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*processing, processingLabel, actions*/ 7 && t0_value !== (t0_value = (/*processing*/ ctx[0]
			? `${/*processingLabel*/ ctx[2]}`
			: /*actions*/ ctx[1][0].label) + "")) set_data(t0, t0_value);

			if (dirty & /*actions*/ 2 && button0_onclick_value !== (button0_onclick_value = /*func*/ ctx[5])) {
				attr(button0, "onclick", button0_onclick_value);
			}

			if (dirty & /*executeAction, actions*/ 10) {
				each_value = /*actions*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { label } = $$props;
	let { actions = [] } = $$props;
	let { processing = false } = $$props;
	let { processingLabel = "Processing..." } = $$props;
	let showing = false;

	async function executeAction(action) {
		try {
			$$invalidate(0, processing = true);
			await action.onClick();
		} finally {
			$$invalidate(0, processing = false);
		}
	}

	function show() {
		showing = true;
	}

	function hide() {
		showing = false;
	}

	const func = () => executeAction(actions[0]);
	const click_handler = action => executeAction(action);

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(4, label = $$props.label);
		if ("actions" in $$props) $$invalidate(1, actions = $$props.actions);
		if ("processing" in $$props) $$invalidate(0, processing = $$props.processing);
		if ("processingLabel" in $$props) $$invalidate(2, processingLabel = $$props.processingLabel);
	};

	return [
		processing,
		actions,
		processingLabel,
		executeAction,
		label,
		func,
		click_handler
	];
}

class DropdownButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 4,
			actions: 1,
			processing: 0,
			processingLabel: 2
		});
	}
}

export default DropdownButton;