import './DatePicker.css.proxy.js';
/* src/components/DatePicker.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { onMount } from "../../web_modules/svelte.js";
import Label from "../inputs/Label.js";
import formStore from "../store/FormStore.js";

function create_fragment(ctx) {
	let label;
	let t;
	let input_1;
	let input_1_id_value;
	let input_1_value_value;
	let current;
	label = new Label({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(label.$$.fragment);
			t = space();
			input_1 = element("input");
			attr(input_1, "id", input_1_id_value = /*field*/ ctx[0].id);
			attr(input_1, "type", "text");
			attr(input_1, "class", "form-control date-input-hidden svelte-ig8nfp");
			input_1.value = input_1_value_value = /*value*/ ctx[1] ?? "";
			attr(input_1, "placeholder", "Select a date...");
		},
		m(target, anchor) {
			mount_component(label, target, anchor);
			insert(target, t, anchor);
			insert(target, input_1, anchor);
			/*input_1_binding*/ ctx[4](input_1);
			current = true;
		},
		p(ctx, [dirty]) {
			const label_changes = {};
			if (dirty & /*field*/ 1) label_changes.field = /*field*/ ctx[0];
			label.$set(label_changes);

			if (!current || dirty & /*field*/ 1 && input_1_id_value !== (input_1_id_value = /*field*/ ctx[0].id)) {
				attr(input_1, "id", input_1_id_value);
			}

			if (!current || dirty & /*value*/ 2 && input_1_value_value !== (input_1_value_value = /*value*/ ctx[1] ?? "") && input_1.value !== input_1_value_value) {
				input_1.value = input_1_value_value;
			}
		},
		i(local) {
			if (current) return;
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(label, detaching);
			if (detaching) detach(t);
			if (detaching) detach(input_1);
			/*input_1_binding*/ ctx[4](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { field } = $$props;

	let { onChange = () => {
		
	} } = $$props;

	let value = "";
	let picker;
	let input;

	onMount(async () => {
		const flatpickr = await import("../../web_modules/flatpickr.js");

		//@ts-ignore
		import("../../web_modules/flatpickr/dist/flatpickr.min.css.proxy.js");

		if (!input) {
			return;
		}

		picker = flatpickr.default(input, {
			onChange: (selectedDates, dateStr, instance) => {
				$$invalidate(1, value = dateStr);
				$$invalidate(0, field.value = value, field);

				formStore.set(field, {
					field: "value",
					value: field.value,
					fromUser: true
				});

				onChange(value);
			},
			altInput: true,
			altFormat: "F j, Y h:i K",
			dateFormat: "Y-m-d h:i K",
			enableTime: true
		});
	});

	function clearDate() {
		picker.clear();
	}

	function input_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			input = $$value;
			$$invalidate(2, input);
		});
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("onChange" in $$props) $$invalidate(3, onChange = $$props.onChange);
	};

	return [field, value, input, onChange, input_1_binding];
}

class DatePicker extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0, onChange: 3 });
	}
}

export default DatePicker;