import './Repeater.css.proxy.js';
/* src/components/Repeater.svelte generated by Svelte v3.25.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { dispatch } from "../event/EventBus.js";
import { onMount } from "../../web_modules/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[16] = list;
	child_ctx[17] = i;
	return child_ctx;
}

// (63:6) {:else}
function create_else_block(ctx) {
	let div0;
	let input0;
	let input0_placeholder_value;
	let t;
	let div1;
	let input1;
	let input1_placeholder_value;
	let mounted;
	let dispose;

	function input0_input_handler() {
		/*input0_input_handler*/ ctx[11].call(input0, /*each_value*/ ctx[16], /*i*/ ctx[17]);
	}

	function input1_input_handler() {
		/*input1_input_handler*/ ctx[13].call(input1, /*each_value*/ ctx[16], /*i*/ ctx[17]);
	}

	return {
		c() {
			div0 = element("div");
			input0 = element("input");
			t = space();
			div1 = element("div");
			input1 = element("input");
			attr(input0, "class", "form-control");
			attr(input0, "name", "display");
			attr(input0, "type", "text");
			attr(input0, "placeholder", input0_placeholder_value = "Display");
			attr(div0, "class", "p-1 bd-highlight");
			set_style(div0, "width", "100%");
			attr(input1, "class", "form-control");
			attr(input1, "name", "value");
			attr(input1, "type", "text");
			attr(input1, "placeholder", input1_placeholder_value = "Value");
			attr(div1, "class", "p-1 bd-highlight");
			set_style(div1, "width", "100%");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, input0);
			set_input_value(input0, /*option*/ ctx[15].label);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			append(div1, input1);
			set_input_value(input1, /*option*/ ctx[15].value);

			if (!mounted) {
				dispose = [
					listen(input0, "blur", /*blur_handler_1*/ ctx[10]),
					listen(input0, "input", input0_input_handler),
					listen(input1, "blur", /*blur_handler_2*/ ctx[12]),
					listen(input1, "input", input1_input_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*options*/ 1 && input0.value !== /*option*/ ctx[15].label) {
				set_input_value(input0, /*option*/ ctx[15].label);
			}

			if (dirty & /*options*/ 1 && input1.value !== /*option*/ ctx[15].value) {
				set_input_value(input1, /*option*/ ctx[15].value);
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t);
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (53:6) {#if onlyLabel}
function create_if_block_1(ctx) {
	let div;
	let input;
	let input_placeholder_value;
	let mounted;
	let dispose;

	function input_input_handler() {
		/*input_input_handler*/ ctx[9].call(input, /*each_value*/ ctx[16], /*i*/ ctx[17]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			attr(input, "class", "form-control");
			attr(input, "name", "display");
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = "Option");
			attr(div, "class", "p-1 bd-highlight");
			set_style(div, "width", "100%");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			set_input_value(input, /*option*/ ctx[15].label);

			if (!mounted) {
				dispose = [
					listen(input, "blur", /*blur_handler*/ ctx[8]),
					listen(input, "input", input_input_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*options*/ 1 && input.value !== /*option*/ ctx[15].label) {
				set_input_value(input, /*option*/ ctx[15].label);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (51:2) {#each options as option, i}
function create_each_block(ctx) {
	let div2;
	let t0;
	let div0;
	let span1;
	let t1;
	let div1;
	let span3;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*onlyLabel*/ ctx[2]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	function click_handler(...args) {
		return /*click_handler*/ ctx[14](/*i*/ ctx[17], ...args);
	}

	return {
		c() {
			div2 = element("div");
			if_block.c();
			t0 = space();
			div0 = element("div");
			span1 = element("span");
			span1.innerHTML = `<span class="fas fa-plus svelte-105i2dl"></span>`;
			t1 = space();
			div1 = element("div");
			span3 = element("span");
			span3.innerHTML = `<span class="fas fa-trash svelte-105i2dl"></span>`;
			attr(span1, "class", "icon baseline");
			attr(div0, "class", "bd-highlight");
			attr(span3, "class", "icon baseline");
			attr(div1, "class", "bd-highlight");
			attr(div2, "class", "d-flex flex-row bd-highlight justify-end");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if_block.m(div2, null);
			append(div2, t0);
			append(div2, div0);
			append(div0, span1);
			append(div2, t1);
			append(div2, div1);
			append(div1, span3);

			if (!mounted) {
				dispose = [
					listen(span1, "click", /*addNew*/ ctx[6]),
					listen(span3, "click", click_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div2, t0);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (95:2) {#if helperText}
function create_if_block(ctx) {
	let div;
	let raw_value = (/*helperText*/ ctx[1] ?? "") + "";

	return {
		c() {
			div = element("div");
			attr(div, "class", "helper-text");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*helperText*/ 2 && raw_value !== (raw_value = (/*helperText*/ ctx[1] ?? "") + "")) div.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let label_1;
	let t0;
	let t1;
	let t2;
	let each_value = /*options*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*helperText*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			label_1 = element("label");
			t0 = text(/*label*/ ctx[3]);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			if (if_block) if_block.c();
			set_style(label_1, "margin-left", ".5em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label_1);
			append(label_1, t0);
			append(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append(div, t2);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*label*/ 8) set_data(t0, /*label*/ ctx[3]);

			if (dirty & /*remove, addNew, options, onRepeaterChange, onlyLabel*/ 117) {
				each_value = /*options*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*helperText*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { onChange } = $$props;
	let { helperText = "" } = $$props;
	let { onlyLabel = false } = $$props;
	let { label = "Options" } = $$props;
	let { options = [{ label: "", value: "" }] } = $$props;
	onMount(() => [onRepeaterChange(false)]);

	function onRepeaterChange(user = true) {
		if (onlyLabel) {
			const labels = options.map(m => m.label);
			user && dispatch("user_change", labels);
			onChange?.(labels);
		} else {
			user && dispatch("user_change", options);
			onChange?.(options);
		}
	}

	function remove(option) {
		options.splice(option, 1);
		$$invalidate(0, options = [...options]);
		onRepeaterChange();

		if (options.length === 0) {
			$$invalidate(0, options = [{ label: "", value: "" }]);
		}
	}

	function addNew() {
		$$invalidate(0, options = options.concat([{ label: "", value: "" }]));
	}

	const blur_handler = () => onRepeaterChange(true);

	function input_input_handler(each_value, i) {
		each_value[i].label = this.value;
		$$invalidate(0, options);
	}

	const blur_handler_1 = () => onRepeaterChange(true);

	function input0_input_handler(each_value, i) {
		each_value[i].label = this.value;
		$$invalidate(0, options);
	}

	const blur_handler_2 = () => onRepeaterChange(true);

	function input1_input_handler(each_value, i) {
		each_value[i].value = this.value;
		$$invalidate(0, options);
	}

	const click_handler = i => remove(i);

	$$self.$$set = $$props => {
		if ("onChange" in $$props) $$invalidate(7, onChange = $$props.onChange);
		if ("helperText" in $$props) $$invalidate(1, helperText = $$props.helperText);
		if ("onlyLabel" in $$props) $$invalidate(2, onlyLabel = $$props.onlyLabel);
		if ("label" in $$props) $$invalidate(3, label = $$props.label);
		if ("options" in $$props) $$invalidate(0, options = $$props.options);
	};

	return [
		options,
		helperText,
		onlyLabel,
		label,
		onRepeaterChange,
		remove,
		addNew,
		onChange,
		blur_handler,
		input_input_handler,
		blur_handler_1,
		input0_input_handler,
		blur_handler_2,
		input1_input_handler,
		click_handler
	];
}

class Repeater extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			onChange: 7,
			helperText: 1,
			onlyLabel: 2,
			label: 3,
			options: 0
		});
	}
}

export default Repeater;