import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, c as claim_element, a as children, d as detach, g as set_style, f as attr, a0 as toggle_class, h as insert, j as append, A as group_outros, u as transition_out, B as check_outros, r as transition_in, o as onMount, L as add_render_callback, af as create_bidirectional_transition, n as noop, m as create_component, p as claim_component, q as mount_component, v as destroy_component, a1 as assign, Z as get_spread_update, _ as get_spread_object, ah as createCommonjsModule, E as commonjsGlobal, ai as getDefaultExportFromCjs, a7 as __awaiter$1, T as empty, t as text, k as space, b as claim_text, l as claim_space, C as listen, $ as prevent_default, y as set_data, N as update_keyed_each, O as outro_and_destroy_block, x as dispatch } from './client.a93cf518.js';
import { F as FieldValueLoader, f as formStore, a as FullName, R as RadioGroup, C as CheckboxGroup, b as FileUpload, D as DatePicker, S as Switch, c as Spacer, T as TextArea, d as RichTextDisplay, e as ComboBox, g as TextInput, A as Address, s as subscribeFieldChange } from './FileUpload.6e1eb6f3.js';
import { L as LoadState, f as fastClone, c as isObject } from './fuse.esm.4840cecb.js';
import { a as postApi } from './ApiService.7fbbc2d7.js';
import { f as fade, L as LogicBuilder } from './LogicBuilder.d2e791a5.js';
import { g as getUrlParameter } from './Http.ea6dfc47.js';

/* src\features\form\live\LiveField.svelte generated by Svelte v3.24.1 */

function create_else_block(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let div_transition;
	let current;

	const if_block_creators = [
		create_if_block_1,
		create_if_block_2,
		create_if_block_3,
		create_if_block_4,
		create_if_block_5,
		create_if_block_6,
		create_if_block_7,
		create_if_block_8,
		create_if_block_9,
		create_if_block_10,
		create_if_block_11,
		create_if_block_12,
		create_if_block_13
	];

	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*field*/ ctx[0].type === "address") return 0;
		if (/*field*/ ctx[0].type === "string") return 1;
		if (/*field*/ ctx[0].type === "number") return 2;
		if (/*field*/ ctx[0].type === "combobox") return 3;
		if (/*field*/ ctx[0].type === "block") return 4;
		if (/*field*/ ctx[0].type === "block-editor") return 5;
		if (/*field*/ ctx[0].type === "spacer") return 6;
		if (/*field*/ ctx[0].type === "switch") return 7;
		if (/*field*/ ctx[0].type === "date") return 8;
		if (/*field*/ ctx[0].type === "file") return 9;
		if (/*field*/ ctx[0].type === "checkbox-group") return 10;
		if (/*field*/ ctx[0].type === "radio-group") return 11;
		if (/*field*/ ctx[0].type === "full-name") return 12;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 300 }, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(if_block);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 300 }, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (69:4) {#if hidden}
function create_if_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			children(span).forEach(detach);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (97:45) 
function create_if_block_13(ctx) {
	let fullname;
	let current;

	fullname = new FullName({
			props: {
				field: /*field*/ ctx[0],
				value: /*value*/ ctx[3]
			}
		});

	return {
		c() {
			create_component(fullname.$$.fragment);
		},
		l(nodes) {
			claim_component(fullname.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(fullname, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const fullname_changes = {};
			if (dirty & /*field*/ 1) fullname_changes.field = /*field*/ ctx[0];
			if (dirty & /*value*/ 8) fullname_changes.value = /*value*/ ctx[3];
			fullname.$set(fullname_changes);
		},
		i(local) {
			if (current) return;
			transition_in(fullname.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fullname.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(fullname, detaching);
		}
	};
}

// (95:47) 
function create_if_block_12(ctx) {
	let radiogroup;
	let current;
	radiogroup = new RadioGroup({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(radiogroup.$$.fragment);
		},
		l(nodes) {
			claim_component(radiogroup.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(radiogroup, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const radiogroup_changes = {};
			if (dirty & /*field*/ 1) radiogroup_changes.field = /*field*/ ctx[0];
			radiogroup.$set(radiogroup_changes);
		},
		i(local) {
			if (current) return;
			transition_in(radiogroup.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(radiogroup.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(radiogroup, detaching);
		}
	};
}

// (93:50) 
function create_if_block_11(ctx) {
	let checkboxgroup;
	let current;
	checkboxgroup = new CheckboxGroup({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(checkboxgroup.$$.fragment);
		},
		l(nodes) {
			claim_component(checkboxgroup.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(checkboxgroup, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkboxgroup_changes = {};
			if (dirty & /*field*/ 1) checkboxgroup_changes.field = /*field*/ ctx[0];
			checkboxgroup.$set(checkboxgroup_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkboxgroup.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkboxgroup.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkboxgroup, detaching);
		}
	};
}

// (91:40) 
function create_if_block_10(ctx) {
	let fileupload;
	let current;
	fileupload = new FileUpload({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(fileupload.$$.fragment);
		},
		l(nodes) {
			claim_component(fileupload.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(fileupload, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const fileupload_changes = {};
			if (dirty & /*field*/ 1) fileupload_changes.field = /*field*/ ctx[0];
			fileupload.$set(fileupload_changes);
		},
		i(local) {
			if (current) return;
			transition_in(fileupload.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fileupload.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(fileupload, detaching);
		}
	};
}

// (89:40) 
function create_if_block_9(ctx) {
	let datepicker;
	let current;
	const datepicker_spread_levels = [{ field: /*field*/ ctx[0] }, /*config*/ ctx[1]];
	let datepicker_props = {};

	for (let i = 0; i < datepicker_spread_levels.length; i += 1) {
		datepicker_props = assign(datepicker_props, datepicker_spread_levels[i]);
	}

	datepicker = new DatePicker({ props: datepicker_props });

	return {
		c() {
			create_component(datepicker.$$.fragment);
		},
		l(nodes) {
			claim_component(datepicker.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const datepicker_changes = (dirty & /*field, config*/ 3)
			? get_spread_update(datepicker_spread_levels, [
					dirty & /*field*/ 1 && { field: /*field*/ ctx[0] },
					dirty & /*config*/ 2 && get_spread_object(/*config*/ ctx[1])
				])
			: {};

			datepicker.$set(datepicker_changes);
		},
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(datepicker, detaching);
		}
	};
}

// (87:42) 
function create_if_block_8(ctx) {
	let switch_1;
	let current;
	const switch_1_spread_levels = [{ field: /*field*/ ctx[0] }, /*config*/ ctx[1]];
	let switch_1_props = {};

	for (let i = 0; i < switch_1_spread_levels.length; i += 1) {
		switch_1_props = assign(switch_1_props, switch_1_spread_levels[i]);
	}

	switch_1 = new Switch({ props: switch_1_props });

	return {
		c() {
			create_component(switch_1.$$.fragment);
		},
		l(nodes) {
			claim_component(switch_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_1_changes = (dirty & /*field, config*/ 3)
			? get_spread_update(switch_1_spread_levels, [
					dirty & /*field*/ 1 && { field: /*field*/ ctx[0] },
					dirty & /*config*/ 2 && get_spread_object(/*config*/ ctx[1])
				])
			: {};

			switch_1.$set(switch_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(switch_1, detaching);
		}
	};
}

// (85:42) 
function create_if_block_7(ctx) {
	let spacer;
	let current;
	spacer = new Spacer({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(spacer.$$.fragment);
		},
		l(nodes) {
			claim_component(spacer.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(spacer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const spacer_changes = {};
			if (dirty & /*field*/ 1) spacer_changes.field = /*field*/ ctx[0];
			spacer.$set(spacer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(spacer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spacer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(spacer, detaching);
		}
	};
}

// (83:48) 
function create_if_block_6(ctx) {
	let textarea;
	let current;
	const textarea_spread_levels = [{ field: /*field*/ ctx[0] }, /*config*/ ctx[1]];
	let textarea_props = {};

	for (let i = 0; i < textarea_spread_levels.length; i += 1) {
		textarea_props = assign(textarea_props, textarea_spread_levels[i]);
	}

	textarea = new TextArea({ props: textarea_props });

	return {
		c() {
			create_component(textarea.$$.fragment);
		},
		l(nodes) {
			claim_component(textarea.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(textarea, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textarea_changes = (dirty & /*field, config*/ 3)
			? get_spread_update(textarea_spread_levels, [
					dirty & /*field*/ 1 && { field: /*field*/ ctx[0] },
					dirty & /*config*/ 2 && get_spread_object(/*config*/ ctx[1])
				])
			: {};

			textarea.$set(textarea_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textarea.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textarea.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textarea, detaching);
		}
	};
}

// (81:41) 
function create_if_block_5(ctx) {
	let richtextdisplay;
	let current;
	richtextdisplay = new RichTextDisplay({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(richtextdisplay.$$.fragment);
		},
		l(nodes) {
			claim_component(richtextdisplay.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(richtextdisplay, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const richtextdisplay_changes = {};
			if (dirty & /*field*/ 1) richtextdisplay_changes.field = /*field*/ ctx[0];
			richtextdisplay.$set(richtextdisplay_changes);
		},
		i(local) {
			if (current) return;
			transition_in(richtextdisplay.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(richtextdisplay.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(richtextdisplay, detaching);
		}
	};
}

// (79:44) 
function create_if_block_4(ctx) {
	let combobox;
	let current;
	const combobox_spread_levels = [{ field: /*field*/ ctx[0] }, /*config*/ ctx[1]];
	let combobox_props = {};

	for (let i = 0; i < combobox_spread_levels.length; i += 1) {
		combobox_props = assign(combobox_props, combobox_spread_levels[i]);
	}

	combobox = new ComboBox({ props: combobox_props });

	return {
		c() {
			create_component(combobox.$$.fragment);
		},
		l(nodes) {
			claim_component(combobox.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(combobox, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const combobox_changes = (dirty & /*field, config*/ 3)
			? get_spread_update(combobox_spread_levels, [
					dirty & /*field*/ 1 && { field: /*field*/ ctx[0] },
					dirty & /*config*/ 2 && get_spread_object(/*config*/ ctx[1])
				])
			: {};

			combobox.$set(combobox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(combobox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(combobox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(combobox, detaching);
		}
	};
}

// (77:42) 
function create_if_block_3(ctx) {
	let textinput;
	let current;

	textinput = new TextInput({
			props: { field: /*field*/ ctx[0], type: "number" }
		});

	return {
		c() {
			create_component(textinput.$$.fragment);
		},
		l(nodes) {
			claim_component(textinput.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(textinput, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textinput_changes = {};
			if (dirty & /*field*/ 1) textinput_changes.field = /*field*/ ctx[0];
			textinput.$set(textinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textinput, detaching);
		}
	};
}

// (75:42) 
function create_if_block_2(ctx) {
	let textinput;
	let current;
	textinput = new TextInput({ props: { field: /*field*/ ctx[0] } });

	return {
		c() {
			create_component(textinput.$$.fragment);
		},
		l(nodes) {
			claim_component(textinput.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(textinput, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textinput_changes = {};
			if (dirty & /*field*/ 1) textinput_changes.field = /*field*/ ctx[0];
			textinput.$set(textinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textinput, detaching);
		}
	};
}

// (73:8) {#if field.type === 'address'}
function create_if_block_1(ctx) {
	let address;
	let current;

	address = new Address({
			props: {
				field: /*field*/ ctx[0],
				value: /*value*/ ctx[3]
			}
		});

	return {
		c() {
			create_component(address.$$.fragment);
		},
		l(nodes) {
			claim_component(address.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(address, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const address_changes = {};
			if (dirty & /*field*/ 1) address_changes.field = /*field*/ ctx[0];
			if (dirty & /*value*/ 8) address_changes.value = /*value*/ ctx[3];
			address.$set(address_changes);
		},
		i(local) {
			if (current) return;
			transition_in(address.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(address.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(address, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*hidden*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			if_block.l(div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(div0, "padding", ".75em 0.6em");
			set_style(div0, "border-radius", "1em");
			set_style(div1, "margin-top", ".3em");
			attr(div1, "class", "svelte-1ifx1we");
			toggle_class(div1, "hidden", /*hidden*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			if (dirty & /*hidden*/ 4) {
				toggle_class(div1, "hidden", /*hidden*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	
	let { field } = $$props;
	let state = LoadState.NotStarted;
	let value;
	let lastValue;
	let { config = {} } = $$props;
	let { hidden = false } = $$props;
	onMount(load);

	function load() {
		var _a;

		return __awaiter(this, void 0, void 0, function* () {
			lastValue = field.value;

			if (((_a = field.value) !== null && _a !== void 0
			? _a
			: field.defaultValue) != null) {
				state = LoadState.Loading;

				try {
					const loader = new FieldValueLoader();
					const result = yield loader.load(field);
					$$invalidate(3, value = result);
					$$invalidate(0, field.value = result, field);

					formStore.set(field, {
						value: result,
						field: "value",
						fromUser: false
					});

					state = LoadState.Finished;
				} catch(e) {
					console.error(e);
					state = LoadState.Failed;
				}
			}
		});
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("config" in $$props) $$invalidate(1, config = $$props.config);
		if ("hidden" in $$props) $$invalidate(2, hidden = $$props.hidden);
	};

	return [field, config, hidden, value];
}

class LiveField extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0, config: 1, hidden: 2 });
	}
}

var es5 = createCommonjsModule(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default;},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default;},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default;},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default;},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return "microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default;}})}));
});

var Bowser = /*@__PURE__*/getDefaultExportFromCjs(es5);

var traverse_1 = createCommonjsModule(function (module) {
var traverse = module.exports = function (obj) {
    return new Traverse(obj);
};

function Traverse (obj) {
    this.value = obj;
}

Traverse.prototype.get = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            node = undefined;
            break;
        }
        node = node[key];
    }
    return node;
};

Traverse.prototype.has = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            return false;
        }
        node = node[key];
    }
    return true;
};

Traverse.prototype.set = function (ps, value) {
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i ++) {
        var key = ps[i];
        if (!hasOwnProperty.call(node, key)) node[key] = {};
        node = node[key];
    }
    node[ps[i]] = value;
    return value;
};

Traverse.prototype.map = function (cb) {
    return walk(this.value, cb, true);
};

Traverse.prototype.forEach = function (cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
};

Traverse.prototype.reduce = function (cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) {
        if (!this.isRoot || !skip) {
            acc = cb.call(this, acc, x);
        }
    });
    return acc;
};

Traverse.prototype.paths = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.path); 
    });
    return acc;
};

Traverse.prototype.nodes = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.node);
    });
    return acc;
};

Traverse.prototype.clone = function () {
    var parents = [], nodes = [];
    
    return (function clone (src) {
        for (var i = 0; i < parents.length; i++) {
            if (parents[i] === src) {
                return nodes[i];
            }
        }
        
        if (typeof src === 'object' && src !== null) {
            var dst = copy(src);
            
            parents.push(src);
            nodes.push(dst);
            
            forEach(objectKeys(src), function (key) {
                dst[key] = clone(src[key]);
            });
            
            parents.pop();
            nodes.pop();
            return dst;
        }
        else {
            return src;
        }
    })(this.value);
};

function walk (root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;
    
    return (function walker (node_) {
        var node = immutable ? copy(node_) : node_;
        var modifiers = {};
        
        var keepGoing = true;
        
        var state = {
            node : node,
            node_ : node_,
            path : [].concat(path),
            parent : parents[parents.length - 1],
            parents : parents,
            key : path.slice(-1)[0],
            isRoot : path.length === 0,
            level : path.length,
            circular : null,
            update : function (x, stopHere) {
                if (!state.isRoot) {
                    state.parent.node[state.key] = x;
                }
                state.node = x;
                if (stopHere) keepGoing = false;
            },
            'delete' : function (stopHere) {
                delete state.parent.node[state.key];
                if (stopHere) keepGoing = false;
            },
            remove : function (stopHere) {
                if (isArray(state.parent.node)) {
                    state.parent.node.splice(state.key, 1);
                }
                else {
                    delete state.parent.node[state.key];
                }
                if (stopHere) keepGoing = false;
            },
            keys : null,
            before : function (f) { modifiers.before = f; },
            after : function (f) { modifiers.after = f; },
            pre : function (f) { modifiers.pre = f; },
            post : function (f) { modifiers.post = f; },
            stop : function () { alive = false; },
            block : function () { keepGoing = false; }
        };
        
        if (!alive) return state;
        
        function updateState() {
            if (typeof state.node === 'object' && state.node !== null) {
                if (!state.keys || state.node_ !== state.node) {
                    state.keys = objectKeys(state.node);
                }
                
                state.isLeaf = state.keys.length == 0;
                
                for (var i = 0; i < parents.length; i++) {
                    if (parents[i].node_ === node_) {
                        state.circular = parents[i];
                        break;
                    }
                }
            }
            else {
                state.isLeaf = true;
                state.keys = null;
            }
            
            state.notLeaf = !state.isLeaf;
            state.notRoot = !state.isRoot;
        }
        
        updateState();
        
        // use return values to update if defined
        var ret = cb.call(state, state.node);
        if (ret !== undefined && state.update) state.update(ret);
        
        if (modifiers.before) modifiers.before.call(state, state.node);
        
        if (!keepGoing) return state;
        
        if (typeof state.node == 'object'
        && state.node !== null && !state.circular) {
            parents.push(state);
            
            updateState();
            
            forEach(state.keys, function (key, i) {
                path.push(key);
                
                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
                
                var child = walker(state.node[key]);
                if (immutable && hasOwnProperty.call(state.node, key)) {
                    state.node[key] = child.node;
                }
                
                child.isLast = i == state.keys.length - 1;
                child.isFirst = i == 0;
                
                if (modifiers.post) modifiers.post.call(state, child);
                
                path.pop();
            });
            parents.pop();
        }
        
        if (modifiers.after) modifiers.after.call(state, state.node);
        
        return state;
    })(root).node;
}

function copy (src) {
    if (typeof src === 'object' && src !== null) {
        var dst;
        
        if (isArray(src)) {
            dst = [];
        }
        else if (isDate(src)) {
            dst = new Date(src.getTime ? src.getTime() : src);
        }
        else if (isRegExp(src)) {
            dst = new RegExp(src);
        }
        else if (isError(src)) {
            dst = { message: src.message };
        }
        else if (isBoolean(src)) {
            dst = new Boolean(src);
        }
        else if (isNumber(src)) {
            dst = new Number(src);
        }
        else if (isString(src)) {
            dst = new String(src);
        }
        else if (Object.create && Object.getPrototypeOf) {
            dst = Object.create(Object.getPrototypeOf(src));
        }
        else if (src.constructor === Object) {
            dst = {};
        }
        else {
            var proto =
                (src.constructor && src.constructor.prototype)
                || src.__proto__
                || {}
            ;
            var T = function () {};
            T.prototype = proto;
            dst = new T;
        }
        
        forEach(objectKeys(src), function (key) {
            dst[key] = src[key];
        });
        return dst;
    }
    else return src;
}

var objectKeys = Object.keys || function keys (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

function toS (obj) { return Object.prototype.toString.call(obj) }
function isDate (obj) { return toS(obj) === '[object Date]' }
function isRegExp (obj) { return toS(obj) === '[object RegExp]' }
function isError (obj) { return toS(obj) === '[object Error]' }
function isBoolean (obj) { return toS(obj) === '[object Boolean]' }
function isNumber (obj) { return toS(obj) === '[object Number]' }
function isString (obj) { return toS(obj) === '[object String]' }

var isArray = Array.isArray || function isArray (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

forEach(objectKeys(Traverse.prototype), function (key) {
    traverse[key] = function (obj) {
        var args = [].slice.call(arguments, 1);
        var t = new Traverse(obj);
        return t[key].apply(t, args);
    };
});

var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
    return key in obj;
};
});

const excluded = ['block'];
function submitForm() {
    return __awaiter$1(this, void 0, void 0, function* () {
        const form = formStore.getForm();
        const clone = fastClone(form);
        const id = form.id;
        const results = {};
        const fieldMeta = {};
        const meta = {};
        const ignored = ['name', 'value', 'type'];
        // Parse out the values of the form by deleting
        // any key that isn't in the ignored list.
        traverse_1(form).forEach(function (x) {
            //@ts-ignore
            if (!this.key || this.key === 'fields') {
                return;
            }
            if (isObject(x)) {
                let hasValue = false;
                Object.keys(x).forEach(k => {
                    if (k === 'value') {
                        hasValue = true;
                    }
                });
                if (hasValue) {
                    Object.keys(x).forEach(k => {
                        const v = x[k];
                        if (k === "value") {
                            return;
                        }
                        if (isObject(v) || Array.isArray(v)) {
                            delete x[k];
                        }
                    });
                }
            }
            if (isObject(x) || Array.isArray(x)) {
                return;
            }
            //@ts-ignore
            if (!ignored.includes(this.key)) {
                //@ts-ignore
                const last = this.path[this.path.length - 2];
                if (last === 'value') {
                    return;
                }
                //@ts-ignore
                this.delete();
            }
        });
        form.fields.forEach(f => {
            var _a, _b;
            if (f.name == null) {
                return;
            }
            if (excluded.includes(f.type)) {
                return;
            }
            results[f.name] = (_b = (_a = f.value) !== null && _a !== void 0 ? _a : f.defaultValue) !== null && _b !== void 0 ? _b : null;
            if (!fieldMeta[f.name]) {
                fieldMeta[f.name] = {};
            }
            if (f.value == null) {
                fieldMeta[f.name].userSelectedValue = false;
            }
            fieldMeta[f.name].type = f.type;
        });
        try {
            meta["env"] = Bowser.getParser(window.navigator.userAgent).getResult();
        }
        catch (ex) {
        }
        const submission = {
            formId: id,
            details: results,
            fieldMeta,
            meta
        };
        yield postApi(`form/${id}/submission`, submission);
    });
}

/* src\features\form\live\LiveForm.svelte generated by Svelte v3.24.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (79:6) {:else}
function create_else_block$1(ctx) {
	let div;
	let livefield;
	let t;
	let current;

	livefield = new LiveField({
			props: {
				field: fastClone(/*field*/ ctx[6]),
				hidden: true
			}
		});

	return {
		c() {
			div = element("div");
			create_component(livefield.$$.fragment);
			t = space();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(livefield.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(livefield, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const livefield_changes = {};
			if (dirty & /*form*/ 1) livefield_changes.field = fastClone(/*field*/ ctx[6]);
			livefield.$set(livefield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(livefield.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(livefield.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(livefield);
		}
	};
}

// (75:6) {#if display(field)}
function create_if_block_4$1(ctx) {
	let div;
	let livefield;
	let t;
	let div_transition;
	let current;

	livefield = new LiveField({
			props: { field: fastClone(/*field*/ ctx[6]) }
		});

	return {
		c() {
			div = element("div");
			create_component(livefield.$$.fragment);
			t = space();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(livefield.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(livefield, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const livefield_changes = {};
			if (dirty & /*form*/ 1) livefield_changes.field = fastClone(/*field*/ ctx[6]);
			livefield.$set(livefield_changes);
		},
		i(local) {
			if (current) return;
			transition_in(livefield.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(livefield.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(livefield);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (74:4) {#each form.fields as field (field.id)}
function create_each_block(key_1, ctx) {
	let first;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_4$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*form*/ 1) show_if = !!/*display*/ ctx[2](/*field*/ ctx[6]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l(nodes) {
			first = empty();
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h() {
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (92:41) 
function create_if_block_3$1(ctx) {
	let button;
	let t;

	return {
		c() {
			button = element("button");
			t = text("Submitted Successfully.");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { style: true, class: true, disabled: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Submitted Successfully.");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (90:40) 
function create_if_block_2$1(ctx) {
	let button;
	let t;

	return {
		c() {
			button = element("button");
			t = text("Submitting...");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { style: true, class: true, disabled: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Submitting...");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (88:39) 
function create_if_block_1$1(ctx) {
	let button;
	let t;

	return {
		c() {
			button = element("button");
			t = text("Failed to Submit, Click To Try Again");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { style: true, class: true, type: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Failed to Submit, Click To Try Again");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "submit");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (86:2) {#if state === LoadState.NotStarted}
function create_if_block$1(ctx) {
	let button;
	let t;

	return {
		c() {
			button = element("button");
			t = text("Submit");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { style: true, class: true, type: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Submit");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(button, "margin-left", "0.5em");
			set_style(button, "margin-bottom", "2em");
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "submit");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

function create_fragment$1(ctx) {
	let div0;
	let h4;
	let t0_value = (/*form*/ ctx[0].title ?? "Form Title") + "";
	let t0;
	let t1;
	let small;
	let t2_value = (/*form*/ ctx[0].description ?? "") + "";
	let t2;
	let t3;
	let hr;
	let t4;
	let form_1;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t5;
	let current;
	let mounted;
	let dispose;
	let each_value = /*form*/ ctx[0].fields;
	const get_key = ctx => /*field*/ ctx[6].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	function select_block_type_1(ctx, dirty) {
		if (/*state*/ ctx[1] === LoadState.NotStarted) return create_if_block$1;
		if (/*state*/ ctx[1] === LoadState.Failed) return create_if_block_1$1;
		if (/*state*/ ctx[1] === LoadState.Loading) return create_if_block_2$1;
		if (/*state*/ ctx[1] === LoadState.Finished) return create_if_block_3$1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			div0 = element("div");
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			small = element("small");
			t2 = text(t2_value);
			t3 = space();
			hr = element("hr");
			t4 = space();
			form_1 = element("form");
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			h4 = claim_element(div0_nodes, "H4", {});
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, t0_value);
			h4_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			small = claim_element(div0_nodes, "SMALL", { class: true });
			var small_nodes = children(small);
			t2 = claim_text(small_nodes, t2_value);
			small_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);
			hr = claim_element(div0_nodes, "HR", {});
			div0_nodes.forEach(detach);
			t4 = claim_space(nodes);
			form_1 = claim_element(nodes, "FORM", {});
			var form_1_nodes = children(form_1);
			div1 = claim_element(form_1_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach);
			t5 = claim_space(form_1_nodes);
			if (if_block) if_block.l(form_1_nodes);
			form_1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(small, "class", "text-gray-700");
			set_style(div0, "padding-left", "0.5em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h4);
			append(h4, t0);
			append(div0, t1);
			append(div0, small);
			append(small, t2);
			append(div0, t3);
			append(div0, hr);
			insert(target, t4, anchor);
			insert(target, form_1, anchor);
			append(form_1, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(form_1, t5);
			if (if_block) if_block.m(form_1, null);
			current = true;

			if (!mounted) {
				dispose = listen(form_1, "submit", prevent_default(/*onSubmit*/ ctx[3]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*form*/ 1) && t0_value !== (t0_value = (/*form*/ ctx[0].title ?? "Form Title") + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*form*/ 1) && t2_value !== (t2_value = (/*form*/ ctx[0].description ?? "") + "")) set_data(t2, t2_value);

			if (dirty & /*fastClone, form, display*/ 5) {
				const each_value = /*form*/ ctx[0].fields;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}

			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(form_1, null);
				}
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t4);
			if (detaching) detach(form_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	
	
	let { form } = $$props;
	let { mode = "" } = $$props;
	let state = LoadState.NotStarted;

	subscribeFieldChange(updatedField => {
		if (!form || !form.fields) {
			return;
		}

		const index = form.fields.findIndex(w => w.id === updatedField.id);

		if (index === -1) {
			return;
		}

		$$invalidate(0, form.fields[index].updated = !form.fields[index].updated, form);

		const fieldsWithRules = form.fields.filter(w => {
			if (!w.logic || !w.logic.rules) {
				return false;
			}

			const hasRule = w.logic.rules.find(rule => rule.field === updatedField.id);
			return hasRule != null;
		});

		for (let fieldWithRule of fieldsWithRules) {
			let ruleIndex = form.fields.findIndex(w => w.id === fieldWithRule.id);
			$$invalidate(0, form.fields[ruleIndex].updated = !form.fields[ruleIndex].updated, form);
		}
	});

	function display(field) {
		if (!field.logic) {
			return true;
		}

		const builder = new LogicBuilder();
		return builder.evaluate(field);
	}

	function onSubmit() {
		return __awaiter(this, void 0, void 0, function* () {
			$$invalidate(1, state = LoadState.Loading);

			try {
				yield submitForm();
				$$invalidate(1, state = LoadState.Finished);
			} catch(ex) {
				console.error(ex);
				$$invalidate(1, state = LoadState.Failed);
			}
		});
	}

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("mode" in $$props) $$invalidate(4, mode = $$props.mode);
	};

	return [form, state, display, onSubmit, mode];
}

class LiveForm extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { form: 0, mode: 4 });
	}
}

/* src\routes\preview\index.svelte generated by Svelte v3.24.1 */

function create_if_block_1$2(ctx) {
	let div;
	let t0;
	let strong;
	let t1;
	let t2;
	let button;
	let span;
	let t3;

	return {
		c() {
			div = element("div");
			t0 = text("You are viewing a live preview of how your form will display and act once it is published. This preview will ");
			strong = element("strong");
			t1 = text("live update");
			t2 = text(" when changes are made from the form builder, no save neeed.\r\n    ");
			button = element("button");
			span = element("span");
			t3 = text("×");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true, role: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "You are viewing a live preview of how your form will display and act once it is published. This preview will ");
			strong = claim_element(div_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t1 = claim_text(strong_nodes, "live update");
			strong_nodes.forEach(detach);
			t2 = claim_text(div_nodes, " when changes are made from the form builder, no save neeed.\r\n    ");

			button = claim_element(div_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-dismiss": true,
				"aria-label": true
			});

			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { "aria-hidden": true });
			var span_nodes = children(span);
			t3 = claim_text(span_nodes, "×");
			span_nodes.forEach(detach);
			button_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "aria-hidden", "true");
			attr(button, "type", "button");
			attr(button, "class", "close");
			attr(button, "data-dismiss", "alert");
			attr(button, "aria-label", "Close");
			attr(div, "class", "alert alert-info alert-dismissible fade show");
			set_style(div, "border-radius", "0");
			attr(div, "role", "alert");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, strong);
			append(strong, t1);
			append(div, t2);
			append(div, button);
			append(button, span);
			append(span, t3);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (72:6) {:else}
function create_else_block$2(ctx) {
	let div1;
	let div0;
	let span;
	let t;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			t = text("Loading...");
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true, role: true });
			var div0_nodes = children(div0);
			span = claim_element(div0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Loading...");
			span_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "sr-only");
			attr(div0, "class", "spinner-border text-dark");
			set_style(div0, "width", "3rem");
			set_style(div0, "height", "3rem");
			attr(div0, "role", "status");
			attr(div1, "class", "d-flex justify-content-center");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span);
			append(span, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (70:6) {#if form}
function create_if_block$2(ctx) {
	let liveform;
	let current;

	liveform = new LiveForm({
			props: {
				form: /*form*/ ctx[0],
				mode: /*mode*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(liveform.$$.fragment);
		},
		l(nodes) {
			claim_component(liveform.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(liveform, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const liveform_changes = {};
			if (dirty & /*form*/ 1) liveform_changes.form = /*form*/ ctx[0];
			if (dirty & /*mode*/ 2) liveform_changes.mode = /*mode*/ ctx[1];
			liveform.$set(liveform_changes);
		},
		i(local) {
			if (current) return;
			transition_in(liveform.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(liveform.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(liveform, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let t;
	let div2;
	let div1;
	let div0;
	let current_block_type_index;
	let if_block1;
	let current;
	let if_block0 = /*mode*/ ctx[1] === "local" && create_if_block_1$2();
	const if_block_creators = [create_if_block$2, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if_block1.c();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			if_block1.l(div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "container");
			set_style(div0, "margin-top", "2em");
			set_style(div1, "padding-right", "8em");
			set_style(div1, "padding-left", "8em");
			attr(div2, "class", "container");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*mode*/ ctx[1] === "local") {
				if (if_block0) ; else {
					if_block0 = create_if_block_1$2();
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div0, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(div2);
			if_blocks[current_block_type_index].d();
		}
	};
}

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P
		? value
		: new P(function (resolve) {
					resolve(value);
				});
	}

	return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch(e) {
					reject(e);
				}
			}

			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch(e) {
					reject(e);
				}
			}

			function step(result) {
				result.done
				? resolve(result.value)
				: adopt(result.value).then(fulfilled, rejected);
			}

			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
};

function preload(page, session) {
	var _a;

	return __awaiter(this, void 0, void 0, function* () {
		const formId = getUrlParameter("formId");

		const mode = (_a = page.query) === null || _a === void 0
		? void 0
		: _a.mode;

		if (mode === "local") {
			return { mode };
		}

		if (!formId) {
			return {};
		}

		const url = `https://json-data.s3.us-west-002.backblazeb2.com/${formId}.json`;

		//@ts-ignore
		const res = yield this.fetch(url);

		const form = yield res.json();
		form.id = formId;
		formStore.setForm(form);
		dispatch("form_loaded", { form });
		return { form };
	});
}

function instance$2($$self, $$props, $$invalidate) {
	
	
	let { form } = $$props;
	let { mode = "" } = $$props;

	onMount(() => {
		if (mode === "local") {
			const item = localStorage.getItem("form");

			if (!item) {
				return;
			}

			$$invalidate(0, form = JSON.parse(item));

			window.onstorage = e => {
				if (e.key === "form" && e.newValue) {
					$$invalidate(0, form = JSON.parse(e.newValue));
				}
			};
		}

		formStore.setForm(form);
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("mode" in $$props) $$invalidate(1, mode = $$props.mode);
	};

	return [form, mode];
}

class Preview extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { form: 0, mode: 1 });
	}
}

export default Preview;
export { preload };
