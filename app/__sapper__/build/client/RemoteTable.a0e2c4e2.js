import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, k as space, c as claim_element, a as children, b as claim_text, d as detach, l as claim_space, f as attr, h as insert, j as append, C as listen, n as noop, y as set_data, g as set_style, U as destroy_each, a8 as afterUpdate, o as onMount, aa as subscribePrivate, x as dispatch, R as binding_callbacks, m as create_component, p as claim_component, q as mount_component, r as transition_in, u as transition_out, v as destroy_component, T as empty, A as group_outros, B as check_outros, z as subscribe, a3 as set_input_value, I as run_all, ab as dispatchPrivate, ac as Dialog, a0 as toggle_class, N as update_keyed_each, ad as destroy_block } from './client.a93cf518.js';
import { r as randomString, L as LoadState, F as Fuse, c as isObject, a as fastEquals } from './fuse.esm.4840cecb.js';

/* src\components\Pagination.svelte generated by Svelte v3.24.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

// (54:10) {#each rowsPerPageEntries as entry}
function create_each_block(ctx) {
	let li;
	let a;
	let t0;
	let t1_value = /*entry*/ ctx[21] + "";
	let t1;
	let t2;
	let t3;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[12](/*entry*/ ctx[21], ...args);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text("Show ");
			t1 = text(t1_value);
			t2 = text(" Entires");
			t3 = space();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, "Show ");
			t1 = claim_text(a_nodes, t1_value);
			t2 = claim_text(a_nodes, " Entires");
			a_nodes.forEach(detach);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "dropdown-item");
			attr(a, "href", "javascript:void(0)");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			append(a, t2);
			append(li, t3);

			if (!mounted) {
				dispose = listen(a, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (69:4) {#if hasPrevious}
function create_if_block_5(ctx) {
	let li;
	let a;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text("Previous");
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", {
				class: true,
				href: true,
				tabindex: true,
				"aria-disabled": true
			});

			var a_nodes = children(a);
			t = claim_text(a_nodes, "Previous");
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(a, "tabindex", "-1");
			attr(a, "aria-disabled", "true");
			attr(li, "class", "page-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_1*/ ctx[13]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (74:4) {#if !hasNext && hasPrevious && page - 2 != 0}
function create_if_block_4(ctx) {
	let li;
	let a;
	let t_value = /*page*/ ctx[0] - 2 + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(li, "class", "page-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_2*/ ctx[14]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = /*page*/ ctx[0] - 2 + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (79:4) {#if page > 1}
function create_if_block_3(ctx) {
	let li;
	let a;
	let t_value = /*page*/ ctx[0] - 1 + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(li, "class", "page-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_3*/ ctx[15]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = /*page*/ ctx[0] - 1 + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (87:4) {#if hasNext}
function create_if_block_2(ctx) {
	let li;
	let a;
	let t_value = /*page*/ ctx[0] + 1 + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(li, "class", "page-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_4*/ ctx[16]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = /*page*/ ctx[0] + 1 + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (92:4) {#if page === 1 && pages >= 3}
function create_if_block_1(ctx) {
	let li;
	let a;
	let t_value = /*page*/ ctx[0] + 2 + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(li, "class", "page-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_5*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = /*page*/ ctx[0] + 2 + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (97:4) {#if hasNext}
function create_if_block(ctx) {
	let li;
	let a;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text("Next");
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Next");
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(li, "class", "page-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_6*/ ctx[18]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let ul1;
	let li0;
	let div;
	let button;
	let t0;
	let t1;
	let ul0;
	let t2;
	let t3;
	let t4;
	let t5;
	let li1;
	let a;
	let t6;
	let t7;
	let t8;
	let t9;
	let each_value = /*rowsPerPageEntries*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block0 = /*hasPrevious*/ ctx[3] && create_if_block_5(ctx);
	let if_block1 = !/*hasNext*/ ctx[2] && /*hasPrevious*/ ctx[3] && /*page*/ ctx[0] - 2 != 0 && create_if_block_4(ctx);
	let if_block2 = /*page*/ ctx[0] > 1 && create_if_block_3(ctx);
	let if_block3 = /*hasNext*/ ctx[2] && create_if_block_2(ctx);
	let if_block4 = /*page*/ ctx[0] === 1 && /*pages*/ ctx[1] >= 3 && create_if_block_1(ctx);
	let if_block5 = /*hasNext*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			nav = element("nav");
			ul1 = element("ul");
			li0 = element("li");
			div = element("div");
			button = element("button");
			t0 = text(/*showing*/ ctx[4]);
			t1 = space();
			ul0 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			li1 = element("li");
			a = element("a");
			t6 = text(/*page*/ ctx[0]);
			t7 = space();
			if (if_block3) if_block3.c();
			t8 = space();
			if (if_block4) if_block4.c();
			t9 = space();
			if (if_block5) if_block5.c();
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", { "aria-label": true });
			var nav_nodes = children(nav);
			ul1 = claim_element(nav_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);
			li0 = claim_element(ul1_nodes, "LI", {});
			var li0_nodes = children(li0);
			div = claim_element(li0_nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			button = claim_element(div_nodes, "BUTTON", {
				class: true,
				type: true,
				id: true,
				"data-toggle": true,
				"aria-expanded": true
			});

			var button_nodes = children(button);
			t0 = claim_text(button_nodes, /*showing*/ ctx[4]);
			button_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			ul0 = claim_element(div_nodes, "UL", { class: true, "aria-labelledby": true });
			var ul0_nodes = children(ul0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul0_nodes);
			}

			ul0_nodes.forEach(detach);
			div_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t2 = claim_space(ul1_nodes);
			if (if_block0) if_block0.l(ul1_nodes);
			t3 = claim_space(ul1_nodes);
			if (if_block1) if_block1.l(ul1_nodes);
			t4 = claim_space(ul1_nodes);
			if (if_block2) if_block2.l(ul1_nodes);
			t5 = claim_space(ul1_nodes);
			li1 = claim_element(ul1_nodes, "LI", { class: true, "aria-current": true });
			var li1_nodes = children(li1);
			a = claim_element(li1_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t6 = claim_text(a_nodes, /*page*/ ctx[0]);
			a_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t7 = claim_space(ul1_nodes);
			if (if_block3) if_block3.l(ul1_nodes);
			t8 = claim_space(ul1_nodes);
			if (if_block4) if_block4.l(ul1_nodes);
			t9 = claim_space(ul1_nodes);
			if (if_block5) if_block5.l(ul1_nodes);
			ul1_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "class", "btn btn-secondary dropdown-toggle rows-page-button svelte-179vh0d");
			attr(button, "type", "button");
			attr(button, "id", "dropdownMenuButton");
			attr(button, "data-toggle", "dropdown");
			attr(button, "aria-expanded", "false");
			attr(ul0, "class", "dropdown-menu");
			attr(ul0, "aria-labelledby", "dropdownMenuButton");
			attr(div, "class", "dropdown");
			set_style(div, "margin-right", ".5em");
			attr(a, "class", "page-link");
			attr(a, "href", "javascript:void(0)");
			attr(li1, "class", "page-item active");
			attr(li1, "aria-current", "page");
			attr(ul1, "class", "pagination justify-content-end");
			attr(nav, "aria-label", "Table Pagination");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul1);
			append(ul1, li0);
			append(li0, div);
			append(div, button);
			append(button, t0);
			append(div, t1);
			append(div, ul0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul0, null);
			}

			append(ul1, t2);
			if (if_block0) if_block0.m(ul1, null);
			append(ul1, t3);
			if (if_block1) if_block1.m(ul1, null);
			append(ul1, t4);
			if (if_block2) if_block2.m(ul1, null);
			append(ul1, t5);
			append(ul1, li1);
			append(li1, a);
			append(a, t6);
			append(ul1, t7);
			if (if_block3) if_block3.m(ul1, null);
			append(ul1, t8);
			if (if_block4) if_block4.m(ul1, null);
			append(ul1, t9);
			if (if_block5) if_block5.m(ul1, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*showing*/ 16) set_data(t0, /*showing*/ ctx[4]);

			if (dirty & /*setRowsPerPage, rowsPerPageEntries*/ 96) {
				each_value = /*rowsPerPageEntries*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*hasPrevious*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(ul1, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*hasNext*/ ctx[2] && /*hasPrevious*/ ctx[3] && /*page*/ ctx[0] - 2 != 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(ul1, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*page*/ ctx[0] > 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3(ctx);
					if_block2.c();
					if_block2.m(ul1, t5);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*page*/ 1) set_data(t6, /*page*/ ctx[0]);

			if (/*hasNext*/ ctx[2]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2(ctx);
					if_block3.c();
					if_block3.m(ul1, t8);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*page*/ ctx[0] === 1 && /*pages*/ ctx[1] >= 3) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1(ctx);
					if_block4.c();
					if_block4.m(ul1, t9);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*hasNext*/ ctx[2]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block(ctx);
					if_block5.c();
					if_block5.m(ul1, null);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id = "" } = $$props;
	let { rowsPerPage = 10 } = $$props;
	let { page = 1 } = $$props;
	let { count = 0 } = $$props;
	let { onRangeChange } = $$props;
	let pages = 1;
	let hasNext = true;
	let hasPrevious = false;
	let rowsPerPageEntries = [10, 25, 50, 100];
	let showing = "";

	afterUpdate(() => {
		onChange();
	});

	onMount(() => {
		subscribePrivate(id, "on_sort", () => {
			$$invalidate(0, page = 1);
		});
	});

	function onChange() {
		$$invalidate(1, pages = Math.ceil(count / rowsPerPage));

		if (page > pages) {
			$$invalidate(0, page = pages || 1);
		}

		$$invalidate(2, hasNext = page < pages);
		$$invalidate(3, hasPrevious = page > 1);
		let showingCount = Math.floor(page * rowsPerPage);
		showingCount = showingCount >= count ? Math.floor(count) : showingCount;
		$$invalidate(4, showing = `Showing ${showingCount} / ${Math.floor(count)} Entries`);
		onRangeChange(range());
		console.log("count", count, "pages", pages, "page", page, "hasNext", hasNext, "hasPrev", hasPrevious, "range", range());
	}

	function setRowsPerPage(newValue) {
		$$invalidate(8, rowsPerPage = newValue);
		$$invalidate(0, page = 1);
	}

	function setPage(newPage) {
		$$invalidate(0, page = newPage);
	}

	function range() {
		const max = rowsPerPage * page;
		const min = max - rowsPerPage;
		return { min, max };
	}

	const click_handler = entry => {
		setRowsPerPage(entry);
	};

	const click_handler_1 = () => setPage(page - 1);
	const click_handler_2 = () => setPage(page - 2);
	const click_handler_3 = () => setPage(page - 1);
	const click_handler_4 = () => setPage(page + 1);
	const click_handler_5 = () => setPage(page + 2);
	const click_handler_6 = () => setPage(page + 1);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(9, id = $$props.id);
		if ("rowsPerPage" in $$props) $$invalidate(8, rowsPerPage = $$props.rowsPerPage);
		if ("page" in $$props) $$invalidate(0, page = $$props.page);
		if ("count" in $$props) $$invalidate(10, count = $$props.count);
		if ("onRangeChange" in $$props) $$invalidate(11, onRangeChange = $$props.onRangeChange);
	};

	return [
		page,
		pages,
		hasNext,
		hasPrevious,
		showing,
		rowsPerPageEntries,
		setRowsPerPage,
		setPage,
		rowsPerPage,
		id,
		count,
		onRangeChange,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6
	];
}

class Pagination extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			id: 9,
			rowsPerPage: 8,
			page: 0,
			count: 10,
			onRangeChange: 11
		});
	}
}

/* src\components\Toast.svelte generated by Svelte v3.24.1 */

function create_fragment$1(ctx) {
	let div3;
	let div2;
	let div0;
	let strong;
	let t0;
	let t1;
	let button;
	let span;
	let t2;
	let t3;
	let div1;
	let t4;

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			strong = element("strong");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			button = element("button");
			span = element("span");
			t2 = text("×");
			t3 = space();
			div1 = element("div");
			t4 = text(/*message*/ ctx[0]);
			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", {
				"aria-live": true,
				"aria-atomic": true,
				class: true
			});

			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			strong = claim_element(div0_nodes, "STRONG", { class: true });
			var strong_nodes = children(strong);
			t0 = claim_text(strong_nodes, /*title*/ ctx[1]);
			strong_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);

			button = claim_element(div0_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-dismiss": true,
				"aria-label": true
			});

			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { "aria-hidden": true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "×");
			span_nodes.forEach(detach);
			button_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t4 = claim_text(div1_nodes, /*message*/ ctx[0]);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(strong, "class", "mr-auto");
			attr(span, "aria-hidden", "true");
			attr(button, "type", "button");
			attr(button, "class", "ml-2 mb-1 close");
			attr(button, "data-dismiss", "toast");
			attr(button, "aria-label", "Close");
			attr(div0, "class", "toast-header");
			attr(div1, "class", "toast-body");
			attr(div2, "class", "toast svelte-hsmqtg");
			set_style(div2, "position", "absolute");
			set_style(div2, "top", "0");
			set_style(div2, "right", "0");
			attr(div3, "aria-live", "polite");
			attr(div3, "aria-atomic", "true");
			attr(div3, "class", "toast-container svelte-hsmqtg");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div0, strong);
			append(strong, t0);
			append(div0, t1);
			append(div0, button);
			append(button, span);
			append(span, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, t4);
			/*div2_binding*/ ctx[4](div2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);
			if (dirty & /*message*/ 1) set_data(t4, /*message*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
			/*div2_binding*/ ctx[4](null);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { id = "" } = $$props;
	let { message = "" } = $$props;
	let { title = "" } = $$props;
	let component;

	onMount(() => {
		//@ts-ignore
		const toast = new bootstrap.Toast(component, { delay: 0, autohide: false });

		component.addEventListener("hidden.bs.toast", () => {
			dispatch("toast_closed", { id });
		});

		toast.show();
	});

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			component = $$value;
			$$invalidate(2, component);
		});
	}

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(3, id = $$props.id);
		if ("message" in $$props) $$invalidate(0, message = $$props.message);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	return [message, title, component, id, div2_binding];
}

class Toast extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { id: 3, message: 0, title: 1 });
	}
}

/* src\components\ToastManager.svelte generated by Svelte v3.24.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (21:0) {#each toasts as toast}
function create_each_block$1(ctx) {
	let toast;
	let current;

	toast = new Toast({
			props: {
				message: /*toast*/ ctx[2].message,
				title: /*toast*/ ctx[2].title
			}
		});

	return {
		c() {
			create_component(toast.$$.fragment);
		},
		l(nodes) {
			claim_component(toast.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(toast, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const toast_changes = {};
			if (dirty & /*toasts*/ 1) toast_changes.message = /*toast*/ ctx[2].message;
			if (dirty & /*toasts*/ 1) toast_changes.title = /*toast*/ ctx[2].title;
			toast.$set(toast_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toast.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toast.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(toast, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*toasts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*toasts*/ 1) {
				each_value = /*toasts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let toasts = [];

	subscribe("show_toast", props => {
		const id = randomString();

		$$invalidate(0, toasts = toasts.concat([
			{
				id,
				message: props.message,
				title: props.title
			}
		]));

		setTimeout(
			() => {
				removeById(id);
			},
			props.timeout || 4000
		);
	});

	subscribe("toast_closed", props => {
		removeById(props.id);
	});

	function removeById(id) {
		toasts.splice(toasts.findIndex(t => t.id === id), 1);
		$$invalidate(0, toasts);
	}

	return [toasts];
}

class ToastManager extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
	}
}

/* src\components\RemoteTable.svelte generated by Svelte v3.24.1 */

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[48] = list[i];
	child_ctx[50] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i];
	return child_ctx;
}

// (226:4) {#if selectedCount > 0}
function create_if_block_10(ctx) {
	let div1;
	let div0;
	let t0;
	let strong;
	let t1;
	let t2;
	let t3_value = /*filtered*/ ctx[3].length + "";
	let t3;
	let t4;
	let div3;
	let div2;
	let i;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("Selected:\r\n          ");
			strong = element("strong");
			t1 = text(/*selectedCount*/ ctx[12]);
			t2 = text(" of ");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");
			div2 = element("div");
			i = element("i");
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Selected:\r\n          ");
			strong = claim_element(div0_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t1 = claim_text(strong_nodes, /*selectedCount*/ ctx[12]);
			t2 = claim_text(strong_nodes, " of ");
			t3 = claim_text(strong_nodes, t3_value);
			strong_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t4 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			i = claim_element(div2_nodes, "I", { class: true });
			children(i).forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(div0, "margin-top", "5px");
			attr(div1, "class", "p-2 bd-highlight");
			attr(i, "class", "fas fa-trash-alt svelte-1gvtbyy");
			set_style(div2, "pointer", "cursor");
			attr(div3, "class", "p-2 bd-highlight");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div0, strong);
			append(strong, t1);
			append(strong, t2);
			append(strong, t3);
			insert(target, t4, anchor);
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, i);

			if (!mounted) {
				dispose = listen(div2, "click", /*click_handler*/ ctx[29]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selectedCount*/ 4096) set_data(t1, /*selectedCount*/ ctx[12]);
			if (dirty[0] & /*filtered*/ 8 && t3_value !== (t3_value = /*filtered*/ ctx[3].length + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t4);
			if (detaching) detach(div3);
			mounted = false;
			dispose();
		}
	};
}

// (331:39) 
function create_if_block_9(ctx) {
	let div;
	let p;
	let t;

	return {
		c() {
			div = element("div");
			p = element("p");
			t = text("Failed to load rows, please try refreshing the page.");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Failed to load rows, please try refreshing the page.");
			p_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(div, "padding-top", "1em");
			set_style(div, "padding-left", "1em");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			append(p, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (256:41) 
function create_if_block_4$1(ctx) {
	let canvas;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5$1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*rows*/ ctx[2].length === 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			canvas = element("canvas");
			t = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l(nodes) {
			canvas = claim_element(nodes, "CANVAS", { id: true, style: true });
			children(canvas).forEach(detach);
			t = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h() {
			attr(canvas, "id", "canvas");
			set_style(canvas, "display", "none");
		},
		m(target, anchor) {
			insert(target, canvas, anchor);
			insert(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(canvas);
			if (detaching) detach(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (250:2) {#if state === LoadState.Loading}
function create_if_block_3$1(ctx) {
	let div1;
	let div0;
	let span;
	let t;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			t = text("Loading...");
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, role: true });
			var div0_nodes = children(div0);
			span = claim_element(div0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Loading...");
			span_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "sr-only");
			attr(div0, "class", "spinner-border text-secondary");
			attr(div0, "role", "status");
			set_style(div1, "text-align", "center");
			set_style(div1, "padding-top", "1em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span);
			append(span, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (264:4) {:else}
function create_else_block(ctx) {
	let div1;
	let table;
	let tbody;
	let tr;
	let th;
	let div0;
	let input;
	let input_id_value;
	let t0;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t1;
	let t2;
	let pagination;
	let current;
	let mounted;
	let dispose;
	let each_value_3 = /*filteredColumns*/ ctx[5];
	const get_key = ctx => /*column*/ ctx[45];

	for (let i = 0; i < each_value_3.length; i += 1) {
		let child_ctx = get_each_context_3(ctx, each_value_3, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_3(key, child_ctx));
	}

	let each_value_1 = /*filtered*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	pagination = new Pagination({
			props: {
				id: /*id*/ ctx[1],
				count: /*filtered*/ ctx[3].length,
				onRangeChange: /*func*/ ctx[33]
			}
		});

	return {
		c() {
			div1 = element("div");
			table = element("table");
			tbody = element("tbody");
			tr = element("tr");
			th = element("th");
			div0 = element("div");
			input = element("input");
			t0 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			create_component(pagination.$$.fragment);
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			table = claim_element(div1_nodes, "TABLE", { class: true, style: true });
			var table_nodes = children(table);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);
			tr = claim_element(tbody_nodes, "TR", {});
			var tr_nodes = children(tr);
			th = claim_element(tr_nodes, "TH", { scope: true, style: true });
			var th_nodes = children(th);
			div0 = claim_element(th_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			input = claim_element(div0_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				checked: true,
				id: true
			});

			div0_nodes.forEach(detach);
			th_nodes.forEach(detach);
			t0 = claim_space(tr_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(tr_nodes);
			}

			tr_nodes.forEach(detach);
			t1 = claim_space(tbody_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detach);
			table_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(nodes);
			claim_component(pagination.$$.fragment, nodes);
			this.h();
		},
		h() {
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			input.value = "";
			input.checked = /*allRowsSelected*/ ctx[11];
			attr(input, "id", input_id_value = "row-toggle-all");
			attr(div0, "class", "form-check");
			attr(th, "scope", "col");
			set_style(th, "width", "50px");
			attr(table, "class", "table table-hover svelte-1gvtbyy");
			set_style(table, "table-layout", "fixed");
			attr(div1, "class", "table-responsive");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, table);
			append(table, tbody);
			append(tbody, tr);
			append(tr, th);
			append(th, div0);
			append(div0, input);
			append(tr, t0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append(tbody, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			insert(target, t2, anchor);
			mount_component(pagination, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*selectAllRows*/ ctx[14]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*allRowsSelected*/ 2048) {
				input.checked = /*allRowsSelected*/ ctx[11];
			}

			if (dirty[0] & /*headerStyle, filteredColumns, sortColumn, sort, sortDirection*/ 99872) {
				const each_value_3 = /*filteredColumns*/ ctx[5];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_3, each0_lookup, tr, destroy_block, create_each_block_3, null, get_each_context_3);
			}

			if (dirty[0] & /*filtered, filteredColumns, renderValue, onRowClick, range*/ 1311016) {
				each_value_1 = /*filtered*/ ctx[3];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			const pagination_changes = {};
			if (dirty[0] & /*id*/ 2) pagination_changes.id = /*id*/ ctx[1];
			if (dirty[0] & /*filtered*/ 8) pagination_changes.count = /*filtered*/ ctx[3].length;
			if (dirty[0] & /*range, columns*/ 272) pagination_changes.onRangeChange = /*func*/ ctx[33];
			pagination.$set(pagination_changes);
		},
		i(local) {
			if (current) return;
			transition_in(pagination.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pagination.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			destroy_each(each_blocks, detaching);
			if (detaching) detach(t2);
			destroy_component(pagination, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (258:4) {#if rows.length === 0}
function create_if_block_5$1(ctx) {
	let div1;
	let div0;
	let p;
	let t;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			p = element("p");
			t = text("No results to display.");
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p = claim_element(div0_nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "No results to display.");
			p_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "text-secondary");
			set_style(div1, "text-align", "center");
			set_style(div1, "padding-top", "1em");
			set_style(div1, "padding-bottom", "1em");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, p);
			append(p, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (283:74) 
function create_if_block_8(ctx) {
	let span1;
	let span0;

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			this.h();
		},
		l(nodes) {
			span1 = claim_element(nodes, "SPAN", {});
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { class: true });
			children(span0).forEach(detach);
			span1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "fas fa-chevron-down");
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
		},
		d(detaching) {
			if (detaching) detach(span1);
		}
	};
}

// (279:20) {#if sort === column && sortDirection === 'asc'}
function create_if_block_7(ctx) {
	let span1;
	let span0;

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			this.h();
		},
		l(nodes) {
			span1 = claim_element(nodes, "SPAN", {});
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { class: true });
			children(span0).forEach(detach);
			span1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "fas fa-chevron-up");
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
		},
		d(detaching) {
			if (detaching) detach(span1);
		}
	};
}

// (275:14) {#each filteredColumns as column (column)}
function create_each_block_3(key_1, ctx) {
	let th;
	let t0_value = /*column*/ ctx[45] + "";
	let t0;
	let t1;
	let span;
	let t2;
	let th_style_value;
	let mounted;
	let dispose;

	function select_block_type_2(ctx, dirty) {
		if (/*sort*/ ctx[9] === /*column*/ ctx[45] && /*sortDirection*/ ctx[10] === "asc") return create_if_block_7;
		if (/*sort*/ ctx[9] === /*column*/ ctx[45] && /*sortDirection*/ ctx[10] === "desc") return create_if_block_8;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[31](/*column*/ ctx[45], ...args);
	}

	return {
		key: key_1,
		first: null,
		c() {
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			if (if_block) if_block.c();
			t2 = space();
			this.h();
		},
		l(nodes) {
			th = claim_element(nodes, "TH", { scope: true, style: true });
			var th_nodes = children(th);
			t0 = claim_text(th_nodes, t0_value);
			t1 = claim_space(th_nodes);
			span = claim_element(th_nodes, "SPAN", {});
			var span_nodes = children(span);
			if (if_block) if_block.l(span_nodes);
			span_nodes.forEach(detach);
			t2 = claim_space(th_nodes);
			th_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(th, "scope", "col");
			attr(th, "style", th_style_value = /*headerStyle*/ ctx[16](/*column*/ ctx[45]));
			this.first = th;
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, t0);
			append(th, t1);
			append(th, span);
			if (if_block) if_block.m(span, null);
			append(th, t2);

			if (!mounted) {
				dispose = listen(th, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*filteredColumns*/ 32 && t0_value !== (t0_value = /*column*/ ctx[45] + "")) set_data(t0, t0_value);

			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}

			if (dirty[0] & /*filteredColumns*/ 32 && th_style_value !== (th_style_value = /*headerStyle*/ ctx[16](/*column*/ ctx[45]))) {
				attr(th, "style", th_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(th);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

// (293:14) {#if index >= range.min && index <= range.max}
function create_if_block_6(ctx) {
	let tr;
	let td;
	let div;
	let input;
	let input_checked_value;
	let input_id_value;
	let t0;
	let t1;
	let mounted;
	let dispose;

	function change_handler(...args) {
		return /*change_handler*/ ctx[32](/*row*/ ctx[48], ...args);
	}

	let each_value_2 = /*filteredColumns*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			tr = element("tr");
			td = element("td");
			div = element("div");
			input = element("input");
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			this.h();
		},
		l(nodes) {
			tr = claim_element(nodes, "TR", { style: true, class: true });
			var tr_nodes = children(tr);
			td = claim_element(tr_nodes, "TD", { class: true });
			var td_nodes = children(td);
			div = claim_element(td_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			input = claim_element(div_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				checked: true,
				id: true
			});

			div_nodes.forEach(detach);
			td_nodes.forEach(detach);
			t0 = claim_space(tr_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr_nodes);
			}

			t1 = claim_space(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			input.value = "";
			input.checked = input_checked_value = /*row*/ ctx[48].meta_selected;
			attr(input, "id", input_id_value = "row-toggle-" + /*index*/ ctx[50]);
			attr(div, "class", "form-check");
			attr(td, "class", "svelte-1gvtbyy");
			set_style(tr, "vertical-align", "middle");
			attr(tr, "class", "svelte-1gvtbyy");
			toggle_class(tr, "active", /*row*/ ctx[48].meta_selected);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td);
			append(td, div);
			append(div, input);
			append(tr, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t1);

			if (!mounted) {
				dispose = listen(input, "change", change_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*filtered*/ 8 && input_checked_value !== (input_checked_value = /*row*/ ctx[48].meta_selected)) {
				input.checked = input_checked_value;
			}

			if (dirty[0] & /*renderValue, filtered, filteredColumns*/ 262184) {
				each_value_2 = /*filteredColumns*/ ctx[5];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, t1);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (dirty[0] & /*filtered*/ 8) {
				toggle_class(tr, "active", /*row*/ ctx[48].meta_selected);
			}
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (308:18) {#each filteredColumns as column}
function create_each_block_2(ctx) {
	let td;
	let div;
	let t_value = /*renderValue*/ ctx[18](/*row*/ ctx[48], /*column*/ ctx[45]) + "";
	let t;

	return {
		c() {
			td = element("td");
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			div = claim_element(td_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			td_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "text svelte-1gvtbyy");
			attr(td, "class", "svelte-1gvtbyy");
		},
		m(target, anchor) {
			insert(target, td, anchor);
			append(td, div);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filtered, filteredColumns*/ 40 && t_value !== (t_value = /*renderValue*/ ctx[18](/*row*/ ctx[48], /*column*/ ctx[45]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (292:12) {#each filtered as row, index}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*index*/ ctx[50] >= /*range*/ ctx[8].min && /*index*/ ctx[50] <= /*range*/ ctx[8].max && create_if_block_6(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*index*/ ctx[50] >= /*range*/ ctx[8].min && /*index*/ ctx[50] <= /*range*/ ctx[8].max) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_6(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (360:31) 
function create_if_block_2$1(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				title: "Confirm Deletion",
				isOpen: true,
				actions: [
					{
						label: `Delete ${/*selectedCount*/ ctx[12]} Entries`,
						type: "danger",
						onClick: /*deleteEntries*/ ctx[21]
					},
					{ label: "Cancel", type: "secondary" }
				],
				onClose: /*func_2*/ ctx[36],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		l(nodes) {
			claim_component(dialog.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};

			if (dirty[0] & /*selectedCount*/ 4096) dialog_changes.actions = [
				{
					label: `Delete ${/*selectedCount*/ ctx[12]} Entries`,
					type: "danger",
					onClick: /*deleteEntries*/ ctx[21]
				},
				{ label: "Cancel", type: "secondary" }
			];

			if (dirty[0] & /*modal*/ 8192) dialog_changes.onClose = /*func_2*/ ctx[36];

			if (dirty[0] & /*selectedCount*/ 4096 | dirty[1] & /*$$scope*/ 16777216) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (336:2) {#if modal === 'toggle_column'}
function create_if_block$1(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				title: "Toggle Column Visibility",
				isOpen: true,
				onClose: /*func_1*/ ctx[35],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog.$$.fragment);
		},
		l(nodes) {
			claim_component(dialog.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dialog_changes = {};
			if (dirty[0] & /*modal*/ 8192) dialog_changes.onClose = /*func_1*/ ctx[35];

			if (dirty[0] & /*columns, hidden*/ 17 | dirty[1] & /*$$scope*/ 16777216) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog, detaching);
		}
	};
}

// (361:4) <Dialog        title={'Confirm Deletion'}        isOpen={true}        actions={[{ label: `Delete ${selectedCount} Entries`, type: 'danger', onClick: deleteEntries }, { label: 'Cancel', type: 'secondary' }]}        onClose={() => {          modal = ''        }}>
function create_default_slot_1(ctx) {
	let p;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			p = element("p");
			t0 = text("Are you sure you want to delete ");
			t1 = text(/*selectedCount*/ ctx[12]);
			t2 = text(" entries?");
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Are you sure you want to delete ");
			t1 = claim_text(p_nodes, /*selectedCount*/ ctx[12]);
			t2 = claim_text(p_nodes, " entries?");
			p_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selectedCount*/ 4096) set_data(t1, /*selectedCount*/ ctx[12]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (344:8) {#if column !== 'table_meta_id'}
function create_if_block_1$1(ctx) {
	let div;
	let input;
	let input_checked_value;
	let input_id_value;
	let t0;
	let label;
	let t1_value = /*column*/ ctx[45] + "";
	let t1;
	let label_for_value;
	let t2;
	let mounted;
	let dispose;

	function change_handler_1(...args) {
		return /*change_handler_1*/ ctx[34](/*column*/ ctx[45], ...args);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			input = claim_element(div_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				checked: true,
				id: true
			});

			t0 = claim_space(div_nodes);
			label = claim_element(div_nodes, "LABEL", { class: true, for: true });
			var label_nodes = children(label);
			t1 = claim_text(label_nodes, t1_value);
			label_nodes.forEach(detach);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(input, "class", "form-check-input");
			attr(input, "type", "checkbox");
			input.value = "";
			input.checked = input_checked_value = !/*hidden*/ ctx[0].has(/*column*/ ctx[45]);
			attr(input, "id", input_id_value = "toggle-" + /*column*/ ctx[45]);
			attr(label, "class", "form-check-label");
			attr(label, "for", label_for_value = "toggle-" + /*column*/ ctx[45]);
			attr(div, "class", "form-check");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, t1);
			append(div, t2);

			if (!mounted) {
				dispose = listen(input, "change", change_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*hidden, columns*/ 17 && input_checked_value !== (input_checked_value = !/*hidden*/ ctx[0].has(/*column*/ ctx[45]))) {
				input.checked = input_checked_value;
			}

			if (dirty[0] & /*columns*/ 16 && input_id_value !== (input_id_value = "toggle-" + /*column*/ ctx[45])) {
				attr(input, "id", input_id_value);
			}

			if (dirty[0] & /*columns*/ 16 && t1_value !== (t1_value = /*column*/ ctx[45] + "")) set_data(t1, t1_value);

			if (dirty[0] & /*columns*/ 16 && label_for_value !== (label_for_value = "toggle-" + /*column*/ ctx[45])) {
				attr(label, "for", label_for_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (343:6) {#each columns as column}
function create_each_block$2(ctx) {
	let if_block_anchor;
	let if_block = /*column*/ ctx[45] !== "table_meta_id" && create_if_block_1$1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*column*/ ctx[45] !== "table_meta_id") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (337:4) <Dialog        title={'Toggle Column Visibility'}        isOpen={true}        onClose={() => {          modal = ''        }}>
function create_default_slot(ctx) {
	let each_1_anchor;
	let each_value = /*columns*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*columns, hidden, toggleColumn*/ 524305) {
				each_value = /*columns*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment$3(ctx) {
	let div6;
	let toastmanager;
	let t0;
	let div5;
	let div0;
	let input;
	let t1;
	let t2;
	let div2;
	let div1;
	let i0;
	let t3;
	let div4;
	let div3;
	let i1;
	let t4;
	let current_block_type_index;
	let if_block1;
	let t5;
	let current_block_type_index_1;
	let if_block2;
	let current;
	let mounted;
	let dispose;
	toastmanager = new ToastManager({});
	let if_block0 = /*selectedCount*/ ctx[12] > 0 && create_if_block_10(ctx);
	const if_block_creators = [create_if_block_3$1, create_if_block_4$1, create_if_block_9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[7] === LoadState.Loading) return 0;
		if (/*state*/ ctx[7] === LoadState.Finished) return 1;
		if (/*state*/ ctx[7] === LoadState.Failed) return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const if_block_creators_1 = [create_if_block$1, create_if_block_2$1];
	const if_blocks_1 = [];

	function select_block_type_3(ctx, dirty) {
		if (/*modal*/ ctx[13] === "toggle_column") return 0;
		if (/*modal*/ ctx[13] === "delete") return 1;
		return -1;
	}

	if (~(current_block_type_index_1 = select_block_type_3(ctx))) {
		if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	}

	return {
		c() {
			div6 = element("div");
			create_component(toastmanager.$$.fragment);
			t0 = space();
			div5 = element("div");
			div0 = element("div");
			input = element("input");
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div2 = element("div");
			div1 = element("div");
			i0 = element("i");
			t3 = space();
			div4 = element("div");
			div3 = element("div");
			i1 = element("i");
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l(nodes) {
			div6 = claim_element(nodes, "DIV", {});
			var div6_nodes = children(div6);
			claim_component(toastmanager.$$.fragment, div6_nodes);
			t0 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			input = claim_element(div0_nodes, "INPUT", {
				class: true,
				placeholder: true,
				style: true
			});

			div0_nodes.forEach(detach);
			t1 = claim_space(div5_nodes);
			if (if_block0) if_block0.l(div5_nodes);
			t2 = claim_space(div5_nodes);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			i0 = claim_element(div1_nodes, "I", { class: true });
			children(i0).forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t3 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { style: true });
			var div3_nodes = children(div3);
			i1 = claim_element(div3_nodes, "I", { class: true });
			children(i1).forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			t4 = claim_space(div6_nodes);
			if (if_block1) if_block1.l(div6_nodes);
			t5 = claim_space(div6_nodes);
			if (if_block2) if_block2.l(div6_nodes);
			div6_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(input, "class", "form-control");
			attr(input, "placeholder", searchPlaceHolder);
			set_style(input, "width", "300px");
			attr(div0, "class", "mr-auto p-2 bd-highlight");
			attr(i0, "class", "fas fa-cog svelte-1gvtbyy");
			set_style(div1, "pointer", "cursor");
			attr(div2, "class", "p-2 bd-highlight");
			attr(i1, "class", "fas fa-columns svelte-1gvtbyy");
			set_style(div3, "pointer", "cursor");
			attr(div4, "class", "p-2 bd-highlight");
			attr(div5, "class", "d-flex bd-highlight mb-3");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			mount_component(toastmanager, div6, null);
			append(div6, t0);
			append(div6, div5);
			append(div5, div0);
			append(div0, input);
			set_input_value(input, /*query*/ ctx[6]);
			append(div5, t1);
			if (if_block0) if_block0.m(div5, null);
			append(div5, t2);
			append(div5, div2);
			append(div2, div1);
			append(div1, i0);
			append(div5, t3);
			append(div5, div4);
			append(div4, div3);
			append(div3, i1);
			append(div6, t4);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div6, null);
			}

			append(div6, t5);

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].m(div6, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[28]),
					listen(div3, "click", /*click_handler_1*/ ctx[30])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*query*/ 64 && input.value !== /*query*/ ctx[6]) {
				set_input_value(input, /*query*/ ctx[6]);
			}

			if (/*selectedCount*/ ctx[12] > 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					if_block0.m(div5, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					}

					transition_in(if_block1, 1);
					if_block1.m(div6, t5);
				} else {
					if_block1 = null;
				}
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_3(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if (~current_block_type_index_1) {
					if_blocks_1[current_block_type_index_1].p(ctx, dirty);
				}
			} else {
				if (if_block2) {
					group_outros();

					transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
						if_blocks_1[previous_block_index_1] = null;
					});

					check_outros();
				}

				if (~current_block_type_index_1) {
					if_block2 = if_blocks_1[current_block_type_index_1];

					if (!if_block2) {
						if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
						if_block2.c();
					}

					transition_in(if_block2, 1);
					if_block2.m(div6, null);
				} else {
					if_block2 = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(toastmanager.$$.fragment, local);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(toastmanager.$$.fragment, local);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			destroy_component(toastmanager);
			if (if_block0) if_block0.d();

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (~current_block_type_index_1) {
				if_blocks_1[current_block_type_index_1].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}
let searchPlaceHolder = "Search";

function instance$3($$self, $$props, $$invalidate) {
	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	
	let { getRows } = $$props;
	let id = "";
	let rows = [];
	let filtered = [];
	let columns = [];
	let filteredColumns = [];
	let query = "";
	let fuse;
	let state = LoadState.Loading;
	let range = { min: 1, max: 1 };
	let widths = {};
	let canvasContext;
	let sort = "";
	let sortDirection = "";
	let allRowsSelected = false;
	let selectedCount = 0;
	let modal = "";
	let { headerActions = [] } = $$props;
	let { onEdit = undefined } = $$props;
	let { onDelete = undefined } = $$props;
	let { hidden = new Set() } = $$props;
	let { sortColumns = undefined } = $$props;
	let { onFormat = () => undefined } = $$props;

	function createFuse() {
		const list = rows.map(r => {
			const result = {};

			Object.keys(r).forEach(key => {
				result[key] = isObject(r[key]) ? JSON.stringify(r[key]) : r[key];
			});

			return result;
		});

		return new Fuse(list, { keys: Object.keys(rows[0]) });
	}

	onMount(() => {
		$$invalidate(1, id = randomString());
		hidden.add("table_meta_id");
		const element = document.createElement("canvas");
		canvasContext = element.getContext("2d");
		load();
	});

	function selectAllRows() {
		for (let i = 0; i < filtered.length; i++) {
			if (i >= range.min && i <= range.max) {
				$$invalidate(3, filtered[i].meta_selected = allRowsSelected ? false : true, filtered);
			}
		}

		$$invalidate(11, allRowsSelected = !allRowsSelected);
		let count = 0;

		for (let i = 0; i < filtered.length; i++) {
			if (filtered[i].meta_selected) {
				count++;
			}
		}

		$$invalidate(12, selectedCount = count);
	}

	function load() {
		var _a, _b;

		return __awaiter(this, void 0, void 0, function* () {
			try {
				$$invalidate(2, rows = yield getRows());

				if (rows.length === 0) {
					$$invalidate(7, state = LoadState.Finished);
					return;
				}

				rows.map(w => {
					w.table_meta_id = randomString();
					return w;
				});

				$$invalidate(37, fuse = createFuse());
				$$invalidate(3, filtered = rows);

				$$invalidate(4, columns = Object.keys((_a = rows[rows.length - 1]) !== null && _a !== void 0
				? _a
				: {}));

				$$invalidate(4, columns = (_b = sortColumns === null || sortColumns === void 0
				? void 0
				: sortColumns(columns)) !== null && _b !== void 0
				? _b
				: columns);

				$$invalidate(5, filteredColumns = columns.filter(w => !hidden.has(w)));
				$$invalidate(7, state = LoadState.Finished);
			} catch(ex) {
				console.error(ex);
				$$invalidate(7, state = LoadState.Failed);
			}
		});
	}

	function sortColumn(column) {
		if (sort === column) {
			$$invalidate(9, sort = column);
			$$invalidate(10, sortDirection = sortDirection === "asc" ? "desc" : "asc");
		} else {
			$$invalidate(9, sort = column);
			$$invalidate(10, sortDirection = "desc");
		}

		dispatchPrivate(id, "on_sort", { sort, sortDirection });

		$$invalidate(3, filtered = filtered.sort(function (a, b) {
			var _a, _b, _c, _d;

			var nameA = (_b = (_a = a[sort]) === null || _a === void 0
			? void 0
			: _a.toString()) === null || _b === void 0
			? void 0
			: _b.toUpperCase();

			var nameB = (_d = (_c = b[sort]) === null || _c === void 0
			? void 0
			: _c.toString()) === null || _d === void 0
			? void 0
			: _d.toUpperCase();

			if (nameA == null && nameB == null) {
				return 0;
			}

			if (nameA == null) {
				return 1;
			}

			if (nameB == null) {
				return 1;
			}

			if (nameA < nameB) {
				return 1;
			}

			if (nameA > nameB) {
				return -1;
			}

			return 0;
		}));

		if (sortDirection === "asc") {
			$$invalidate(3, filtered = filtered.reverse());
		}
	}

	function headerStyle(column) {
		if (widths[column]) {
			return "width: " + widths[column] + "px;";
		}
	}

	function setWidths() {
		let values = filtered.slice(range.min, range.max);
		widths = {};

		values.forEach(value => {
			columns.forEach(c => {
				var _a;
				const v = value[c];
				let width = getTextWidth(v);

				if (width < 150) {
					width = 150;
				}

				if (width > 400) {
					width = 400;
				}

				if (((_a = widths[c]) !== null && _a !== void 0 ? _a : 0) < width) {
					widths[c] = width;
				}
			});
		});
	}

	function renderValue(row, column) {
		var _a, _b;
		let value = (_a = row[column]) !== null && _a !== void 0 ? _a : "";

		value = (_b = onFormat(column, row[column])) !== null && _b !== void 0
		? _b
		: value;

		return isObject(value) || Array.isArray(value)
		? JSON.stringify(value)
		: value;
	}

	function getTextWidth(text, font) {
		canvasContext.font = "bold 1em arial";
		return canvasContext.measureText(text).width;
	}

	function toggleColumn(checked, column) {
		checked ? hidden.delete(column) : hidden.add(column);
		$$invalidate(5, filteredColumns = columns.filter(w => !hidden.has(w)));
	}

	function onRowClick(row) {
		const index = filtered.findIndex(w => w.table_meta_id === row.table_meta_id);

		if (filtered[index].meta_selected) {
			$$invalidate(12, selectedCount--, selectedCount);
			$$invalidate(3, filtered[index].meta_selected = false, filtered);
		} else {
			$$invalidate(12, selectedCount++, selectedCount);
			$$invalidate(3, filtered[index].meta_selected = true, filtered);
		}
	}

	function deleteEntries() {
		return __awaiter(this, void 0, void 0, function* () {
			const selected = filtered.filter(w => w.meta_selected);

			if (selected.length !== selectedCount) {
				throw new Error("Selection count did not match actual selected.");
			}

			yield onDelete === null || onDelete === void 0
			? void 0
			: onDelete(selected);

			dispatch("show_toast", {
				title: "Deletion Started",
				message: "Your entries have been queued for deletion. This may take up to 2 minutes to show."
			});
		});
	}

	function input_input_handler() {
		query = this.value;
		$$invalidate(6, query);
	}

	const click_handler = () => $$invalidate(13, modal = "delete");
	const click_handler_1 = () => $$invalidate(13, modal = "toggle_column");
	const click_handler_2 = column => sortColumn(column);

	const change_handler = (row, e) => {
		onRowClick(row);
	};

	const func = r => {
		if (fastEquals(r, range)) {
			return;
		}

		$$invalidate(8, range = r);
		setWidths();
		$$invalidate(4, columns);
	};

	const change_handler_1 = (column, e) => {
		toggleColumn(e.target.checked, column);
	};

	const func_1 = () => {
		$$invalidate(13, modal = "");
	};

	const func_2 = () => {
		$$invalidate(13, modal = "");
	};

	$$self.$$set = $$props => {
		if ("getRows" in $$props) $$invalidate(22, getRows = $$props.getRows);
		if ("headerActions" in $$props) $$invalidate(23, headerActions = $$props.headerActions);
		if ("onEdit" in $$props) $$invalidate(24, onEdit = $$props.onEdit);
		if ("onDelete" in $$props) $$invalidate(25, onDelete = $$props.onDelete);
		if ("hidden" in $$props) $$invalidate(0, hidden = $$props.hidden);
		if ("sortColumns" in $$props) $$invalidate(26, sortColumns = $$props.sortColumns);
		if ("onFormat" in $$props) $$invalidate(27, onFormat = $$props.onFormat);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*rows, query*/ 68 | $$self.$$.dirty[1] & /*fuse*/ 64) {
			 {
				if (rows.length === 0) {
					$$invalidate(3, filtered = rows);
				} else if (query === "") {
					$$invalidate(3, filtered = rows);
				} else {
					const result = fuse.search(query);
					$$invalidate(3, filtered = result.map(r => r.item));
				}
			}
		}
	};

	return [
		hidden,
		id,
		rows,
		filtered,
		columns,
		filteredColumns,
		query,
		state,
		range,
		sort,
		sortDirection,
		allRowsSelected,
		selectedCount,
		modal,
		selectAllRows,
		sortColumn,
		headerStyle,
		setWidths,
		renderValue,
		toggleColumn,
		onRowClick,
		deleteEntries,
		getRows,
		headerActions,
		onEdit,
		onDelete,
		sortColumns,
		onFormat,
		input_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		change_handler,
		func,
		change_handler_1,
		func_1,
		func_2
	];
}

class RemoteTable extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$3,
			create_fragment$3,
			safe_not_equal,
			{
				getRows: 22,
				headerActions: 23,
				onEdit: 24,
				onDelete: 25,
				hidden: 0,
				sortColumns: 26,
				onFormat: 27
			},
			[-1, -1]
		);
	}
}

export { RemoteTable as R, ToastManager as T };
