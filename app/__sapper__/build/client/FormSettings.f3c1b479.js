import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, k as space, c as claim_element, a as children, b as claim_text, d as detach, l as claim_space, f as attr, g as set_style, h as insert, j as append, y as set_data, n as noop, o as onMount, z as subscribe, m as create_component, p as claim_component, q as mount_component, r as transition_in, u as transition_out, v as destroy_component, A as group_outros, B as check_outros, x as dispatch, C as listen } from './client.a93cf518.js';
import './FileUpload.6e1eb6f3.js';
import { r as randomString } from './fuse.esm.4840cecb.js';
import { F as Field, s as saveForm, a as FormEditSettings } from './SaveForm.c378ae11.js';

/* src\components\form_settings\FormSettingsSidebar.svelte generated by Svelte v3.24.1 */

function create_fragment(ctx) {
	let div5;
	let div2;
	let div1;
	let h20;
	let t0;
	let t1;
	let div0;
	let span0;
	let t2;
	let hr;
	let t3;
	let h21;
	let t4_value = /*form*/ ctx[0].title + "";
	let t4;
	let t5;
	let t6;
	let div4;
	let div3;
	let a0;
	let t7;
	let span2;
	let span1;
	let a0_href_value;
	let a0_class_value;
	let t8;
	let a1;
	let t9;
	let span4;
	let span3;
	let a1_href_value;
	let a1_class_value;
	let t10;
	let a2;
	let t11;
	let span6;
	let span5;
	let a2_href_value;
	let a2_class_value;
	let t12;
	let a3;
	let t13;
	let span8;
	let span7;
	let a3_href_value;
	let a3_class_value;

	return {
		c() {
			div5 = element("div");
			div2 = element("div");
			div1 = element("div");
			h20 = element("h2");
			t0 = text("Form Settings");
			t1 = space();
			div0 = element("div");
			span0 = element("span");
			t2 = space();
			hr = element("hr");
			t3 = space();
			h21 = element("h2");
			t4 = text(t4_value);
			t5 = text(" Form");
			t6 = space();
			div4 = element("div");
			div3 = element("div");
			a0 = element("a");
			t7 = text("General\r\n        ");
			span2 = element("span");
			span1 = element("span");
			t8 = space();
			a1 = element("a");
			t9 = text("Workflows\r\n        ");
			span4 = element("span");
			span3 = element("span");
			t10 = space();
			a2 = element("a");
			t11 = text("Emails\r\n        ");
			span6 = element("span");
			span5 = element("span");
			t12 = space();
			a3 = element("a");
			t13 = text("Scoring \r\n        ");
			span8 = element("span");
			span7 = element("span");
			this.h();
		},
		l(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			h20 = claim_element(div1_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t0 = claim_text(h20_nodes, "Form Settings");
			h20_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			span0 = claim_element(div0_nodes, "SPAN", { class: true });
			children(span0).forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);
			hr = claim_element(div2_nodes, "HR", {});
			t3 = claim_space(div2_nodes);
			h21 = claim_element(div2_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t4 = claim_text(h21_nodes, t4_value);
			t5 = claim_text(h21_nodes, " Form");
			h21_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t6 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			a0 = claim_element(div3_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t7 = claim_text(a0_nodes, "General\r\n        ");
			span2 = claim_element(a0_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			span1 = claim_element(span2_nodes, "SPAN", { class: true });
			children(span1).forEach(detach);
			span2_nodes.forEach(detach);
			a0_nodes.forEach(detach);
			t8 = claim_space(div3_nodes);
			a1 = claim_element(div3_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t9 = claim_text(a1_nodes, "Workflows\r\n        ");
			span4 = claim_element(a1_nodes, "SPAN", { class: true });
			var span4_nodes = children(span4);
			span3 = claim_element(span4_nodes, "SPAN", { class: true });
			children(span3).forEach(detach);
			span4_nodes.forEach(detach);
			a1_nodes.forEach(detach);
			t10 = claim_space(div3_nodes);
			a2 = claim_element(div3_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t11 = claim_text(a2_nodes, "Emails\r\n        ");
			span6 = claim_element(a2_nodes, "SPAN", { class: true });
			var span6_nodes = children(span6);
			span5 = claim_element(span6_nodes, "SPAN", { class: true });
			children(span5).forEach(detach);
			span6_nodes.forEach(detach);
			a2_nodes.forEach(detach);
			t12 = claim_space(div3_nodes);
			a3 = claim_element(div3_nodes, "A", { href: true, class: true });
			var a3_nodes = children(a3);
			t13 = claim_text(a3_nodes, "Scoring \r\n        ");
			span8 = claim_element(a3_nodes, "SPAN", { class: true });
			var span8_nodes = children(span8);
			span7 = claim_element(span8_nodes, "SPAN", { class: true });
			children(span7).forEach(detach);
			span8_nodes.forEach(detach);
			a3_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h20, "class", "h4 mt-3");
			attr(span0, "class", "h4 fas fa-cogs");
			attr(div0, "class", "ml-auto");
			set_style(div0, "padding-top", "1.1em");
			set_style(div1, "display", "flex");
			attr(h21, "class", "h5 svelte-789alh");
			attr(div2, "class", "card-header bg-white border-0");
			set_style(div2, "padding-bottom", "0.5em");
			attr(span1, "class", "fas fa-chevron-right");
			attr(span2, "class", "icon icon-xs ml-auto");
			attr(a0, "href", a0_href_value = "./form-settings/" + /*form*/ ctx[0].id);
			attr(a0, "class", a0_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "general" ? "active" : "") + " svelte-789alh");
			attr(span3, "class", "fas fa-chevron-right");
			attr(span4, "class", "icon icon-xs ml-auto");
			attr(a1, "href", a1_href_value = "./form-settings/" + /*form*/ ctx[0].id + "/workflows");
			attr(a1, "class", a1_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "workflows" ? "active" : "") + " svelte-789alh");
			attr(span5, "class", "fas fa-chevron-right");
			attr(span6, "class", "icon icon-xs ml-auto");
			attr(a2, "href", a2_href_value = "./form-settings/" + /*form*/ ctx[0].id + "/emails");
			attr(a2, "class", a2_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "emails" ? "active" : "") + " svelte-789alh");
			attr(span7, "class", "fas fa-chevron-right");
			attr(span8, "class", "icon icon-xs ml-auto");
			attr(a3, "href", a3_href_value = "./form-settings/" + /*form*/ ctx[0].id + "/scoring");
			attr(a3, "class", a3_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "scoring" ? "active" : "") + " svelte-789alh");
			attr(div3, "class", "list-group dashboard-menu list-group-sm svelte-789alh");
			attr(div4, "class", "card-body p-2");
			attr(div5, "class", "card border-light p-2 svelte-789alh");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div2);
			append(div2, div1);
			append(div1, h20);
			append(h20, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, span0);
			append(div2, t2);
			append(div2, hr);
			append(div2, t3);
			append(div2, h21);
			append(h21, t4);
			append(h21, t5);
			append(div5, t6);
			append(div5, div4);
			append(div4, div3);
			append(div3, a0);
			append(a0, t7);
			append(a0, span2);
			append(span2, span1);
			append(div3, t8);
			append(div3, a1);
			append(a1, t9);
			append(a1, span4);
			append(span4, span3);
			append(div3, t10);
			append(div3, a2);
			append(a2, t11);
			append(a2, span6);
			append(span6, span5);
			append(div3, t12);
			append(div3, a3);
			append(a3, t13);
			append(a3, span8);
			append(span8, span7);
		},
		p(ctx, [dirty]) {
			if (dirty & /*form*/ 1 && t4_value !== (t4_value = /*form*/ ctx[0].title + "")) set_data(t4, t4_value);

			if (dirty & /*form*/ 1 && a0_href_value !== (a0_href_value = "./form-settings/" + /*form*/ ctx[0].id)) {
				attr(a0, "href", a0_href_value);
			}

			if (dirty & /*selected*/ 2 && a0_class_value !== (a0_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "general" ? "active" : "") + " svelte-789alh")) {
				attr(a0, "class", a0_class_value);
			}

			if (dirty & /*form*/ 1 && a1_href_value !== (a1_href_value = "./form-settings/" + /*form*/ ctx[0].id + "/workflows")) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*selected*/ 2 && a1_class_value !== (a1_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "workflows" ? "active" : "") + " svelte-789alh")) {
				attr(a1, "class", a1_class_value);
			}

			if (dirty & /*form*/ 1 && a2_href_value !== (a2_href_value = "./form-settings/" + /*form*/ ctx[0].id + "/emails")) {
				attr(a2, "href", a2_href_value);
			}

			if (dirty & /*selected*/ 2 && a2_class_value !== (a2_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "emails" ? "active" : "") + " svelte-789alh")) {
				attr(a2, "class", a2_class_value);
			}

			if (dirty & /*form*/ 1 && a3_href_value !== (a3_href_value = "./form-settings/" + /*form*/ ctx[0].id + "/scoring")) {
				attr(a3, "href", a3_href_value);
			}

			if (dirty & /*selected*/ 2 && a3_class_value !== (a3_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*selected*/ ctx[1] === "scoring" ? "active" : "") + " svelte-789alh")) {
				attr(a3, "class", a3_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { form } = $$props;
	let { selected } = $$props;

	onMount(() => {
		subscribe("form_loaded", updatedForm => {
			$$invalidate(0, form = updatedForm);
		});

		subscribe("form_updated", updatedForm => {
			$$invalidate(0, form = updatedForm);
		});
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	};

	return [form, selected];
}

class FormSettingsSidebar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { form: 0, selected: 1 });
	}
}

/* src\components\form_settings\EmailSettings.svelte generated by Svelte v3.24.1 */

function create_fragment$1(ctx) {
	let p;
	let t0;
	let t1;
	let field0;
	let t2;
	let h2;
	let t3;
	let t4;
	let field1;
	let t5;
	let field2;
	let t6;
	let field3;
	let current;

	field0 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "switch",
					label: "Send me an email summary on submission",
					value: {
						type: "local",
						value: /*form*/ ctx[0].emailOnSubmission ?? false
					},
					configFieldTarget: "emailOnSubmission",
					configTarget: "form"
				}
			}
		});

	field1 = new Field({
			props: {
				field: {
					id: randomString(),
					required: true,
					label: "Form Title",
					value: {
						type: "local",
						value: /*form*/ ctx[0].title
					},
					type: "string",
					configFieldTarget: "title",
					configTarget: "form"
				}
			}
		});

	field2 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "switch",
					label: "Disable after a maximum number of submissions",
					value: {
						type: "local",
						value: /*form*/ ctx[0].maxSubmissions ?? false
					},
					configFieldTarget: "maxSubmissions",
					configTarget: "form"
				}
			}
		});

	field3 = new Field({
			props: {
				field: {
					id: randomString(),
					type: "date",
					required: true,
					label: "Submissions close after date/time ",
					value: {
						type: "local",
						value: /*form*/ ctx[0].closeDateTime ?? ""
					},
					configFieldTarget: "closeDateTime",
					configTarget: "form"
				}
			}
		});

	return {
		c() {
			p = element("p");
			t0 = text("Configure what emails are sent when the form is submitted.");
			t1 = space();
			create_component(field0.$$.fragment);
			t2 = space();
			h2 = element("h2");
			t3 = text("Custom Emails");
			t4 = space();
			create_component(field1.$$.fragment);
			t5 = space();
			create_component(field2.$$.fragment);
			t6 = space();
			create_component(field3.$$.fragment);
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { style: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Configure what emails are sent when the form is submitted.");
			p_nodes.forEach(detach);
			t1 = claim_space(nodes);
			claim_component(field0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true, style: true });
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, "Custom Emails");
			h2_nodes.forEach(detach);
			t4 = claim_space(nodes);
			claim_component(field1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(field2.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(field3.$$.fragment, nodes);
			this.h();
		},
		h() {
			set_style(p, "padding-top", "0.6em");
			set_style(p, "margin-bottom", "0em");
			attr(h2, "class", "h5");
			set_style(h2, "padding-top", "0.5em");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			insert(target, t1, anchor);
			mount_component(field0, target, anchor);
			insert(target, t2, anchor);
			insert(target, h2, anchor);
			append(h2, t3);
			insert(target, t4, anchor);
			mount_component(field1, target, anchor);
			insert(target, t5, anchor);
			mount_component(field2, target, anchor);
			insert(target, t6, anchor);
			mount_component(field3, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const field0_changes = {};

			if (dirty & /*form*/ 1) field0_changes.field = {
				id: randomString(),
				type: "switch",
				label: "Send me an email summary on submission",
				value: {
					type: "local",
					value: /*form*/ ctx[0].emailOnSubmission ?? false
				},
				configFieldTarget: "emailOnSubmission",
				configTarget: "form"
			};

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*form*/ 1) field1_changes.field = {
				id: randomString(),
				required: true,
				label: "Form Title",
				value: {
					type: "local",
					value: /*form*/ ctx[0].title
				},
				type: "string",
				configFieldTarget: "title",
				configTarget: "form"
			};

			field1.$set(field1_changes);
			const field2_changes = {};

			if (dirty & /*form*/ 1) field2_changes.field = {
				id: randomString(),
				type: "switch",
				label: "Disable after a maximum number of submissions",
				value: {
					type: "local",
					value: /*form*/ ctx[0].maxSubmissions ?? false
				},
				configFieldTarget: "maxSubmissions",
				configTarget: "form"
			};

			field2.$set(field2_changes);
			const field3_changes = {};

			if (dirty & /*form*/ 1) field3_changes.field = {
				id: randomString(),
				type: "date",
				required: true,
				label: "Submissions close after date/time ",
				value: {
					type: "local",
					value: /*form*/ ctx[0].closeDateTime ?? ""
				},
				configFieldTarget: "closeDateTime",
				configTarget: "form"
			};

			field3.$set(field3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			transition_in(field3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			transition_out(field3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t1);
			destroy_component(field0, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(h2);
			if (detaching) detach(t4);
			destroy_component(field1, detaching);
			if (detaching) detach(t5);
			destroy_component(field2, detaching);
			if (detaching) detach(t6);
			destroy_component(field3, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	
	let { form } = $$props;

	onMount(() => {
		subscribe("form_loaded", updatedForm => {
			$$invalidate(0, form = updatedForm);
		});

		subscribe("form_updated", updatedForm => {
			$$invalidate(0, form = updatedForm);
		});
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
	};

	return [form];
}

class EmailSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { form: 0 });
	}
}

/* src\components\form_settings\FormSettingsDetails.svelte generated by Svelte v3.24.1 */

function create_if_block_5(ctx) {
	let div0;
	let h3;
	let t0;
	let t1;
	let div2;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_6, create_else_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div0 = element("div");
			h3 = element("h3");
			t0 = text("General");
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true, style: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "General");
			h3_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t1 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "h5 mb-0");
			set_style(h3, "padding-top", "0.4em");
			attr(div0, "class", "card-header bg-white border-light p-3 mb-4 mb-md-0");
			set_style(div0, "display", "flex");
			set_style(div0, "padding-top", "0.2em", 1);
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "card-body p-0 p-md-4");
			set_style(div2, "padding-top", "0.5em", 1);
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h3);
			append(h3, t0);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (54:12) {:else}
function create_else_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (52:12) {#if form}
function create_if_block_6(ctx) {
	let formeditsettings;
	let current;
	formeditsettings = new FormEditSettings({ props: { form: /*form*/ ctx[0] } });

	return {
		c() {
			create_component(formeditsettings.$$.fragment);
		},
		l(nodes) {
			claim_component(formeditsettings.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(formeditsettings, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const formeditsettings_changes = {};
			if (dirty & /*form*/ 1) formeditsettings_changes.form = /*form*/ ctx[0];
			formeditsettings.$set(formeditsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formeditsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formeditsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formeditsettings, detaching);
		}
	};
}

// (60:6) {#if selected === 'workflows'}
function create_if_block_3(ctx) {
	let div0;
	let h3;
	let t0;
	let t1;
	let div2;
	let div1;

	function select_block_type_1(ctx, dirty) {
		if (/*form*/ ctx[0]) return create_if_block_4;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div0 = element("div");
			h3 = element("h3");
			t0 = text("Workflows");
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true, style: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Workflows");
			h3_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t1 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "h5 mb-0");
			set_style(h3, "padding-top", "0.4em");
			attr(div0, "class", "card-header bg-white border-light p-3 mb-4 mb-md-0");
			set_style(div0, "display", "flex");
			set_style(div0, "padding-top", "0.2em", 1);
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "card-body p-0 p-md-4");
			set_style(div2, "padding-top", "0.5em", 1);
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h3);
			append(h3, t0);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			if_block.m(div1, null);
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div1, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			if_block.d();
		}
	};
}

// (68:12) {:else}
function create_else_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (66:12) {#if form}
function create_if_block_4(ctx) {
	return { c: noop, l: noop, m: noop, d: noop };
}

// (74:6) {#if selected === 'emails'}
function create_if_block_1(ctx) {
	let div0;
	let h3;
	let t0;
	let t1;
	let div2;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block_1];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*form*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div0 = element("div");
			h3 = element("h3");
			t0 = text("Configure Emails");
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true, style: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Configure Emails");
			h3_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t1 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "h5 mb-0");
			set_style(h3, "padding-top", "0.4em");
			attr(div0, "class", "card-header bg-white border-light p-3 mb-4 mb-md-0");
			set_style(div0, "display", "flex");
			set_style(div0, "padding-top", "0.2em", 1);
			attr(div1, "class", "row justify-content-center");
			attr(div2, "class", "card-body p-0 p-md-4");
			set_style(div2, "padding-top", "0.5em", 1);
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h3);
			append(h3, t0);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (82:12) {:else}
function create_else_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "spinner");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (80:12) {#if form}
function create_if_block_2(ctx) {
	let emailsettings;
	let current;
	emailsettings = new EmailSettings({ props: { form: /*form*/ ctx[0] } });

	return {
		c() {
			create_component(emailsettings.$$.fragment);
		},
		l(nodes) {
			claim_component(emailsettings.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(emailsettings, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const emailsettings_changes = {};
			if (dirty & /*form*/ 1) emailsettings_changes.form = /*form*/ ctx[0];
			emailsettings.$set(emailsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(emailsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(emailsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(emailsettings, detaching);
		}
	};
}

// (89:93) {:else}
function create_else_block(ctx) {
	let button;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t = text("Save Changes");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Save Changes");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "button");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", /*saveDraft*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (89:8) {#if saving}
function create_if_block(ctx) {
	let button;
	let t;

	return {
		c() {
			button = element("button");
			t = text("Saving...");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true, type: true, disabled: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Saving...");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "class", "btn btn-primary");
			attr(button, "type", "button");
			button.disabled = true;
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

function create_fragment$2(ctx) {
	let div6;
	let div5;
	let div3;
	let div0;
	let a0;
	let t0;
	let a0_href_value;
	let t1;
	let div1;
	let a1;
	let span;
	let t2;
	let a1_href_value;
	let t3;
	let div2;
	let a2;
	let t4;
	let a2_href_value;
	let t5;
	let form_1;
	let t6;
	let t7;
	let t8;
	let div4;
	let current;
	let if_block0 = /*selected*/ ctx[1] === "general" && create_if_block_5(ctx);
	let if_block1 = /*selected*/ ctx[1] === "workflows" && create_if_block_3(ctx);
	let if_block2 = /*selected*/ ctx[1] === "emails" && create_if_block_1(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*saving*/ ctx[2]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type_3(ctx);
	let if_block3 = current_block_type(ctx);

	return {
		c() {
			div6 = element("div");
			div5 = element("div");
			div3 = element("div");
			div0 = element("div");
			a0 = element("a");
			t0 = text("View Submissions");
			t1 = space();
			div1 = element("div");
			a1 = element("a");
			span = element("span");
			t2 = text(" Edit Form");
			t3 = space();
			div2 = element("div");
			a2 = element("a");
			t4 = text("Preview Form");
			t5 = space();
			form_1 = element("form");
			if (if_block0) if_block0.c();
			t6 = space();
			if (if_block1) if_block1.c();
			t7 = space();
			if (if_block2) if_block2.c();
			t8 = space();
			div4 = element("div");
			if_block3.c();
			this.h();
		},
		l(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div3 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			a0 = claim_element(div0_nodes, "A", { href: true, target: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "View Submissions");
			a0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t1 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			a1 = claim_element(div1_nodes, "A", { href: true, target: true, class: true });
			var a1_nodes = children(a1);
			span = claim_element(a1_nodes, "SPAN", { class: true });
			children(span).forEach(detach);
			t2 = claim_text(a1_nodes, " Edit Form");
			a1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			a2 = claim_element(div2_nodes, "A", { href: true, target: true, class: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, "Preview Form");
			a2_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t5 = claim_space(div5_nodes);
			form_1 = claim_element(div5_nodes, "FORM", { action: true, method: true, class: true });
			var form_1_nodes = children(form_1);
			if (if_block0) if_block0.l(form_1_nodes);
			t6 = claim_space(form_1_nodes);
			if (if_block1) if_block1.l(form_1_nodes);
			t7 = claim_space(form_1_nodes);
			if (if_block2) if_block2.l(form_1_nodes);
			t8 = claim_space(form_1_nodes);
			div4 = claim_element(form_1_nodes, "DIV", { class: true, style: true });
			var div4_nodes = children(div4);
			if_block3.l(div4_nodes);
			div4_nodes.forEach(detach);
			form_1_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "href", a0_href_value = `/submissions?formId=${/*form*/ ctx[0].id}`);
			attr(a0, "target", "_blank");
			attr(a0, "class", "btn btn-outline-dark");
			set_style(div0, "text-align", "right");
			attr(span, "class", "fas fa-pencil-alt");
			attr(a1, "href", a1_href_value = `/builder?formId=${/*form*/ ctx[0].id}`);
			attr(a1, "target", "_blank");
			attr(a1, "class", "btn btn-outline-dark");
			set_style(div1, "text-align", "right");
			set_style(div1, "padding-left", "0.5em");
			attr(a2, "href", a2_href_value = `/preview?formId=${/*form*/ ctx[0].id}`);
			attr(a2, "target", "_blank");
			attr(a2, "class", "btn btn-outline-dark");
			set_style(div2, "text-align", "right");
			set_style(div2, "padding-left", "0.5em");
			attr(div3, "class", "d-flex justify-content-end");
			set_style(div3, "padding-bottom", "1em");
			set_style(div3, "padding-left", "0");
			set_style(div3, "display", "flex");
			set_style(div3, "text-align", "right");
			attr(div4, "class", "d-flex justify-content-end ml-auto");
			set_style(div4, "padding-right", "1em");
			set_style(div4, "padding-bottom", "1em");
			attr(form_1, "action", "#");
			attr(form_1, "method", "post");
			attr(form_1, "class", "card border-light p-3 mb-4");
			attr(div5, "class", "col-12 mb-4");
			attr(div6, "class", "row mb-5");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div3);
			append(div3, div0);
			append(div0, a0);
			append(a0, t0);
			append(div3, t1);
			append(div3, div1);
			append(div1, a1);
			append(a1, span);
			append(a1, t2);
			append(div3, t3);
			append(div3, div2);
			append(div2, a2);
			append(a2, t4);
			append(div5, t5);
			append(div5, form_1);
			if (if_block0) if_block0.m(form_1, null);
			append(form_1, t6);
			if (if_block1) if_block1.m(form_1, null);
			append(form_1, t7);
			if (if_block2) if_block2.m(form_1, null);
			append(form_1, t8);
			append(form_1, div4);
			if_block3.m(div4, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*form*/ 1 && a0_href_value !== (a0_href_value = `/submissions?formId=${/*form*/ ctx[0].id}`)) {
				attr(a0, "href", a0_href_value);
			}

			if (!current || dirty & /*form*/ 1 && a1_href_value !== (a1_href_value = `/builder?formId=${/*form*/ ctx[0].id}`)) {
				attr(a1, "href", a1_href_value);
			}

			if (!current || dirty & /*form*/ 1 && a2_href_value !== (a2_href_value = `/preview?formId=${/*form*/ ctx[0].id}`)) {
				attr(a2, "href", a2_href_value);
			}

			if (/*selected*/ ctx[1] === "general") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*selected*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(form_1, t6);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selected*/ ctx[1] === "workflows") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(form_1, t7);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*selected*/ ctx[1] === "emails") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*selected*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(form_1, t8);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(div4, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if_block3.d();
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	
	let saving = false;
	let { form } = $$props;
	let { selected } = $$props;

	function saveDraft() {
		return __awaiter(this, void 0, void 0, function* () {
			$$invalidate(2, saving = true);
			yield dispatch("save_form", { status: "draft" });
			$$invalidate(2, saving = false);
		});
	}

	subscribe("save_form", params => __awaiter(void 0, void 0, void 0, function* () {
		yield saveForm();
	}));

	onMount(() => {
		console.log(selected);
	});

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	};

	return [form, selected, saving, saveDraft];
}

class FormSettingsDetails extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { form: 0, selected: 1 });
	}
}

/* src\components\form_settings\FormSettings.svelte generated by Svelte v3.24.1 */

function create_if_block_1$1(ctx) {
	let formsettingssidebar;
	let current;

	formsettingssidebar = new FormSettingsSidebar({
			props: {
				form: /*form*/ ctx[0],
				selected: /*selected*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(formsettingssidebar.$$.fragment);
		},
		l(nodes) {
			claim_component(formsettingssidebar.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(formsettingssidebar, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const formsettingssidebar_changes = {};
			if (dirty & /*form*/ 1) formsettingssidebar_changes.form = /*form*/ ctx[0];
			if (dirty & /*selected*/ 2) formsettingssidebar_changes.selected = /*selected*/ ctx[1];
			formsettingssidebar.$set(formsettingssidebar_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formsettingssidebar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formsettingssidebar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formsettingssidebar, detaching);
		}
	};
}

// (19:8) {#if form != null}
function create_if_block$1(ctx) {
	let formsettingsdetails;
	let current;

	formsettingsdetails = new FormSettingsDetails({
			props: {
				form: /*form*/ ctx[0],
				selected: /*selected*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(formsettingsdetails.$$.fragment);
		},
		l(nodes) {
			claim_component(formsettingsdetails.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(formsettingsdetails, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const formsettingsdetails_changes = {};
			if (dirty & /*form*/ 1) formsettingsdetails_changes.form = /*form*/ ctx[0];
			if (dirty & /*selected*/ 2) formsettingsdetails_changes.selected = /*selected*/ ctx[1];
			formsettingsdetails.$set(formsettingsdetails_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formsettingsdetails.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formsettingsdetails.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formsettingsdetails, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	let if_block0 = /*form*/ ctx[0] != null && create_if_block_1$1(ctx);
	let if_block1 = /*form*/ ctx[0] != null && create_if_block$1(ctx);

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t = space();
			div1 = element("div");
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (if_block0) if_block0.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block1) if_block1.l(div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col-12 col-md-4 d-none d-lg-block");
			attr(div1, "class", "col-12 col-lg-8");
			attr(div2, "class", "row pt-3 pt-md-0");
			attr(div3, "class", "container");
			attr(div4, "class", "section section-lg pt-6 pt-md-6 bg-soft");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div2, t);
			append(div2, div1);
			if (if_block1) if_block1.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*form*/ ctx[0] != null) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*form*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*form*/ ctx[0] != null) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*form*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	
	let { form } = $$props;
	let { selected } = $$props;

	$$self.$$set = $$props => {
		if ("form" in $$props) $$invalidate(0, form = $$props.form);
		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	};

	return [form, selected];
}

class FormSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { form: 0, selected: 1 });
	}
}

export { FormSettings as F };
