import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, k as space, c as claim_element, a as children, b as claim_text, d as detach, l as claim_space, f as attr, h as insert, j as append, C as listen, y as set_data, n as noop, U as destroy_each, o as onMount, g as set_style, a3 as set_input_value, I as run_all, a8 as afterUpdate, m as create_component, p as claim_component, q as mount_component, r as transition_in, u as transition_out, v as destroy_component, B as check_outros, A as group_outros } from './client.a93cf518.js';
import { g as getApi } from './ApiService.7fbbc2d7.js';
import './FormList.61aa3e8b.js';
import { g as getUrlParameter } from './Http.ea6dfc47.js';
import './Sidebar.87636085.js';

/* src\components\FormList.svelte generated by Svelte v3.24.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (25:4) {#each forms as form}
function create_each_block(ctx) {
	let li;
	let div2;
	let div0;
	let h3;
	let a0;
	let t0_value = /*form*/ ctx[4].title + "";
	let t0;
	let t1;
	let small;
	let t2_value = /*form*/ ctx[4].changeTime + "";
	let t2;
	let t3;
	let div1;
	let a1;
	let t4;
	let a1_href_value;
	let t5;
	let a2;
	let t6;
	let a2_href_value;
	let t7;
	let button;
	let span;
	let t8;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[2](/*form*/ ctx[4], ...args);
	}

	return {
		c() {
			li = element("li");
			div2 = element("div");
			div0 = element("div");
			h3 = element("h3");
			a0 = element("a");
			t0 = text(t0_value);
			t1 = space();
			small = element("small");
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			a1 = element("a");
			t4 = text("Submissions");
			t5 = space();
			a2 = element("a");
			t6 = text("Edit");
			t7 = space();
			button = element("button");
			span = element("span");
			t8 = space();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			div2 = claim_element(li_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			a0 = claim_element(h3_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, t0_value);
			a0_nodes.forEach(detach);
			h3_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			small = claim_element(div0_nodes, "SMALL", { class: true });
			var small_nodes = children(small);
			t2 = claim_text(small_nodes, t2_value);
			small_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a1 = claim_element(div1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, "Submissions");
			a1_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			a2 = claim_element(div1_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t6 = claim_text(a2_nodes, "Edit");
			a2_nodes.forEach(detach);
			t7 = claim_space(div1_nodes);
			button = claim_element(div1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { class: true });
			children(span).forEach(detach);
			button_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t8 = claim_space(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "href", "./invoice.html");
			attr(h3, "class", "h6 mb-1");
			attr(small, "class", "text-gray-700");
			attr(div0, "class", "col");
			attr(a1, "href", a1_href_value = `/submissions?formId=${/*form*/ ctx[4].id}`);
			attr(a1, "class", "btn btn-xs btn-outline-dark");
			attr(a2, "href", a2_href_value = `/builder?formId=${/*form*/ ctx[4].id}`);
			attr(a2, "class", "btn btn-xs btn-outline-dark");
			attr(span, "class", "fas fa-trash");
			attr(button, "class", "btn btn-xs btn-outline-dark");
			attr(div1, "class", "col-auto");
			attr(div2, "class", "row align-items-center");
			attr(li, "class", "list-group-item border-bottom py-3 radius-0 svelte-v80ume");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div2);
			append(div2, div0);
			append(div0, h3);
			append(h3, a0);
			append(a0, t0);
			append(div0, t1);
			append(div0, small);
			append(small, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, a1);
			append(a1, t4);
			append(div1, t5);
			append(div1, a2);
			append(a2, t6);
			append(div1, t7);
			append(div1, button);
			append(button, span);
			append(li, t8);

			if (!mounted) {
				dispose = listen(span, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*forms*/ 1 && t0_value !== (t0_value = /*form*/ ctx[4].title + "")) set_data(t0, t0_value);
			if (dirty & /*forms*/ 1 && t2_value !== (t2_value = /*form*/ ctx[4].changeTime + "")) set_data(t2, t2_value);

			if (dirty & /*forms*/ 1 && a1_href_value !== (a1_href_value = `/submissions?formId=${/*form*/ ctx[4].id}`)) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*forms*/ 1 && a2_href_value !== (a2_href_value = `/builder?formId=${/*form*/ ctx[4].id}`)) {
				attr(a2, "href", a2_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let ul;
	let each_value = /*forms*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			ul = claim_element(div_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(ul, "class", "list-group list-group-flush");
			attr(div, "class", "card-body px-0 pt-0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*onDelete, forms*/ 1) {
				each_value = /*forms*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function onDelete(formId) {
	
}

function instance($$self, $$props, $$invalidate) {
	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	
	
	let forms = [];
	let { folder } = $$props;

	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		$$invalidate(0, forms = yield getApi("form?lean=true"));
	}));

	const click_handler = form => {
		onDelete(form.id || "");
	};

	$$self.$$set = $$props => {
		if ("folder" in $$props) $$invalidate(1, folder = $$props.folder);
	};

	return [forms, folder, click_handler];
}

class FormList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { folder: 1 });
	}
}

/* src\components\Folders.svelte generated by Svelte v3.24.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (31:10) {:else}
function create_else_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			this.h();
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", { class: true, style: true });
			children(span).forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "far fa-folder");
			set_style(span, "font-size", "1.2em");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (29:10) {#if folder === 'uncategorized'}
function create_if_block_1(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			this.h();
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", { class: true, style: true });
			children(span).forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "fas fa-folder-minus");
			set_style(span, "font-size", "1.3em");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (35:10) {#if folder === selected}
function create_if_block(ctx) {
	let span1;
	let span0;

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			this.h();
		},
		l(nodes) {
			span1 = claim_element(nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { class: true });
			children(span0).forEach(detach);
			span1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "fas fa-chevron-right");
			attr(span1, "class", "icon icon-xs ml-auto");
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
		},
		d(detaching) {
			if (detaching) detach(span1);
		}
	};
}

// (25:2) {#each folders as folder}
function create_each_block$1(ctx) {
	let div1;
	let div0;
	let a;
	let t0;
	let span;
	let t1_value = /*folder*/ ctx[4] + "";
	let t1;
	let t2;
	let a_href_value;
	let a_class_value;

	function select_block_type(ctx, dirty) {
		if (/*folder*/ ctx[4] === "uncategorized") return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*folder*/ ctx[4] === /*selected*/ ctx[0] && create_if_block();

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			a = element("a");
			if_block0.c();
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a = claim_element(div0_nodes, "A", { href: true, class: true, style: true });
			var a_nodes = children(a);
			if_block0.l(a_nodes);
			t0 = claim_space(a_nodes);
			span = claim_element(a_nodes, "SPAN", { style: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach);
			t2 = claim_space(a_nodes);
			if (if_block1) if_block1.l(a_nodes);
			a_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(span, "padding-left", "0.5em");
			attr(a, "href", a_href_value = "./folder/" + /*folder*/ ctx[4]);

			attr(a, "class", a_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*folder*/ ctx[4] === /*selected*/ ctx[0]
			? "active"
			: "") + " svelte-vnjzs6");

			set_style(a, "padding-bottom", "0.5em");
			set_style(a, "padding-top", "0.5em");
			attr(div0, "class", "list-group dashboard-menu list-group-sm svelte-vnjzs6");
			attr(div1, "class", "card-body p-2 svelte-vnjzs6");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, a);
			if_block0.m(a, null);
			append(a, t0);
			append(a, span);
			append(span, t1);
			append(a, t2);
			if (if_block1) if_block1.m(a, null);
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(a, t0);
				}
			}

			if (dirty & /*folders*/ 2 && t1_value !== (t1_value = /*folder*/ ctx[4] + "")) set_data(t1, t1_value);

			if (/*folder*/ ctx[4] === /*selected*/ ctx[0]) {
				if (if_block1) ; else {
					if_block1 = create_if_block();
					if_block1.c();
					if_block1.m(a, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*folders*/ 2 && a_href_value !== (a_href_value = "./folder/" + /*folder*/ ctx[4])) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*folders, selected*/ 3 && a_class_value !== (a_class_value = "d-flex list-group-item border-0 list-group-item-action " + (/*folder*/ ctx[4] === /*selected*/ ctx[0]
			? "active"
			: "") + " svelte-vnjzs6")) {
				attr(a, "class", a_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function create_fragment$1(ctx) {
	let div2;
	let div0;
	let input;
	let t0;
	let div1;
	let span0;
	let t1;
	let t2;
	let t3;
	let button;
	let span1;
	let t4;
	let span2;
	let t5;
	let mounted;
	let dispose;
	let each_value = /*folders*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			div1 = element("div");
			span0 = element("span");
			t1 = text("Your Folders");
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			button = element("button");
			span1 = element("span");
			t4 = space();
			span2 = element("span");
			t5 = text("New Folder");
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			input = claim_element(div0_nodes, "INPUT", { class: true, placeholder: true });
			div0_nodes.forEach(detach);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			span0 = claim_element(div1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t1 = claim_text(span0_nodes, "Your Folders");
			span0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			t3 = claim_space(div2_nodes);
			button = claim_element(div2_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			span1 = claim_element(button_nodes, "SPAN", { class: true, style: true });
			children(span1).forEach(detach);
			t4 = claim_space(button_nodes);
			span2 = claim_element(button_nodes, "SPAN", { style: true });
			var span2_nodes = children(span2);
			t5 = claim_text(span2_nodes, "New Folder");
			span2_nodes.forEach(detach);
			button_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(input, "class", "form-control search-bar container-fluid");
			attr(input, "placeholder", searchPlaceHolder);
			attr(div0, "class", "container-fluid p-2 mt-3 svelte-vnjzs6");
			set_style(div0, "padding-left", "0em");
			attr(span0, "class", "title svelte-vnjzs6");
			attr(div1, "class", "card-header card-header-title bg-white border-0 svelte-vnjzs6");
			set_style(div1, "display", "flex");
			attr(span1, "class", "fas fa-folder-plus");
			set_style(span1, "font-size", "1.2em");
			set_style(span2, "font-weight", "400");
			attr(button, "class", "btn btn-outline-dark svelte-vnjzs6");
			attr(div2, "class", "card border-light p-2 svelte-vnjzs6");
			set_style(div2, "padding-bottom", "1em", 1);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, input);
			set_input_value(input, /*query*/ ctx[2]);
			append(div2, t0);
			append(div2, div1);
			append(div1, span0);
			append(span0, t1);
			append(div2, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append(div2, t3);
			append(div2, button);
			append(button, span1);
			append(button, t4);
			append(button, span2);
			append(span2, t5);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[3]),
					listen(button, "click", newFolder)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*query*/ 4 && input.value !== /*query*/ ctx[2]) {
				set_input_value(input, /*query*/ ctx[2]);
			}

			if (dirty & /*folders, selected*/ 3) {
				each_value = /*folders*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, t3);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

let searchPlaceHolder = "Search for a form";

function getFolders() {
	return ["uncategorized", "Job Listings", "Surveys"];
}

function newFolder() {
	
}

function instance$1($$self, $$props, $$invalidate) {
	let { selected } = $$props;
	let folders = [];
	let query = "";

	onMount(() => {
		$$invalidate(1, folders = getFolders());
	});

	afterUpdate(() => {
		console.log(selected);
	});

	function input_input_handler() {
		query = this.value;
		$$invalidate(2, query);
	}

	$$self.$$set = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	return [selected, folders, query, input_input_handler];
}

class Folders extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { selected: 0 });
	}
}

/* src\components\FolderContent.svelte generated by Svelte v3.24.1 */

function create_else_block$1(ctx) {
	let p;
	let t0_value = /*folder*/ ctx[0].forms.length + "";
	let t0;
	let t1;

	return {
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = text(" Submissions");
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			t1 = claim_text(p_nodes, " Submissions");
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "small");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*folder*/ 1 && t0_value !== (t0_value = /*folder*/ ctx[0].forms.length + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (15:12) {#if folder.name === 'uncategorized'}
function create_if_block$1(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text("Uncategorized forms have not been assigned a folder yet.");
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Uncategorized forms have not been assigned a folder yet.");
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "small");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$2(ctx) {
	let div7;
	let div6;
	let div5;
	let div4;
	let div3;
	let div0;
	let span0;
	let t0_value = /*folder*/ ctx[0].name + "";
	let t0;
	let t1;
	let t2;
	let div2;
	let div1;
	let button0;
	let span1;
	let t3;
	let button1;
	let span2;
	let t4;
	let span3;
	let t5;
	let t6;
	let a;
	let span4;
	let span5;
	let t7;
	let t8;
	let formlist;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*folder*/ ctx[0].name === "uncategorized") return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);
	formlist = new FormList({ props: { folder: /*folder*/ ctx[0] } });

	return {
		c() {
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			if_block.c();
			t2 = space();
			div2 = element("div");
			div1 = element("div");
			button0 = element("button");
			span1 = element("span");
			t3 = space();
			button1 = element("button");
			span2 = element("span");
			t4 = space();
			span3 = element("span");
			t5 = text("Import Form");
			t6 = space();
			a = element("a");
			span4 = element("span");
			span5 = element("span");
			t7 = text("Create Form");
			t8 = space();
			create_component(formlist.$$.fragment);
			this.h();
		},
		l(nodes) {
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span0 = claim_element(div0_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, t0_value);
			span0_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			if_block.l(div0_nodes);
			div0_nodes.forEach(detach);
			t2 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			button0 = claim_element(div1_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			span1 = claim_element(button0_nodes, "SPAN", { class: true });
			children(span1).forEach(detach);
			button0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t3 = claim_space(div2_nodes);
			button1 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			span2 = claim_element(button1_nodes, "SPAN", { class: true });
			children(span2).forEach(detach);
			t4 = claim_space(button1_nodes);
			span3 = claim_element(button1_nodes, "SPAN", {});
			var span3_nodes = children(span3);
			t5 = claim_text(span3_nodes, "Import Form");
			span3_nodes.forEach(detach);
			button1_nodes.forEach(detach);
			t6 = claim_space(div2_nodes);
			a = claim_element(div2_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			span4 = claim_element(a_nodes, "SPAN", { class: true });
			children(span4).forEach(detach);
			span5 = claim_element(a_nodes, "SPAN", {});
			var span5_nodes = children(span5);
			t7 = claim_text(span5_nodes, "Create Form");
			span5_nodes.forEach(detach);
			a_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t8 = claim_space(div5_nodes);
			claim_component(formlist.$$.fragment, div5_nodes);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "h5");
			attr(div0, "class", "col");
			attr(span1, "class", "fas fa-cog");
			attr(button0, "class", "btn btn-xs btn-outline-dark");
			attr(div1, "class", "align-items-center");
			set_style(div1, "padding-bottom", "0.3em");
			set_style(div1, "text-align", "right", 1);
			attr(span2, "class", "fas fa-file-import");
			attr(button1, "class", "btn btn-xs btn-outline-dark");
			attr(span4, "class", "fas fa-plus");
			attr(a, "href", "/builder");
			attr(a, "class", "btn btn-xs btn-outline-dark");
			attr(div2, "class", "col-auto");
			attr(div3, "class", "row");
			attr(div4, "class", "card-header bg-white border-0 p-2");
			set_style(div4, "display", "flex");
			attr(div5, "class", "card card-body bg-white border-light p-0 p-md-4 svelte-wc0ycq");
			attr(div6, "class", "col-12 mb-4");
			attr(div7, "class", "row mb-5");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div6);
			append(div6, div5);
			append(div5, div4);
			append(div4, div3);
			append(div3, div0);
			append(div0, span0);
			append(span0, t0);
			append(div0, t1);
			if_block.m(div0, null);
			append(div3, t2);
			append(div3, div2);
			append(div2, div1);
			append(div1, button0);
			append(button0, span1);
			append(div2, t3);
			append(div2, button1);
			append(button1, span2);
			append(button1, t4);
			append(button1, span3);
			append(span3, t5);
			append(div2, t6);
			append(div2, a);
			append(a, span4);
			append(a, span5);
			append(span5, t7);
			append(div5, t8);
			mount_component(formlist, div5, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[1]),
					listen(button1, "click", onImportForm)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*folder*/ 1) && t0_value !== (t0_value = /*folder*/ ctx[0].name + "")) set_data(t0, t0_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			const formlist_changes = {};
			if (dirty & /*folder*/ 1) formlist_changes.folder = /*folder*/ ctx[0];
			formlist.$set(formlist_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formlist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formlist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div7);
			if_block.d();
			destroy_component(formlist);
			mounted = false;
			run_all(dispose);
		}
	};
}

function onSettings(folderId) {
	
}

function onImportForm() {
	
}

function instance$2($$self, $$props, $$invalidate) {
	
	let { folder } = $$props;

	const click_handler = () => {
		onSettings(folder.id);
	};

	$$self.$$set = $$props => {
		if ("folder" in $$props) $$invalidate(0, folder = $$props.folder);
	};

	return [folder, click_handler];
}

class FolderContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { folder: 0 });
	}
}

/* src\routes\folder\index.svelte generated by Svelte v3.24.1 */

function create_if_block$2(ctx) {
	let foldercontent;
	let current;
	foldercontent = new FolderContent({ props: { folder: /*folder*/ ctx[1] } });

	return {
		c() {
			create_component(foldercontent.$$.fragment);
		},
		l(nodes) {
			claim_component(foldercontent.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(foldercontent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const foldercontent_changes = {};
			if (dirty & /*folder*/ 2) foldercontent_changes.folder = /*folder*/ ctx[1];
			foldercontent.$set(foldercontent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(foldercontent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foldercontent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(foldercontent, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let div5;
	let div4;
	let div3;
	let div2;
	let div0;
	let folders;
	let t;
	let div1;
	let current;

	folders = new Folders({
			props: { selected: /*folderName*/ ctx[0] }
		});

	let if_block = /*folder*/ ctx[1] != null && create_if_block$2(ctx);

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(folders.$$.fragment);
			t = space();
			div1 = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div5 = claim_element(nodes, "DIV", { style: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(folders.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col-12 col-md-4 d-none d-lg-block");
			attr(div1, "class", "col-12 col-lg-8");
			attr(div2, "class", "row pt-3 pt-md-0");
			attr(div3, "class", "container");
			attr(div4, "class", "section section-lg pt-6 pt-md-6 bg-soft");
			set_style(div5, "background-color", "#f5f9fe");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			mount_component(folders, div0, null);
			append(div2, t);
			append(div2, div1);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const folders_changes = {};
			if (dirty & /*folderName*/ 1) folders_changes.selected = /*folderName*/ ctx[0];
			folders.$set(folders_changes);

			if (/*folder*/ ctx[1] != null) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*folder*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(folders.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(folders.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_component(folders);
			if (if_block) if_block.d();
		}
	};
}

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P
		? value
		: new P(function (resolve) {
					resolve(value);
				});
	}

	return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch(e) {
					reject(e);
				}
			}

			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch(e) {
					reject(e);
				}
			}

			function step(result) {
				result.done
				? resolve(result.value)
				: adopt(result.value).then(fulfilled, rejected);
			}

			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
};

function preload(page, session) {
	return __awaiter(this, void 0, void 0, function* () {
		const folder = getUrlParameter("folder");

		if (!folder) {
			return "uncategorized";
		}

		return { folderName: folder };
	});
}

function getFolder(folderName) {
	return { name: folderName, forms: [], id: "12345" };
}

function instance$3($$self, $$props, $$invalidate) {
	
	
	let { folderName } = $$props;
	let folder;

	onMount(() => {
		$$invalidate(1, folder = getFolder(folderName));
	});

	afterUpdate(() => {
		$$invalidate(1, folder = getFolder(folderName));
	});

	$$self.$$set = $$props => {
		if ("folderName" in $$props) $$invalidate(0, folderName = $$props.folderName);
	};

	return [folderName, folder];
}

class Folder extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { folderName: 0 });
	}
}

export default Folder;
export { preload };
