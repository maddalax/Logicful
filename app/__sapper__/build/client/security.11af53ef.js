import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, k as space, c as claim_element, a as children, b as claim_text, d as detach, l as claim_space, f as attr, h as insert, j as append, n as noop, m as create_component, p as claim_component, q as mount_component, r as transition_in, u as transition_out, v as destroy_component } from './client.a93cf518.js';
import { A as AccountSidebar } from './AccountSidebar.f42b0ce9.js';

/* src\components\account\Security.svelte generated by Svelte v3.24.1 */

function create_fragment(ctx) {
	let div6;
	let div5;
	let div4;
	let h3;
	let t0;
	let t1;
	let form;
	let div0;
	let label0;
	let t2;
	let t3;
	let input0;
	let t4;
	let div1;
	let label1;
	let t5;
	let t6;
	let input1;
	let t7;
	let span0;
	let t8;
	let em;
	let t9;
	let t10;
	let t11;
	let div2;
	let label2;
	let t12;
	let t13;
	let input2;
	let t14;
	let span1;
	let t15;
	let t16;
	let div3;
	let button;
	let t17;

	return {
		c() {
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			h3 = element("h3");
			t0 = text("Change Password");
			t1 = space();
			form = element("form");
			div0 = element("div");
			label0 = element("label");
			t2 = text("Current Password");
			t3 = space();
			input0 = element("input");
			t4 = space();
			div1 = element("div");
			label1 = element("label");
			t5 = text("New Password");
			t6 = space();
			input1 = element("input");
			t7 = space();
			span0 = element("span");
			t8 = text("The password must be 8-20 characters, and must ");
			em = element("em");
			t9 = text("not");
			t10 = text(" contain spaces.");
			t11 = space();
			div2 = element("div");
			label2 = element("label");
			t12 = text("Verify");
			t13 = space();
			input2 = element("input");
			t14 = space();
			span1 = element("span");
			t15 = text("To confirm, type the new password again.");
			t16 = space();
			div3 = element("div");
			button = element("button");
			t17 = text("Save");
			this.h();
		},
		l(nodes) {
			div6 = claim_element(nodes, "DIV", {});
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h3 = claim_element(div4_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Change Password");
			h3_nodes.forEach(detach);
			t1 = claim_space(div4_nodes);
			form = claim_element(div4_nodes, "FORM", { class: true, autocomplete: true });
			var form_nodes = children(form);
			div0 = claim_element(form_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			label0 = claim_element(div0_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t2 = claim_text(label0_nodes, "Current Password");
			label0_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);

			input0 = claim_element(div0_nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				required: true
			});

			div0_nodes.forEach(detach);
			t4 = claim_space(form_nodes);
			div1 = claim_element(form_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			label1 = claim_element(div1_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t5 = claim_text(label1_nodes, "New Password");
			label1_nodes.forEach(detach);
			t6 = claim_space(div1_nodes);

			input1 = claim_element(div1_nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				required: true
			});

			t7 = claim_space(div1_nodes);
			span0 = claim_element(div1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t8 = claim_text(span0_nodes, "The password must be 8-20 characters, and must ");
			em = claim_element(span0_nodes, "EM", {});
			var em_nodes = children(em);
			t9 = claim_text(em_nodes, "not");
			em_nodes.forEach(detach);
			t10 = claim_text(span0_nodes, " contain spaces.");
			span0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t11 = claim_space(form_nodes);
			div2 = claim_element(form_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label2 = claim_element(div2_nodes, "LABEL", { for: true });
			var label2_nodes = children(label2);
			t12 = claim_text(label2_nodes, "Verify");
			label2_nodes.forEach(detach);
			t13 = claim_space(div2_nodes);

			input2 = claim_element(div2_nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				required: true
			});

			t14 = claim_space(div2_nodes);
			span1 = claim_element(div2_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t15 = claim_text(span1_nodes, "To confirm, type the new password again.");
			span1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t16 = claim_space(form_nodes);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			button = claim_element(div3_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t17 = claim_text(button_nodes, "Save");
			button_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "h5 mb-0");
			attr(label0, "for", "inputPasswordOld");
			attr(input0, "type", "password");
			attr(input0, "class", "form-control");
			attr(input0, "id", "inputPasswordOld");
			input0.required = "";
			attr(div0, "class", "mb-4");
			attr(label1, "for", "inputPasswordNew");
			attr(input1, "type", "password");
			attr(input1, "class", "form-control");
			attr(input1, "id", "inputPasswordNew");
			input1.required = "";
			attr(span0, "class", "form-text small text-muted");
			attr(div1, "class", "mb-4");
			attr(label2, "for", "inputPasswordNewVerify");
			attr(input2, "type", "password");
			attr(input2, "class", "form-control");
			attr(input2, "id", "inputPasswordNewVerify");
			input2.required = "";
			attr(span1, "class", "form-text small text-muted");
			attr(div2, "class", "mb-4");
			attr(button, "type", "submit");
			attr(button, "class", "btn btn-dark");
			attr(div3, "class", "form-group");
			attr(form, "class", "form mt-5");
			attr(form, "autocomplete", "off");
			attr(div4, "class", "card-body");
			attr(div5, "class", "card border-light p-0 p-md-4 mb-4");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div4);
			append(div4, h3);
			append(h3, t0);
			append(div4, t1);
			append(div4, form);
			append(form, div0);
			append(div0, label0);
			append(label0, t2);
			append(div0, t3);
			append(div0, input0);
			append(form, t4);
			append(form, div1);
			append(div1, label1);
			append(label1, t5);
			append(div1, t6);
			append(div1, input1);
			append(div1, t7);
			append(div1, span0);
			append(span0, t8);
			append(span0, em);
			append(em, t9);
			append(span0, t10);
			append(form, t11);
			append(form, div2);
			append(div2, label2);
			append(label2, t12);
			append(div2, t13);
			append(div2, input2);
			append(div2, t14);
			append(div2, span1);
			append(span1, t15);
			append(form, t16);
			append(form, div3);
			append(div3, button);
			append(button, t17);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div6);
		}
	};
}

class Security extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

/* src\routes\account-settings\security.svelte generated by Svelte v3.24.1 */

function create_fragment$1(ctx) {
	let div5;
	let div4;
	let div3;
	let div2;
	let div0;
	let accountsidebar;
	let t;
	let div1;
	let security;
	let current;
	accountsidebar = new AccountSidebar({ props: { page: "security" } });
	security = new Security({});

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(accountsidebar.$$.fragment);
			t = space();
			div1 = element("div");
			create_component(security.$$.fragment);
			this.h();
		},
		l(nodes) {
			div5 = claim_element(nodes, "DIV", {});
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(accountsidebar.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(security.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col-12 col-md-4 d-none d-lg-block");
			attr(div1, "class", "col-12 col-lg-8");
			attr(div2, "class", "row pt-5 pt-md-0");
			attr(div3, "class", "container");
			attr(div4, "class", "section section-lg pt-5 pt-md-7 bg-soft");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			mount_component(accountsidebar, div0, null);
			append(div2, t);
			append(div2, div1);
			mount_component(security, div1, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(accountsidebar.$$.fragment, local);
			transition_in(security.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(accountsidebar.$$.fragment, local);
			transition_out(security.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_component(accountsidebar);
			destroy_component(security);
		}
	};
}

class Security_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment$1, safe_not_equal, {});
	}
}

export default Security_1;
